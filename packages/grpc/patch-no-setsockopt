--- src/core/lib/iomgr/socket_utils_common_posix.c
+++ src/core/lib/iomgr/socket_utils_common_posix.c
@@ -119,17 +119,25 @@
 }
 
 grpc_error *grpc_set_socket_sndbuf(int fd, int buffer_size_bytes) {
+#ifdef SO_SNDBUF
   return 0 == setsockopt(fd, SOL_SOCKET, SO_SNDBUF, &buffer_size_bytes,
                          sizeof(buffer_size_bytes))
              ? GRPC_ERROR_NONE
              : GRPC_OS_ERROR(errno, "setsockopt(SO_SNDBUF)");
+#else
+  return GRPC_ERROR_NONE;
+#endif
 }
 
 grpc_error *grpc_set_socket_rcvbuf(int fd, int buffer_size_bytes) {
+#ifdef SO_RCVBUF
   return 0 == setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &buffer_size_bytes,
                          sizeof(buffer_size_bytes))
              ? GRPC_ERROR_NONE
              : GRPC_OS_ERROR(errno, "setsockopt(SO_RCVBUF)");
+#else
+  return GRPC_ERROR_NONE;
+#endif
 }
 
 /* set a socket to close on exec */
@@ -154,6 +162,7 @@
 
 /* set a socket to reuse old addresses */
 grpc_error *grpc_set_socket_reuse_addr(int fd, int reuse) {
+#ifdef SO_REUSEADDR
   int val = (reuse != 0);
   int newval;
   socklen_t intlen = sizeof(newval);
@@ -166,6 +175,7 @@
   if ((newval != 0) != val) {
     return GRPC_ERROR_CREATE_FROM_STATIC_STRING("Failed to set SO_REUSEADDR");
   }
+#endif
 
   return GRPC_ERROR_NONE;
 }
@@ -195,6 +205,7 @@
 
 /* disable nagle */
 grpc_error *grpc_set_socket_low_latency(int fd, int low_latency) {
+#ifdef TCP_NODELAY
   int val = (low_latency != 0);
   int newval;
   socklen_t intlen = sizeof(newval);
@@ -207,6 +218,7 @@
   if ((newval != 0) != val) {
     return GRPC_ERROR_CREATE_FROM_STATIC_STRING("Failed to set TCP_NODELAY");
   }
+#endif
   return GRPC_ERROR_NONE;
 }
 
@@ -253,6 +265,7 @@
 int grpc_forbid_dualstack_sockets_for_testing = 0;
 
 static int set_socket_dualstack(int fd) {
+#ifdef IPV6_V6ONLY
   if (!grpc_forbid_dualstack_sockets_for_testing) {
     const int off = 0;
     return 0 == setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &off, sizeof(off));
@@ -262,6 +275,9 @@
     setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &on, sizeof(on));
     return 0;
   }
+#else
+  return 0;
+#endif
 }
 
 static grpc_error *error_for_fd(int fd, const grpc_resolved_address *addr) {
