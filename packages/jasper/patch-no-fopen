--- src/libjasper/base/jas_image.c
+++ src/libjasper/base/jas_image.c
@@ -98,8 +98,7 @@
 static void jas_image_cmpt_destroy(jas_image_cmpt_t *cmpt);
 static jas_image_cmpt_t *jas_image_cmpt_create(int_fast32_t tlx,
   int_fast32_t tly, int_fast32_t hstep, int_fast32_t vstep,
-  int_fast32_t width, int_fast32_t height, uint_fast16_t depth, bool sgnd,
-  uint_fast32_t inmem);
+  int_fast32_t width, int_fast32_t height, uint_fast16_t depth, bool sgnd);
 static void jas_image_setbbox(jas_image_t *image);
 static jas_image_cmpt_t *jas_image_cmpt_copy(jas_image_cmpt_t *cmpt);
 static int jas_image_growcmpts(jas_image_t *image, int maxcmpts);
@@ -132,7 +131,6 @@
 {
 	jas_image_t *image;
 	size_t rawsize;
-	uint_fast32_t inmem;
 	int cmptno;
 	jas_image_cmptparm_t *cmptparm;
 
@@ -180,11 +178,10 @@
 			goto error;
 		}
 		rawsize /= 8;
-		inmem = (rawsize < JAS_IMAGE_INMEMTHRESH);
 		if (!(image->cmpts_[cmptno] = jas_image_cmpt_create(cmptparm->tlx,
 		  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
 		  cmptparm->width, cmptparm->height, cmptparm->prec,
-		  cmptparm->sgnd, inmem))) {
+		  cmptparm->sgnd))) {
 			goto error;
 		}
 		++image->numcmpts_;
@@ -325,14 +322,13 @@
 
 static jas_image_cmpt_t *jas_image_cmpt_create(int_fast32_t tlx,
   int_fast32_t tly, int_fast32_t hstep, int_fast32_t vstep,
-  int_fast32_t width, int_fast32_t height, uint_fast16_t depth, bool sgnd,
-  uint_fast32_t inmem)
+  int_fast32_t width, int_fast32_t height, uint_fast16_t depth, bool sgnd)
 {
 	jas_image_cmpt_t *cmpt;
 	size_t size;
 
 	JAS_DBGLOG(100, (
-	  "jas_image_cmpt_create(%ld, %ld, %ld, %ld, %ld, %ld, %d, %d, %d)\n",
+	  "jas_image_cmpt_create(%ld, %ld, %ld, %ld, %ld, %ld, %d, %d)\n",
 	  JAS_CAST(long, tlx),
 	  JAS_CAST(long, tly),
 	  JAS_CAST(long, hstep),
@@ -340,8 +336,7 @@
 	  JAS_CAST(long, width),
 	  JAS_CAST(long, height),
 	  JAS_CAST(int, depth),
-	  sgnd,
-	  inmem
+	  sgnd
 	  ));
 
 	cmpt = 0;
@@ -378,8 +373,7 @@
 	if (!jas_safe_size_mul3(cmpt->width_, cmpt->height_, cmpt->cps_, &size)) {
 		goto error;
 	}
-	cmpt->stream_ = (inmem) ? jas_stream_memopen2(0, size) :
-	  jas_stream_tmpfile();
+	cmpt->stream_ = jas_stream_memopen2(0, size);
 	if (!cmpt->stream_) {
 		goto error;
 	}
@@ -781,7 +775,7 @@
 	if (!(newcmpt = jas_image_cmpt_create(cmptparm->tlx,
 	  cmptparm->tly, cmptparm->hstep, cmptparm->vstep,
 	  cmptparm->width, cmptparm->height, cmptparm->prec,
-	  cmptparm->sgnd, 1))) {
+	  cmptparm->sgnd))) {
 		return -1;
 	}
 	if (cmptno < image->numcmpts_) {
--- src/libjasper/base/jas_stream.c
+++ src/libjasper/base/jas_stream.c
@@ -375,6 +375,7 @@
 
 #endif
 
+#if 0
 jas_stream_t *jas_stream_fopen(const char *filename, const char *mode)
 {
 	jas_stream_t *stream;
@@ -439,6 +440,7 @@
 
 	return stream;
 }
+#endif
 
 jas_stream_t *jas_stream_freopen(const char *path, const char *mode, FILE *fp)
 {
@@ -491,6 +493,7 @@
 	return stream;
 }
 
+#if 0
 jas_stream_t *jas_stream_tmpfile()
 {
 	jas_stream_t *stream;
@@ -544,6 +547,7 @@
 
 	return stream;
 }
+#endif
 
 jas_stream_t *jas_stream_fdopen(int fd, const char *mode)
 {
@@ -584,7 +588,6 @@
 	}
 	obj->fd = fd;
 	obj->flags = 0;
-	obj->pathname[0] = '\0';
 	stream->obj_ = (void *) obj;
 
 	/* Do not close the underlying file descriptor when the stream is
@@ -1359,9 +1362,6 @@
 	JAS_DBGLOG(100, ("file_close(%p)\n", obj));
 	fileobj = JAS_CAST(jas_stream_fileobj_t *, obj);
 	ret = close(fileobj->fd);
-	if (fileobj->flags & JAS_STREAM_FILEOBJ_DELONCLOSE) {
-		unlink(fileobj->pathname);
-	}
 	jas_free(fileobj);
 	return ret;
 }
--- src/libjasper/include/jasper/jas_image.h
+++ src/libjasper/include/jasper/jas_image.h
@@ -220,6 +220,8 @@
 
 //	bool inmem_;
 
+	bool inmem_;
+
 } jas_image_t;
 
 /* Component parameters class. */
--- src/libjasper/include/jasper/jas_stream.h
+++ src/libjasper/include/jasper/jas_stream.h
@@ -252,10 +252,8 @@
 typedef struct {
 	int fd;
 	int flags;
-	char pathname[L_tmpnam + 1];
 } jas_stream_fileobj_t;
 
-#define	JAS_STREAM_FILEOBJ_DELONCLOSE	0x01
 #define JAS_STREAM_FILEOBJ_NOCLOSE	0x02
 
 /*
@@ -289,7 +287,6 @@
 \******************************************************************************/
 
 /* Open a file as a stream. */
-JAS_DLLEXPORT jas_stream_t *jas_stream_fopen(const char *filename, const char *mode);
 
 /* Open a memory buffer as a stream. */
 JAS_DLLEXPORT jas_stream_t *jas_stream_memopen(char *buf, int bufsize);
@@ -305,7 +302,6 @@
 JAS_DLLEXPORT jas_stream_t *jas_stream_freopen(const char *path, const char *mode, FILE *fp);
 
 /* Open a temporary file as a stream. */
-JAS_DLLEXPORT jas_stream_t *jas_stream_tmpfile(void);
 
 /* Close a stream. */
 JAS_DLLEXPORT int jas_stream_close(jas_stream_t *stream);
--- src/libjasper/mif/mif_cod.c
+++ src/libjasper/mif/mif_cod.c
@@ -92,7 +92,6 @@
 	MIF_VSAMP,
 	MIF_PREC,
 	MIF_SGND,
-	MIF_DATA
 } mif_tagid_t;
 
 /******************************************************************************\
@@ -131,7 +130,6 @@
 	{MIF_VSAMP, "samppery"},
 	{MIF_PREC, "prec"},
 	{MIF_SGND, "sgnd"},
-	{MIF_DATA, "data"},
 	{-1, 0}
 };
 
@@ -174,9 +172,8 @@
 
 	for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno) {
 		cmpt = hdr->cmpts[cmptno];
-		tmpstream = cmpt->data ? jas_stream_fopen(cmpt->data, "rb") : in;
+		tmpstream = in;
 		if (!tmpstream) {
-			jas_eprintf("cannot open component file %s\n", cmpt->data);
 			goto error;
 		}
 		if (!(tmpimage = jas_image_decode(tmpstream, -1, "allow_trunc=1"))) {
@@ -299,7 +296,6 @@
 	/* Output component data. */
 	for (cmptno = 0; cmptno < hdr->numcmpts; ++cmptno) {
 		cmpt = hdr->cmpts[cmptno];
-		if (!cmpt->data) {
 			if (!(tmpimage = jas_image_create0())) {
 				goto error;
 			}	
@@ -344,7 +340,6 @@
 			}
 			jas_image_destroy(tmpimage);
 			tmpimage = 0;
-		}
 	}
 
 	mif_hdr_destroy(hdr);
@@ -558,7 +553,6 @@
 	cmpt->height = 0;
 	cmpt->prec = 0;
 	cmpt->sgnd = -1;
-	cmpt->data = 0;
 
 	if (!(tvp = jas_tvparser_create(buf))) {
 		jas_eprintf("cannot create parser\n");
@@ -599,11 +593,6 @@
 		case MIF_SGND:
 			cmpt->sgnd = atoi(jas_tvparser_getval(tvp));
 			break;
-		case MIF_DATA:
-			if (!(cmpt->data = jas_strdup(jas_tvparser_getval(tvp)))) {
-				goto error;
-			}
-			break;
 		default:
 			jas_eprintf("invalid component information: %s\n", buf);
 			goto error;
@@ -651,9 +640,6 @@
 		  "sampperx=%ld samppery=%ld width=%ld height=%ld prec=%d sgnd=%d",
 		  cmpt->tlx, cmpt->tly, cmpt->sampperx, cmpt->samppery, cmpt->width,
 		  cmpt->height, cmpt->prec, cmpt->sgnd);
-		if (cmpt->data) {
-			jas_stream_printf(out, " data=%s", cmpt->data);
-		}
 		jas_stream_printf(out, "\n");
 	}
 
@@ -692,9 +678,6 @@
 
 static void mif_cmpt_destroy(mif_cmpt_t *cmpt)
 {
-	if (cmpt->data) {
-		jas_free(cmpt->data);
-	}
 	jas_free(cmpt);
 }
 
@@ -792,7 +775,6 @@
 		cmpt->samppery = jas_image_cmptvstep(image, cmptno);
 		cmpt->prec = jas_image_cmptprec(image, cmptno);
 		cmpt->sgnd = jas_image_cmptsgnd(image, cmptno);
-		cmpt->data = 0;
 	}
 	return hdr;
 
--- src/libjasper/mif/mif_cod.h
+++ src/libjasper/mif/mif_cod.h
@@ -102,7 +102,6 @@
 
 	int_fast16_t sgnd;
 
-	char *data;
 
 } mif_cmpt_t;
 
