--- src/module_wrap.cc
+++ src/module_wrap.cc
@@ -336,6 +336,9 @@
 
 Maybe<uv_file> CheckFile(const URL& search,
                          CheckFileOptions opt = CLOSE_AFTER_CHECK) {
+#ifdef __CloudABI__
+  return Nothing<uv_file>();
+#else
   uv_fs_t fs_req;
   std::string path = search.ToFilePath();
   if (path.empty()) {
@@ -365,6 +368,7 @@
   }
 
   return Just(fd);
+#endif
 }
 
 enum ResolveExtensionsOptions {
--- src/node.cc
+++ src/node.cc
@@ -3328,7 +3328,9 @@
 
   env->SetMethod(process, "_kill", Kill);
 
+#ifndef __CloudABI__
   env->SetMethod(process, "_debugProcess", DebugProcess);
+#endif
   env->SetMethod(process, "_debugEnd", DebugEnd);
 
   env->SetMethod(process, "hrtime", Hrtime);
@@ -3921,8 +3923,12 @@
 #endif  // HAVE_INSPECTOR
 }
 
-
-#ifdef __POSIX__
+#ifdef __CloudABI__
+void RegisterSignalHandler(int signal,
+                           void (*handler)(int signal),
+                           bool reset_handler) {
+}
+#elif defined(__POSIX__)
 void RegisterSignalHandler(int signal,
                            void (*handler)(int signal),
                            bool reset_handler) {
@@ -4092,7 +4098,7 @@
   CHECK_EQ(err, 0);
 #endif  // HAVE_INSPECTOR
 
-#ifndef NODE_SHARED_MODE
+#if !defined(NODE_SHARED_MODE) && !defined(__CloudABI__)
   // Restore signal dispositions, the parent process may have changed them.
   struct sigaction act;
   memset(&act, 0, sizeof(act));
@@ -4169,7 +4175,7 @@
     }
   }
 
-#ifdef __POSIX__
+#if defined(__POSIX__) && !defined(__CloudABI__)
   // Block SIGPROF signals when sleeping in epoll_wait/kevent/etc.  Avoids the
   // performance penalty of frequent EINTR wakeups when the profiler is running.
   // Only do this for v8.log profiling, as it breaks v8::CpuProfiler users.
@@ -4547,8 +4553,10 @@
 
   CHECK_GT(argc, 0);
 
+#ifndef __CloudABI__
   // Hack around with the argv pointer. Used for process.title = "blah".
   argv = uv_setup_args(argc, argv);
+#endif
 
   // This needs to run *before* V8::Initialize().  The const_cast is not
   // optional, in case you're wondering.
--- src/node_watchdog.cc
+++ src/node_watchdog.cc
@@ -179,7 +179,9 @@
     return 0;
   }
 
-#ifdef __POSIX__
+#ifdef __CloudABI__
+  // TODO(ed): Implement!
+#elif defined(__POSIX__)
   CHECK_EQ(has_running_thread_, false);
   has_pending_signal_ = false;
   stopping_ = false;
--- src/tracing/node_trace_writer.cc
+++ src/tracing/node_trace_writer.cc
@@ -57,10 +57,15 @@
 void NodeTraceWriter::OpenNewFileForStreaming() {
   ++file_num_;
   uv_fs_t req;
+#ifdef __CloudABI__
+  // TODO(ed): Implement!
+  fd_ = -1;
+#else
   std::ostringstream log_file;
   log_file << "node_trace." << file_num_ << ".log";
   fd_ = uv_fs_open(tracing_loop_, &req, log_file.str().c_str(),
       O_CREAT | O_WRONLY | O_TRUNC, 0644, NULL);
+#endif
   CHECK_NE(fd_, -1);
   uv_fs_req_cleanup(&req);
 }
