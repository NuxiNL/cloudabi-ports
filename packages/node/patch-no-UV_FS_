--- src/node_file.cc
+++ src/node_file.cc
@@ -21,7 +21,9 @@
 
 #include "node_buffer.h"
 #include "node_internals.h"
+#ifndef __CloudABI__
 #include "node_stat_watcher.h"
+#endif
 
 #include "req-wrap-inl.h"
 #include "string_bytes.h"
@@ -181,7 +183,11 @@
                           req->result,
                           req_wrap->syscall(),
                           nullptr,
+#ifdef __CloudABI__
+                          nullptr,
+#else
                           req->path,
+#endif
                           req_wrap->data());
   } else {
     // error value is empty or null for non-error.
@@ -192,47 +198,80 @@
 
     switch (req->fs_type) {
       // These all have no data to pass.
+#ifdef UV_FS_ACCESS
       case UV_FS_ACCESS:
+#endif
       case UV_FS_CLOSE:
+#ifdef UV_FS_RENAME
       case UV_FS_RENAME:
+#endif
+#ifdef UV_FS_UNLINK
       case UV_FS_UNLINK:
+#endif
+#ifdef UV_FS_RMDIR
       case UV_FS_RMDIR:
+#endif
+#ifdef UV_FS_MKDIR
       case UV_FS_MKDIR:
+#endif
       case UV_FS_FTRUNCATE:
       case UV_FS_FSYNC:
       case UV_FS_FDATASYNC:
+#ifdef UV_FS_LINK
       case UV_FS_LINK:
+#endif
+#ifdef UV_FS_SYMLINK
       case UV_FS_SYMLINK:
+#endif
+#ifdef UV_FS_CHMOD
       case UV_FS_CHMOD:
+#endif
+#ifdef UV_FS_FCHMOD
       case UV_FS_FCHMOD:
+#endif
+#ifdef UV_FS_CHOWN
       case UV_FS_CHOWN:
+#endif
+#ifdef UV_FS_FCHOWN
       case UV_FS_FCHOWN:
+#endif
+#ifdef UV_FS_COPYFILE
       case UV_FS_COPYFILE:
+#endif
         // These, however, don't.
         argc = 1;
         break;
 
+#ifdef UV_FS_STAT
       case UV_FS_STAT:
+#endif
+#ifdef UV_FS_LSTAT
       case UV_FS_LSTAT:
+#endif
       case UV_FS_FSTAT:
         argc = 1;
         FillStatsArray(env->fs_stats_field_array(),
-                       static_cast<const uv_stat_t*>(req->ptr));
+                       static_cast<const uv_stat_t*>(&req->statbuf));
         break;
 
+#ifdef UV_FS_UTIME
       case UV_FS_UTIME:
+#endif
       case UV_FS_FUTIME:
         argc = 0;
         break;
 
+#ifdef UV_FS_OPEN
       case UV_FS_OPEN:
         argv[1] = Integer::New(env->isolate(), req->result);
         break;
+#endif
 
       case UV_FS_WRITE:
         argv[1] = Integer::New(env->isolate(), req->result);
         break;
 
+#ifdef UV_FS_MKDTEMP
       case UV_FS_MKDTEMP:
       {
         link = StringBytes::Encode(env->isolate(),
@@ -246,7 +285,9 @@
         }
         break;
       }
+#endif
 
+#ifdef UV_FS_READLINK
       case UV_FS_READLINK:
         link = StringBytes::Encode(env->isolate(),
                                    static_cast<const char*>(req->ptr),
@@ -258,7 +299,9 @@
           argv[1] = link.ToLocalChecked();
         }
         break;
+#endif
 
+#ifdef UV_FS_REALPATH
       case UV_FS_REALPATH:
         link = StringBytes::Encode(env->isolate(),
                                    static_cast<const char*>(req->ptr),
@@ -270,12 +313,14 @@
           argv[1] = link.ToLocalChecked();
         }
         break;
+#endif
 
       case UV_FS_READ:
         // Buffer interface
         argv[1] = Integer::New(env->isolate(), req->result);
         break;
 
+#ifdef UV_FS_SCANDIR
       case UV_FS_SCANDIR:
         {
           int r;
@@ -324,6 +369,7 @@
           argv[1] = names;
         }
         break;
+#endif
 
       default:
         CHECK(0 && "Unhandled eio response");
@@ -362,7 +408,6 @@
   if (err < 0) {                                                              \
     uv_fs_t* uv_req = req_wrap->req();                                        \
     uv_req->result = err;                                                     \
-    uv_req->path = nullptr;                                                   \
     After(uv_req);                                                            \
     req_wrap = nullptr;                                                       \
   } else {                                                                    \
@@ -390,6 +435,7 @@
 
 #define SYNC_RESULT err
 
+#ifdef UV_FS_ACCESS
 void Access(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args.GetIsolate());
   HandleScope scope(env->isolate());
@@ -410,6 +456,7 @@
     SYNC_CALL(access, *path, *path, mode);
   }
 }
+#endif
 
 
 void Close(const FunctionCallbackInfo<Value>& args) {
@@ -435,17 +482,26 @@
   fields[0] = s->st_dev;
   fields[1] = s->st_mode;
   fields[2] = s->st_nlink;
+#ifdef __CloudABI__
+  fields[3] = 0;
+  fields[4] = 0;
+#else
   fields[3] = s->st_uid;
   fields[4] = s->st_gid;
+#endif
+#ifdef __CloudABI__
+  fields[5] = 0;
+#else
   fields[5] = s->st_rdev;
-#if defined(__POSIX__)
+#endif
+#if defined(__POSIX__) && !defined(__CloudABI__)
   fields[6] = s->st_blksize;
 #else
   fields[6] = -1;
 #endif
   fields[7] = s->st_ino;
   fields[8] = s->st_size;
-#if defined(__POSIX__)
+#if defined(__POSIX__) && !defined(__CloudABI__)
   fields[9] = s->st_blocks;
 #else
   fields[9] = -1;
@@ -461,10 +517,15 @@
   X(10, atim)
   X(11, mtim)
   X(12, ctim)
+#ifdef __CloudABI__
+  fields[13] = 0;
+#else
   X(13, birthtim)
+#endif
 #undef X
 }
 
+#ifdef UV_FS_OPEN
 // Used to speed up module loading.  Returns the contents of the file as
 // a string or undefined when the file cannot be opened.  The speedup
 // comes from not creating Error objects on failure.
@@ -522,7 +583,9 @@
                           offset - start);
   args.GetReturnValue().Set(chars_string);
 }
+#endif
 
+#ifdef UV_FS_STAT
 // Used to speed up module loading.  Returns 0 if the path refers to
 // a file, 1 when it's a directory or < 0 on error (usually -ENOENT.)
 // The speedup comes from not creating thousands of Stat and Error objects.
@@ -560,7 +623,9 @@
                    static_cast<const uv_stat_t*>(SYNC_REQ.ptr));
   }
 }
+#endif
 
+#ifdef UV_FS_LSTAT
 static void LStat(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -578,6 +643,7 @@
                    static_cast<const uv_stat_t*>(SYNC_REQ.ptr));
   }
 }
+#endif
 
 static void FStat(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -594,10 +660,11 @@
   } else {
     SYNC_CALL(fstat, nullptr, fd)
     FillStatsArray(env->fs_stats_field_array(),
-                   static_cast<const uv_stat_t*>(SYNC_REQ.ptr));
+                   static_cast<const uv_stat_t*>(&SYNC_REQ.statbuf));
   }
 }
 
+#ifdef UV_FS_SYMLINK
 static void Symlink(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -631,7 +698,9 @@
     SYNC_DEST_CALL(symlink, *target, *path, *target, *path, flags)
   }
 }
+#endif
 
+#ifdef UV_FS_LINK
 static void Link(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -653,7 +722,9 @@
     SYNC_DEST_CALL(link, *src, *dest, *src, *dest)
   }
 }
+#endif
 
+#ifdef UV_FS_READLINK
 static void ReadLink(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -689,7 +760,9 @@
     args.GetReturnValue().Set(rc.ToLocalChecked());
   }
 }
+#endif
 
+#ifdef UV_FS_RENAME
 static void Rename(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -710,6 +783,7 @@
     SYNC_DEST_CALL(rename, *old_path, *new_path, *old_path, *new_path)
   }
 }
+#endif
 
 static void FTruncate(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -774,6 +848,7 @@
   }
 }
 
+#ifdef UV_FS_UNLINK
 static void Unlink(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -789,7 +864,9 @@
     SYNC_CALL(unlink, *path, *path)
   }
 }
+#endif
 
+#ifdef UV_FS_RMDIR
 static void RMDir(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -805,7 +882,9 @@
     SYNC_CALL(rmdir, *path, *path)
   }
 }
+#endif
 
+#ifdef UV_FS_MKDIR
 static void MKDir(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -825,7 +904,9 @@
     SYNC_CALL(mkdir, *path, *path, mode)
   }
 }
+#endif
 
+#ifdef UV_FS_REALPATH
 static void RealPath(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -861,7 +942,9 @@
     args.GetReturnValue().Set(rc.ToLocalChecked());
   }
 }
+#endif
 
+#ifdef UV_FS_READDIR
 static void ReadDir(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -926,7 +1009,9 @@
     args.GetReturnValue().Set(names);
   }
 }
+#endif
 
+#ifdef UV_FS_OPEN
 static void Open(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -955,8 +1040,10 @@
     args.GetReturnValue().Set(SYNC_RESULT);
   }
 }
+#endif
 
 
+#ifdef UV_FS_COPYFILE
 static void CopyFile(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -979,6 +1066,7 @@
     SYNC_DEST_CALL(copyfile, *src, *dest, *src, *dest, flags)
   }
 }
+#endif
 
 
 // Wrapper for write(2).
@@ -1133,7 +1221,9 @@
   if (err < 0) {
     uv_fs_t* uv_req = req_wrap->req();
     uv_req->result = err;
+#ifndef __CloudABI__
     uv_req->path = nullptr;
+#endif
     After(uv_req);
     return;
   }
@@ -1203,6 +1293,7 @@
 }
 
 
+#ifdef UV_FS_CHMOD
 /* fs.chmod(path, mode);
  * Wrapper for chmod(1) / EIO_CHMOD
  */
@@ -1225,8 +1316,10 @@
     SYNC_CALL(chmod, *path, *path, mode);
   }
 }
+#endif
 
 
+#ifdef UV_FS_FCHMOD
 /* fs.fchmod(fd, mode);
  * Wrapper for fchmod(1) / EIO_FCHMOD
  */
@@ -1249,8 +1342,10 @@
     SYNC_CALL(fchmod, 0, fd, mode);
   }
 }
+#endif
 
 
+#ifdef UV_FS_CHOWN
 /* fs.chown(path, uid, gid);
  * Wrapper for chown(1) / EIO_CHOWN
  */
@@ -1281,8 +1376,10 @@
     SYNC_CALL(chown, *path, *path, uid, gid);
   }
 }
+#endif
 
 
+#ifdef UV_FS_FCHOWN
 /* fs.fchown(fd, uid, gid);
  * Wrapper for fchown(1) / EIO_FCHOWN
  */
@@ -1313,8 +1410,10 @@
     SYNC_CALL(fchown, 0, fd, uid, gid);
   }
 }
+#endif
 
 
+#ifdef UV_FS_UTIME
 static void UTimes(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -1342,6 +1441,7 @@
     SYNC_CALL(utime, *path, *path, atime, mtime);
   }
 }
+#endif
 
 static void FUTimes(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -1371,6 +1471,7 @@
   }
 }
 
+#ifdef UV_FS_MKDTEMP
 static void Mkdtemp(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -1398,6 +1499,7 @@
     args.GetReturnValue().Set(rc.ToLocalChecked());
   }
 }
+#endif
 
 void GetStatValues(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
@@ -1421,48 +1523,92 @@
             void* priv) {
   Environment* env = Environment::GetCurrent(context);
 
+#ifdef UV_FS_ACCESS
   env->SetMethod(target, "access", Access);
+#endif
   env->SetMethod(target, "close", Close);
+#ifdef UV_FS_OPEN
   env->SetMethod(target, "open", Open);
+#endif
   env->SetMethod(target, "read", Read);
   env->SetMethod(target, "fdatasync", Fdatasync);
   env->SetMethod(target, "fsync", Fsync);
+#ifdef UV_FS_RENAME
   env->SetMethod(target, "rename", Rename);
+#endif
   env->SetMethod(target, "ftruncate", FTruncate);
+#ifdef UV_FS_RMDIR
   env->SetMethod(target, "rmdir", RMDir);
+#endif
+#ifdef UV_FS_MKDIR
   env->SetMethod(target, "mkdir", MKDir);
+#endif
+#ifdef UV_FS_READDIR
   env->SetMethod(target, "readdir", ReadDir);
+#endif
+#ifdef UV_FS_OPEN
   env->SetMethod(target, "internalModuleReadFile", InternalModuleReadFile);
+#endif
+#ifdef UV_FS_STAT
   env->SetMethod(target, "internalModuleStat", InternalModuleStat);
   env->SetMethod(target, "stat", Stat);
+#endif
+#ifdef UV_FS_LSTAT
   env->SetMethod(target, "lstat", LStat);
+#endif
   env->SetMethod(target, "fstat", FStat);
+#ifdef UV_FS_LINK
   env->SetMethod(target, "link", Link);
+#endif
+#ifdef UV_FS_SYMLINK
   env->SetMethod(target, "symlink", Symlink);
+#endif
+#ifdef UV_FS_READLINK
   env->SetMethod(target, "readlink", ReadLink);
+#endif
+#ifdef UV_FS_UNLINK
   env->SetMethod(target, "unlink", Unlink);
+#endif
   env->SetMethod(target, "writeBuffer", WriteBuffer);
   env->SetMethod(target, "writeBuffers", WriteBuffers);
   env->SetMethod(target, "writeString", WriteString);
+#ifdef UV_FS_REALPATH
   env->SetMethod(target, "realpath", RealPath);
+#endif
+#ifdef UV_FS_COPYFILE
   env->SetMethod(target, "copyFile", CopyFile);
+#endif
 
+#ifdef UV_FS_CHMOD
   env->SetMethod(target, "chmod", Chmod);
+#endif
+#ifdef UV_FS_FCHMOD
   env->SetMethod(target, "fchmod", FChmod);
+#endif
   // env->SetMethod(target, "lchmod", LChmod);
 
+#ifdef UV_FS_CHOWN
   env->SetMethod(target, "chown", Chown);
+#endif
+#ifdef UV_FS_FCHOWN
   env->SetMethod(target, "fchown", FChown);
+#endif
   // env->SetMethod(target, "lchown", LChown);
 
+#ifdef UV_FS_UTIME
   env->SetMethod(target, "utimes", UTimes);
+#endif
   env->SetMethod(target, "futimes", FUTimes);
 
+#ifdef UV_FS_MKDTEMP
   env->SetMethod(target, "mkdtemp", Mkdtemp);
+#endif
 
   env->SetMethod(target, "getStatValues", GetStatValues);
 
+#ifndef __CloudABI__
   StatWatcher::Initialize(env, target);
+#endif
 
   // Create FunctionTemplate for FSReqWrap
   Local<FunctionTemplate> fst =
