--- deps/v8/src/arm64/instrument-arm64.cc
+++ deps/v8/src/arm64/instrument-arm64.cc
@@ -100,11 +100,15 @@
   // Set up the output stream. If datafile is non-NULL, use that file. If it
   // can't be opened, or datafile is NULL, use stderr.
   if (datafile != NULL) {
+#if V8_OS_CLOUDABI
+    output_stream_ = stderr;
+#else
     output_stream_ = fopen(datafile, "w");
     if (output_stream_ == NULL) {
       fprintf(stderr, "Can't open output file %s. Using stderr.\n", datafile);
       output_stream_ = stderr;
     }
+#endif
   }
 
   static const int num_counters = arraysize(kCounterList);
--- deps/v8/src/base/platform/platform-posix.cc
+++ deps/v8/src/base/platform/platform-posix.cc
@@ -291,6 +291,7 @@
 };
 
 
+#if !V8_OS_CLOUDABI
 // static
 OS::MemoryMappedFile* OS::MemoryMappedFile::open(const char* name) {
   if (FILE* file = fopen(name, "r+")) {
@@ -327,6 +328,7 @@
   }
   return nullptr;
 }
+#endif
 
 
 PosixMemoryMappedFile::~PosixMemoryMappedFile() {
@@ -397,6 +399,7 @@
 //
 
 FILE* OS::FOpen(const char* path, const char* mode) {
+#if !V8_OS_CLOUDABI
   FILE* file = fopen(path, mode);
   if (file == NULL) return NULL;
   struct stat file_stat;
@@ -407,13 +410,16 @@
   bool is_regular_file = ((file_stat.st_mode & S_IFREG) != 0);
   if (is_regular_file) return file;
   fclose(file);
+#endif
   return NULL;
 }
 
 
+#if !V8_OS_CLOUDABI
 bool OS::Remove(const char* path) {
   return (remove(path) == 0);
 }
+#endif
 
 char OS::DirectorySeparator() { return '/'; }
 
--- deps/v8/src/compiler/pipeline.cc
+++ deps/v8/src/compiler/pipeline.cc
@@ -457,6 +457,7 @@
 
 namespace {
 
+#if !V8_OS_CLOUDABI
 struct TurboCfgFile : public std::ofstream {
   explicit TurboCfgFile(Isolate* isolate)
       : std::ofstream(isolate->GetTurboCfgFileName().c_str(),
@@ -468,8 +469,10 @@
       : std::ofstream(GetVisualizerLogFileName(info, nullptr, "json").get(),
                       mode) {}
 };
+#endif
 
 void TraceSchedule(CompilationInfo* info, Schedule* schedule) {
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     AllowHandleDereference allow_deref;
     TurboJsonFile json_of(info, std::ios_base::app);
@@ -482,6 +485,7 @@
     }
     json_of << "\"},\n";
   }
+#endif
   if (FLAG_trace_turbo_graph || FLAG_trace_turbo_scheduler) {
     AllowHandleDereference allow_deref;
     CodeTracer::Scope tracing_scope(info->isolate()->GetCodeTracer());
@@ -560,6 +564,7 @@
     pipeline_statistics->BeginPhaseKind("initializing");
   }
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     TurboJsonFile json_of(info, std::ios_base::trunc);
     std::unique_ptr<char[]> function_name = info->GetDebugName();
@@ -579,6 +584,7 @@
     }
     json_of << "\",\n\"phases\":[";
   }
+#endif
 
   return pipeline_statistics;
 }
@@ -784,11 +790,13 @@
 
 PipelineWasmCompilationJob::Status
 PipelineWasmCompilationJob::ExecuteJobImpl() {
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     TurboJsonFile json_of(compilation_info(), std::ios_base::trunc);
     json_of << "{\"function\":\"" << compilation_info()->GetDebugName().get()
             << "\", \"source\":\"\",\n\"phases\":[";
   }
+#endif
 
   pipeline_.RunPrintAndVerify("Machine", true);
   if (FLAG_wasm_opt || wasm_origin_ == wasm::ModuleOrigin::kAsmJsOrigin) {
@@ -1566,12 +1574,14 @@
     CompilationInfo* info = data->info();
     Graph* graph = data->graph();
 
+#if !V8_OS_CLOUDABI
     if (FLAG_trace_turbo) {  // Print JSON.
       AllowHandleDereference allow_deref;
       TurboJsonFile json_of(info, std::ios_base::app);
       json_of << "{\"name\":\"" << phase << "\",\"type\":\"graph\",\"data\":"
               << AsJSON(*graph, data->source_positions()) << "},\n";
     }
+#endif
 
     if (FLAG_trace_turbo_graph) {  // Simple textual RPO.
       AllowHandleDereference allow_deref;
@@ -1615,10 +1625,12 @@
        << "Begin compiling method " << info()->GetDebugName().get()
        << " using Turbofan" << std::endl;
   }
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     TurboCfgFile tcf(isolate());
     tcf << AsC1VCompilation(info());
   }
+#endif
 
   data->source_positions()->AddDecorator();
 
@@ -1785,11 +1797,13 @@
     OFStream os(tracing_scope.file());
     os << "---------------------------------------------------\n"
        << "Begin compiling " << debug_name << " using Turbofan" << std::endl;
+#if !V8_OS_CLOUDABI
     if (FLAG_trace_turbo) {
       TurboJsonFile json_of(&info, std::ios_base::trunc);
       json_of << "{\"function\":\"" << info.GetDebugName().get()
               << "\", \"source\":\"\",\n\"phases\":[";
     }
+#endif
     pipeline.Run<PrintGraphPhase>("Machine");
   }
 
@@ -1842,11 +1856,13 @@
 
   PipelineImpl pipeline(&data);
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     TurboJsonFile json_of(info, std::ios_base::trunc);
     json_of << "{\"function\":\"" << info->GetDebugName().get()
             << "\", \"source\":\"\",\n\"phases\":[";
   }
+#endif
   // TODO(rossberg): Should this really be untyped?
   pipeline.RunPrintAndVerify("Machine", true);
 
@@ -1952,12 +1968,14 @@
     return false;
   }
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo && !data->MayHaveUnverifiableGraph()) {
     AllowHandleDereference allow_deref;
     TurboCfgFile tcf(isolate());
     tcf << AsC1V("CodeGen", data->schedule(), data->source_positions(),
                  data->sequence());
   }
+#endif
 
   if (FLAG_trace_turbo) {
     std::ostringstream source_position_output;
@@ -2028,6 +2046,7 @@
   info()->SetCode(code);
   v8::internal::CodeGenerator::PrintCode(code, info());
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     TurboJsonFile json_of(info(), std::ios_base::app);
     json_of << "{\"name\":\"disassembly\",\"type\":\"disassembly\",\"data\":\"";
@@ -2044,6 +2063,7 @@
     json_of << data->source_position_output();
     json_of << "}";
   }
+#endif
   if (FLAG_trace_turbo || FLAG_trace_turbo_graph) {
     CodeTracer::Scope tracing_scope(isolate()->GetCodeTracer());
     OFStream os(tracing_scope.file());
@@ -2148,11 +2168,13 @@
     verifier->VerifyGapMoves();
   }
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo && !data->MayHaveUnverifiableGraph()) {
     TurboCfgFile tcf(data->isolate());
     tcf << AsC1VRegisterAllocationData("CodeGen",
                                        data->register_allocation_data());
   }
+#endif
 
   data->DeleteRegisterAllocationZone();
 }
--- deps/v8/src/isolate.cc
+++ deps/v8/src/isolate.cc
@@ -2824,10 +2824,12 @@
   // Quiet the heap NaN if needed on target platform.
   if (!create_heap_objects) Assembler::QuietNaN(heap_.nan_value());
 
+#if !V8_OS_CLOUDABI
   if (FLAG_trace_turbo) {
     // Create an empty file.
     std::ofstream(GetTurboCfgFileName().c_str(), std::ios_base::trunc);
   }
+#endif
 
   CHECK_EQ(static_cast<int>(OFFSET_OF(Isolate, embedder_data_)),
            Internals::kIsolateEmbedderDataOffset);
--- deps/v8/src/runtime/runtime-internal.cc
+++ deps/v8/src/runtime/runtime-internal.cc
@@ -534,6 +534,9 @@
   } else {
     DCHECK_LE(args.length(), 2);
     std::FILE* f;
+#if V8_OS_CLOUDABI
+    f = stderr;
+#else
     if (args[0]->IsString()) {
       // With a string argument, the results are appended to that file.
       CONVERT_ARG_HANDLE_CHECKED(String, arg0, 0);
@@ -548,6 +551,7 @@
       DCHECK(fd == 1 || fd == 2);
       f = fd == 1 ? stdout : stderr;
     }
+#endif
     // The second argument (if any) is a message header to be printed.
     if (args.length() >= 2) {
       CONVERT_ARG_HANDLE_CHECKED(String, arg1, 1);
