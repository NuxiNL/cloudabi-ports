--- src/env.cc
+++ src/env.cc
@@ -5,8 +5,14 @@
 
 #if defined(_MSC_VER)
 #define getpid GetCurrentProcessId
+#define GETPID_FORMAT "%d"
+#elif defined(__CloudABI__)
+#include <program.h>
+#define getpid program_getpid
+#define GETPID_FORMAT "%s"
 #else
 #include <unistd.h>
+#define GETPID_FORMAT "%d"
 #endif
 
 #include <stdio.h>
@@ -131,7 +137,9 @@
   Local<v8::StackTrace> stack =
       StackTrace::CurrentStackTrace(isolate(), 10, StackTrace::kDetailed);
 
-  fprintf(stderr, "(node:%d) WARNING: Detected use of sync API\n", getpid());
+  fprintf(stderr,
+          "(node:" GETPID_FORMAT ") WARNING: Detected use of sync API\n",
+          getpid());
 
   for (int i = 0; i < stack->GetFrameCount() - 1; i++) {
     Local<StackFrame> stack_frame = stack->GetFrame(i);
--- src/node.cc
+++ src/node.cc
@@ -124,6 +124,10 @@
 extern char **environ;
 #endif
 
+#ifdef __CloudABI__
+#include <program.h>
+#endif
+
 namespace node {
 
 using v8::Array;
@@ -3235,7 +3239,12 @@
       process_env_template->NewInstance(env->context()).ToLocalChecked();
   process->Set(FIXED_ONE_BYTE_STRING(env->isolate(), "env"), process_env);
 
+#ifdef __CloudABI__
+  READONLY_PROPERTY(process, "pid",
+                    String::NewFromUtf8(env->isolate(), program_getpid()));
+#else
   READONLY_PROPERTY(process, "pid", Integer::New(env->isolate(), getpid()));
+#endif
   READONLY_PROPERTY(process, "features", GetFeatures(env));
 
   auto need_immediate_callback_string =
