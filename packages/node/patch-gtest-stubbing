--- deps/gtest/include/gtest/internal/gtest-port.h
+++ deps/gtest/include/gtest/internal/gtest-port.h
@@ -2280,13 +2280,13 @@
 typedef struct stat StatStruct;
 
 inline int FileNo(FILE* file) { return fileno(file); }
-inline int IsATTY(int fd) { return isatty(fd); }
-inline int Stat(const char* path, StatStruct* buf) { return stat(path, buf); }
+inline int IsATTY(int fd) { return 0; }
+inline int Stat(const char* path, StatStruct* buf) { return -1; }
 inline int StrCaseCmp(const char* s1, const char* s2) {
   return strcasecmp(s1, s2);
 }
 inline char* StrDup(const char* src) { return strdup(src); }
-inline int RmDir(const char* dir) { return rmdir(dir); }
+inline int RmDir(const char* dir) { return -1; }
 inline bool IsDir(const StatStruct& st) { return S_ISDIR(st.st_mode); }
 
 #endif  // GTEST_OS_WINDOWS
@@ -2304,14 +2304,14 @@
 // defined there.
 
 #if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
-inline int ChDir(const char* dir) { return chdir(dir); }
+inline int ChDir(const char* dir) { return -1; }
 #endif
 inline FILE* FOpen(const char* path, const char* mode) {
-  return fopen(path, mode);
+  return NULL;
 }
 #if !GTEST_OS_WINDOWS_MOBILE
 inline FILE *FReopen(const char* path, const char* mode, FILE* stream) {
-  return freopen(path, mode, stream);
+  return NULL;
 }
 inline FILE* FDOpen(int fd, const char* mode) { return fdopen(fd, mode); }
 #endif
--- deps/gtest/src/gtest-filepath.cc
+++ deps/gtest/src/gtest-filepath.cc
@@ -106,7 +106,7 @@
   return FilePath(_getcwd(cwd, sizeof(cwd)) == NULL ? "" : cwd);
 #else
   char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
-  char* result = getcwd(cwd, sizeof(cwd));
+  char* result = NULL;
 # if GTEST_OS_NACL
   // getcwd will likely fail in NaCl due to the sandbox, so return something
   // reasonable. The user may have provided a shim implementation for getcwd,
@@ -331,7 +331,7 @@
 #elif GTEST_OS_WINDOWS
   int result = _mkdir(pathname_.c_str());
 #else
-  int result = mkdir(pathname_.c_str(), 0777);
+  int result = -1;
 #endif  // GTEST_OS_WINDOWS_MOBILE
 
   if (result == -1) {
--- deps/gtest/src/gtest-port.cc
+++ deps/gtest/src/gtest-port.cc
@@ -71,10 +71,13 @@
 #include "src/gtest-internal-inl.h"
 #undef GTEST_IMPLEMENTATION_
 
+#define printf(...) fprintf(stderr, __VA_ARGS__)
+#define stdout stderr
+
 namespace testing {
 namespace internal {
 
-#if defined(_MSC_VER) || defined(__BORLANDC__)
+#if defined(_MSC_VER) || defined(__BORLANDC__) || defined(__CloudABI__)
 // MSVC and C++Builder do not provide a definition of STDERR_FILENO.
 const int kStdOutFileno = 1;
 const int kStdErrFileno = 2;
@@ -934,7 +937,7 @@
 #  else
     char name_template[] = "/tmp/captured_stream.XXXXXX";
 #  endif  // GTEST_OS_LINUX_ANDROID
-    const int captured_fd = mkstemp(name_template);
+    const int captured_fd = -1;
     filename_ = name_template;
 # endif  // GTEST_OS_WINDOWS
     fflush(NULL);
@@ -943,7 +946,6 @@
   }
 
   ~CapturedStream() {
-    remove(filename_.c_str());
   }
 
   std::string GetCapturedString() {
--- deps/gtest/src/gtest-test-part.cc
+++ deps/gtest/src/gtest-test-part.cc
@@ -72,7 +72,7 @@
 // Returns the TestPartResult at the given index (0-based).
 const TestPartResult& TestPartResultArray::GetTestPartResult(int index) const {
   if (index < 0 || index >= size()) {
-    printf("\nInvalid index (%d) into TestPartResultArray.\n", index);
+    fprintf(stderr, "\nInvalid index (%d) into TestPartResultArray.\n", index);
     internal::posix::Abort();
   }
 
--- deps/gtest/src/gtest.cc
+++ deps/gtest/src/gtest.cc
@@ -145,6 +145,10 @@
 # define vsnprintf _vsnprintf
 #endif  // GTEST_OS_WINDOWS
 
+#define printf(...) fprintf(stderr, __VA_ARGS__)
+#define vprintf(...) vfprintf(stderr, __VA_ARGS__)
+#define stdout stderr
+
 namespace testing {
 
 using internal::CountIf;
@@ -3957,7 +3961,6 @@
 
   ~ScopedPrematureExitFile() {
     if (premature_exit_filepath_ != NULL && *premature_exit_filepath_ != '\0') {
-      remove(premature_exit_filepath_);
     }
   }
 
