--- src/node_os.cc
+++ src/node_os.cc
@@ -29,6 +29,7 @@
 # include <io.h>
 #endif  // __MINGW32__
 
+#ifndef __CloudABI__
 #ifdef __POSIX__
 # include <limits.h>        // PATH_MAX on Solaris.
 # include <netdb.h>         // MAXHOSTNAMELEN on Solaris.
@@ -36,6 +37,7 @@
 # include <sys/param.h>     // MAXHOSTNAMELEN on Linux and the BSDs.
 # include <sys/utsname.h>
 #endif  // __POSIX__
+#endif
 
 // Add Windows fallback.
 #ifndef MAXHOSTNAMELEN
@@ -62,6 +64,7 @@
 using v8::Value;
 
 
+#ifndef __CloudABI__
 static void GetHostname(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
   char buf[MAXHOSTNAMELEN + 1];
@@ -78,13 +81,16 @@
 
   args.GetReturnValue().Set(OneByteString(env->isolate(), buf));
 }
+#endif
 
 
 static void GetOSType(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
   const char* rval;
 
-#ifdef __POSIX__
+#ifdef __CloudABI__
+  rval = "CloudABI";
+#elif defined(__POSIX__)
   struct utsname info;
   if (uname(&info) < 0) {
     return env->ThrowErrnoException(errno, "uname");
@@ -98,6 +104,7 @@
 }
 
 
+#ifndef __CloudABI__
 static void GetOSRelease(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
   const char* rval;
@@ -406,23 +413,28 @@
 
   args.GetReturnValue().Set(entry);
 }
+#endif
 
 
 void Initialize(Local<Object> target,
                 Local<Value> unused,
                 Local<Context> context) {
   Environment* env = Environment::GetCurrent(context);
+#ifndef __CloudABI__
   env->SetMethod(target, "getHostname", GetHostname);
   env->SetMethod(target, "getLoadAvg", GetLoadAvg);
   env->SetMethod(target, "getUptime", GetUptime);
   env->SetMethod(target, "getTotalMem", GetTotalMemory);
   env->SetMethod(target, "getFreeMem", GetFreeMemory);
   env->SetMethod(target, "getCPUs", GetCPUInfo);
+#endif
   env->SetMethod(target, "getOSType", GetOSType);
+#ifndef __CloudABI__
   env->SetMethod(target, "getOSRelease", GetOSRelease);
   env->SetMethod(target, "getInterfaceAddresses", GetInterfaceAddresses);
   env->SetMethod(target, "getHomeDirectory", GetHomeDirectory);
   env->SetMethod(target, "getUserInfo", GetUserInfo);
+#endif
   target->Set(FIXED_ONE_BYTE_STRING(env->isolate(), "isBigEndian"),
               Boolean::New(env->isolate(), IsBigEndian()));
 }
