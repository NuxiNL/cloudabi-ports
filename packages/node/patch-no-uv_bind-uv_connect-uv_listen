--- src/pipe_wrap.cc
+++ src/pipe_wrap.cc
@@ -29,7 +29,9 @@
 #include "node.h"
 #include "node_buffer.h"
 #include "node_wrap.h"
+#ifndef __CloudABI__
 #include "connect_wrap.h"
+#endif
 #include "stream_wrap.h"
 #include "util-inl.h"
 #include "util.h"
@@ -85,9 +87,11 @@
   LibuvStreamWrap::AddMethods(env, t, StreamBase::kFlagHasWritev);
 #endif
 
+#ifndef __CloudABI__
   env->SetProtoMethod(t, "bind", Bind);
   env->SetProtoMethod(t, "listen", Listen);
   env->SetProtoMethod(t, "connect", Connect);
+#endif
   env->SetProtoMethod(t, "open", Open);
 
 #ifdef _WIN32
@@ -135,6 +139,7 @@
 }
 
 
+#ifndef __CloudABI__
 void PipeWrap::Bind(const FunctionCallbackInfo<Value>& args) {
   PipeWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap, args.Holder());
@@ -142,6 +147,7 @@
   int err = uv_pipe_bind(&wrap->handle_, *name);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 #ifdef _WIN32
@@ -154,6 +160,7 @@
 #endif
 
 
+#ifndef __CloudABI__
 void PipeWrap::Listen(const FunctionCallbackInfo<Value>& args) {
   PipeWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap, args.Holder());
@@ -163,6 +170,7 @@
                       OnConnection);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 void PipeWrap::Open(const FunctionCallbackInfo<Value>& args) {
@@ -180,6 +188,7 @@
 }
 
 
+#ifndef __CloudABI__
 void PipeWrap::Connect(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -202,6 +211,7 @@
 
   args.GetReturnValue().Set(0);  // uv_pipe_connect() doesn't return errors.
 }
+#endif
 
 
 }  // namespace node
--- src/pipe_wrap.h
+++ src/pipe_wrap.h
@@ -45,9 +45,11 @@
            bool ipc);
 
   static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
+#ifndef __CloudABI__
   static void Bind(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Listen(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect(const v8::FunctionCallbackInfo<v8::Value>& args);
+#endif
   static void Open(const v8::FunctionCallbackInfo<v8::Value>& args);
 
 #ifdef _WIN32
--- src/stream_wrap.cc
+++ src/stream_wrap.cc
@@ -32,7 +32,9 @@
 #include "req-wrap.h"
 #include "req-wrap-inl.h"
 #include "tcp_wrap.h"
+#ifndef __CloudABI__
 #include "udp_wrap.h"
+#endif
 #include "util.h"
 #include "util-inl.h"
 
@@ -237,8 +239,10 @@
     pending_obj = AcceptHandle<TCPWrap, uv_tcp_t>(env, wrap);
   } else if (pending == UV_NAMED_PIPE) {
     pending_obj = AcceptHandle<PipeWrap, uv_pipe_t>(env, wrap);
+#ifndef __CloudABI__
   } else if (pending == UV_UDP) {
     pending_obj = AcceptHandle<UDPWrap, uv_udp_t>(env, wrap);
+#endif
   } else {
     CHECK_EQ(pending, UV_UNKNOWN_HANDLE);
   }
--- src/tcp_wrap.cc
+++ src/tcp_wrap.cc
@@ -27,7 +27,9 @@
 #include "handle_wrap.h"
 #include "node_buffer.h"
 #include "node_wrap.h"
+#ifndef __CloudABI__
 #include "connect_wrap.h"
+#endif
 #include "stream_wrap.h"
 #include "util.h"
 #include "util-inl.h"
@@ -93,6 +95,7 @@
   LibuvStreamWrap::AddMethods(env, t, StreamBase::kFlagHasWritev);
 
   env->SetProtoMethod(t, "open", Open);
+#ifndef __CloudABI__
   env->SetProtoMethod(t, "bind", Bind);
   env->SetProtoMethod(t, "listen", Listen);
   env->SetProtoMethod(t, "connect", Connect);
@@ -104,6 +107,7 @@
                       GetSockOrPeerName<TCPWrap, uv_tcp_getpeername>);
   env->SetProtoMethod(t, "setNoDelay", SetNoDelay);
   env->SetProtoMethod(t, "setKeepAlive", SetKeepAlive);
+#endif
 
 #ifdef _WIN32
   env->SetProtoMethod(t, "setSimultaneousAccepts", SetSimultaneousAccepts);
@@ -153,6 +157,7 @@
 }
 
 
+#ifndef __CloudABI__
 void TCPWrap::SetNoDelay(const FunctionCallbackInfo<Value>& args) {
   TCPWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap,
@@ -174,6 +179,7 @@
   int err = uv_tcp_keepalive(&wrap->handle_, enable, delay);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 #ifdef _WIN32
@@ -199,6 +205,7 @@
 }
 
 
+#ifndef __CloudABI__
 void TCPWrap::Bind(const FunctionCallbackInfo<Value>& args) {
   TCPWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap,
@@ -318,6 +325,7 @@
 
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 // also used by udp_wrap.cc
--- src/tcp_wrap.h
+++ src/tcp_wrap.h
@@ -50,6 +50,7 @@
   ~TCPWrap();
 
   static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
+#ifndef __CloudABI__
   static void SetNoDelay(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetKeepAlive(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Bind(const v8::FunctionCallbackInfo<v8::Value>& args);
@@ -57,6 +58,7 @@
   static void Listen(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect6(const v8::FunctionCallbackInfo<v8::Value>& args);
+#endif
   static void Open(const v8::FunctionCallbackInfo<v8::Value>& args);
 
 #ifdef _WIN32
