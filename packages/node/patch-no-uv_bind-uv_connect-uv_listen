--- src/connection_wrap.cc
+++ src/connection_wrap.cc
@@ -1,6 +1,8 @@
 #include "connection_wrap.h"
 
+#ifndef __CloudABI__
 #include "connect_wrap.h"
+#endif
 #include "env-inl.h"
 #include "pipe_wrap.h"
 #include "stream_wrap.h"
@@ -71,6 +73,7 @@
 }
 
 
+#ifndef __CloudABI__
 template <typename WrapType, typename UVType>
 void ConnectionWrap<WrapType, UVType>::AfterConnect(uv_connect_t* req,
                                                     int status) {
@@ -108,6 +111,7 @@
 
   delete req_wrap;
 }
+#endif
 
 template ConnectionWrap<PipeWrap, uv_pipe_t>::ConnectionWrap(
     Environment* env,
@@ -125,11 +129,13 @@
 template void ConnectionWrap<TCPWrap, uv_tcp_t>::OnConnection(
     uv_stream_t* handle, int status);
 
+#ifndef __CloudABI__
 template void ConnectionWrap<PipeWrap, uv_pipe_t>::AfterConnect(
     uv_connect_t* handle, int status);
 
 template void ConnectionWrap<TCPWrap, uv_tcp_t>::AfterConnect(
     uv_connect_t* handle, int status);
+#endif
 
 
 }  // namespace node
--- src/connection_wrap.h
+++ src/connection_wrap.h
@@ -17,7 +17,9 @@
   }
 
   static void OnConnection(uv_stream_t* handle, int status);
+#ifndef __CloudABI__
   static void AfterConnect(uv_connect_t* req, int status);
+#endif
 
  protected:
   ConnectionWrap(Environment* env,
--- src/pipe_wrap.cc
+++ src/pipe_wrap.cc
@@ -28,7 +28,9 @@
 #include "node.h"
 #include "node_buffer.h"
 #include "node_wrap.h"
+#ifndef __CloudABI__
 #include "connect_wrap.h"
+#endif
 #include "stream_wrap.h"
 #include "util-inl.h"
 
@@ -83,9 +85,11 @@
   LibuvStreamWrap::AddMethods(env, t, StreamBase::kFlagHasWritev);
 #endif
 
+#ifndef __CloudABI__
   env->SetProtoMethod(t, "bind", Bind);
   env->SetProtoMethod(t, "listen", Listen);
   env->SetProtoMethod(t, "connect", Connect);
+#endif
   env->SetProtoMethod(t, "open", Open);
 
 #ifdef _WIN32
@@ -133,6 +137,7 @@
 }
 
 
+#ifndef __CloudABI__
 void PipeWrap::Bind(const FunctionCallbackInfo<Value>& args) {
   PipeWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap, args.Holder());
@@ -140,6 +145,7 @@
   int err = uv_pipe_bind(&wrap->handle_, *name);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 #ifdef _WIN32
@@ -152,6 +158,7 @@
 #endif
 
 
+#ifndef __CloudABI__
 void PipeWrap::Listen(const FunctionCallbackInfo<Value>& args) {
   PipeWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap, args.Holder());
@@ -161,6 +168,7 @@
                       OnConnection);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 void PipeWrap::Open(const FunctionCallbackInfo<Value>& args) {
@@ -178,6 +186,7 @@
 }
 
 
+#ifndef __CloudABI__
 void PipeWrap::Connect(const FunctionCallbackInfo<Value>& args) {
   Environment* env = Environment::GetCurrent(args);
 
@@ -200,6 +209,7 @@
 
   args.GetReturnValue().Set(0);  // uv_pipe_connect() doesn't return errors.
 }
+#endif
 
 
 }  // namespace node
--- src/pipe_wrap.h
+++ src/pipe_wrap.h
@@ -45,9 +45,11 @@
            bool ipc);
 
   static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
+#ifndef __CloudABI__
   static void Bind(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Listen(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect(const v8::FunctionCallbackInfo<v8::Value>& args);
+#endif
   static void Open(const v8::FunctionCallbackInfo<v8::Value>& args);
 
 #ifdef _WIN32
--- src/tcp_wrap.cc
+++ src/tcp_wrap.cc
@@ -26,7 +26,9 @@
 #include "handle_wrap.h"
 #include "node_buffer.h"
 #include "node_wrap.h"
+#ifndef __CloudABI__
 #include "connect_wrap.h"
+#endif
 #include "stream_wrap.h"
 #include "util-inl.h"
 
@@ -91,6 +93,7 @@
   LibuvStreamWrap::AddMethods(env, t, StreamBase::kFlagHasWritev);
 
   env->SetProtoMethod(t, "open", Open);
+#ifndef __CloudABI__
   env->SetProtoMethod(t, "bind", Bind);
   env->SetProtoMethod(t, "listen", Listen);
   env->SetProtoMethod(t, "connect", Connect);
@@ -102,6 +105,7 @@
                       GetSockOrPeerName<TCPWrap, uv_tcp_getpeername>);
   env->SetProtoMethod(t, "setNoDelay", SetNoDelay);
   env->SetProtoMethod(t, "setKeepAlive", SetKeepAlive);
+#endif
 
 #ifdef _WIN32
   env->SetProtoMethod(t, "setSimultaneousAccepts", SetSimultaneousAccepts);
@@ -151,6 +155,7 @@
 }
 
 
+#ifndef __CloudABI__
 void TCPWrap::SetNoDelay(const FunctionCallbackInfo<Value>& args) {
   TCPWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap,
@@ -172,6 +177,7 @@
   int err = uv_tcp_keepalive(&wrap->handle_, enable, delay);
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 #ifdef _WIN32
@@ -197,6 +203,7 @@
 }
 
 
+#ifndef __CloudABI__
 void TCPWrap::Bind(const FunctionCallbackInfo<Value>& args) {
   TCPWrap* wrap;
   ASSIGN_OR_RETURN_UNWRAP(&wrap,
@@ -316,6 +323,7 @@
 
   args.GetReturnValue().Set(err);
 }
+#endif
 
 
 // also used by udp_wrap.cc
--- src/tcp_wrap.h
+++ src/tcp_wrap.h
@@ -50,6 +50,7 @@
   ~TCPWrap();
 
   static void New(const v8::FunctionCallbackInfo<v8::Value>& args);
+#ifndef __CloudABI__
   static void SetNoDelay(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void SetKeepAlive(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Bind(const v8::FunctionCallbackInfo<v8::Value>& args);
@@ -57,6 +58,7 @@
   static void Listen(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect(const v8::FunctionCallbackInfo<v8::Value>& args);
   static void Connect6(const v8::FunctionCallbackInfo<v8::Value>& args);
+#endif
   static void Open(const v8::FunctionCallbackInfo<v8::Value>& args);
 
 #ifdef _WIN32
