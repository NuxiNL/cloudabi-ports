--- HTMLparser.c
+++ HTMLparser.c
@@ -6291,10 +6291,11 @@
         size_t l = strlen(encoding);
 
 	if (l < 1000) {
-	    content = xmlMallocAtomic (xmlStrlen(content_line) + l + 1);
+	    size_t content_len = xmlStrlen(content_line);
+	    content = xmlMallocAtomic (content_len + l + 1);
 	    if (content) {
-		strcpy ((char *)content, (char *)content_line);
-		strcat ((char *)content, (char *)encoding);
+		memcpy ((char *)content, (char *)content_line, content_len);
+		memcpy ((char *)content + content_len, (char *)encoding, l + 1);
 		htmlCheckEncoding (ctxt, content);
 		xmlFree (content);
 	    }
--- valid.c
+++ valid.c
@@ -1254,29 +1254,29 @@
     len = strlen(buf);
     if (size - len < 50) {
 	if ((size - len > 4) && (buf[len - 1] != '.'))
-	    strcat(buf, " ...");
+	    strlcat(buf, " ...", size);
 	return;
     }
-    if (englob) strcat(buf, "(");
+    if (englob) strlcat(buf, "(", size);
     switch (content->type) {
         case XML_ELEMENT_CONTENT_PCDATA:
-            strcat(buf, "#PCDATA");
+            strlcat(buf, "#PCDATA", size);
 	    break;
 	case XML_ELEMENT_CONTENT_ELEMENT:
 	    if (content->prefix != NULL) {
 		if (size - len < xmlStrlen(content->prefix) + 10) {
-		    strcat(buf, " ...");
+		    strlcat(buf, " ...", size);
 		    return;
 		}
-		strcat(buf, (char *) content->prefix);
-		strcat(buf, ":");
+		strlcat(buf, (char *) content->prefix, size);
+		strlcat(buf, ":", size);
 	    }
 	    if (size - len < xmlStrlen(content->name) + 10) {
-		strcat(buf, " ...");
+		strlcat(buf, " ...", size);
 		return;
 	    }
 	    if (content->name != NULL)
-		strcat(buf, (char *) content->name);
+		strlcat(buf, (char *) content->name, size);
 	    break;
 	case XML_ELEMENT_CONTENT_SEQ:
 	    if ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
@@ -1287,10 +1287,10 @@
 	    len = strlen(buf);
 	    if (size - len < 50) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
-		    strcat(buf, " ...");
+		    strlcat(buf, " ...", size);
 		return;
 	    }
-            strcat(buf, " , ");
+            strlcat(buf, " , ", size);
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
 		(content->c2->type != XML_ELEMENT_CONTENT_ELEMENT))
@@ -1307,10 +1307,10 @@
 	    len = strlen(buf);
 	    if (size - len < 50) {
 		if ((size - len > 4) && (buf[len - 1] != '.'))
-		    strcat(buf, " ...");
+		    strlcat(buf, " ...", size);
 		return;
 	    }
-            strcat(buf, " | ");
+            strlcat(buf, " | ", size);
 	    if (((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&
 		(content->c2->type != XML_ELEMENT_CONTENT_ELEMENT))
@@ -1320,18 +1320,18 @@
 	    break;
     }
     if (englob)
-        strcat(buf, ")");
+        strlcat(buf, ")", size);
     switch (content->ocur) {
         case XML_ELEMENT_CONTENT_ONCE:
 	    break;
         case XML_ELEMENT_CONTENT_OPT:
-	    strcat(buf, "?");
+	    strlcat(buf, "?", size);
 	    break;
         case XML_ELEMENT_CONTENT_MULT:
-	    strcat(buf, "*");
+	    strlcat(buf, "*", size);
 	    break;
         case XML_ELEMENT_CONTENT_PLUS:
-	    strcat(buf, "+");
+	    strlcat(buf, "+", size);
 	    break;
     }
 }
@@ -5143,13 +5143,13 @@
     int len;
 
     if (node == NULL) return;
-    if (glob) strcat(buf, "(");
+    if (glob) strlcat(buf, "(", size);
     cur = node;
     while (cur != NULL) {
 	len = strlen(buf);
 	if (size - len < 50) {
 	    if ((size - len > 4) && (buf[len - 1] != '.'))
-		strcat(buf, " ...");
+		strlcat(buf, " ...", size);
 	    return;
 	}
         switch (cur->type) {
@@ -5157,29 +5157,29 @@
 		if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {
 		    if (size - len < xmlStrlen(cur->ns->prefix) + 10) {
 			if ((size - len > 4) && (buf[len - 1] != '.'))
-			    strcat(buf, " ...");
+			    strlcat(buf, " ...", size);
 			return;
 		    }
-		    strcat(buf, (char *) cur->ns->prefix);
-		    strcat(buf, ":");
+		    strlcat(buf, (char *) cur->ns->prefix, size);
+		    strlcat(buf, ":", size);
 		}
                 if (size - len < xmlStrlen(cur->name) + 10) {
 		    if ((size - len > 4) && (buf[len - 1] != '.'))
-			strcat(buf, " ...");
+			strlcat(buf, " ...", size);
 		    return;
 		}
-	        strcat(buf, (char *) cur->name);
+	        strlcat(buf, (char *) cur->name, size);
 		if (cur->next != NULL)
-		    strcat(buf, " ");
+		    strlcat(buf, " ", size);
 		break;
             case XML_TEXT_NODE:
 		if (xmlIsBlankNode(cur))
 		    break;
             case XML_CDATA_SECTION_NODE:
             case XML_ENTITY_REF_NODE:
-	        strcat(buf, "CDATA");
+	        strlcat(buf, "CDATA", size);
 		if (cur->next != NULL)
-		    strcat(buf, " ");
+		    strlcat(buf, " ", size);
 		break;
             case XML_ATTRIBUTE_NODE:
             case XML_DOCUMENT_NODE:
@@ -5191,9 +5191,9 @@
             case XML_DOCUMENT_FRAG_NODE:
             case XML_NOTATION_NODE:
 	    case XML_NAMESPACE_DECL:
-	        strcat(buf, "???");
+	        strlcat(buf, "???", size);
 		if (cur->next != NULL)
-		    strcat(buf, " ");
+		    strlcat(buf, " ", size);
 		break;
             case XML_ENTITY_NODE:
             case XML_PI_NODE:
@@ -5208,7 +5208,7 @@
 	}
 	cur = cur->next;
     }
-    if (glob) strcat(buf, ")");
+    if (glob) strlcat(buf, ")", size);
 }
 
 /**
--- xmlmemory.c
+++ xmlmemory.c
@@ -514,7 +514,7 @@
 
     if (xmlMemStopAtBlock == p->mh_number) xmlMallocBreakpoint();
 
-    strcpy(s,str);
+    memcpy(s, str, size);
 
     TEST_POINT
 
