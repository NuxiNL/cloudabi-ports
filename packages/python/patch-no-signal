--- Modules/clinic/signalmodule.c.h
+++ Modules/clinic/signalmodule.c.h
@@ -60,6 +60,7 @@
 
 #endif /* defined(HAVE_PAUSE) */
 
+#ifdef HAVE_SIGNAL
 PyDoc_STRVAR(signal_signal__doc__,
 "signal($module, signalnum, handler, /)\n"
 "--\n"
@@ -95,7 +96,9 @@
 exit:
     return return_value;
 }
+#endif /* HAVE_SIGNAL */
 
+#ifdef HAVE_SIGNAL
 PyDoc_STRVAR(signal_getsignal__doc__,
 "getsignal($module, signalnum, /)\n"
 "--\n"
@@ -128,6 +131,7 @@
 exit:
     return return_value;
 }
+#endif /* HAVE_SIGNAL */
 
 #if defined(HAVE_SIGINTERRUPT)
 
@@ -404,6 +408,14 @@
     #define SIGNAL_PAUSE_METHODDEF
 #endif /* !defined(SIGNAL_PAUSE_METHODDEF) */
 
+#ifndef SIGNAL_SIGNAL_METHODDEF
+    #define SIGNAL_SIGNAL_METHODDEF
+#endif /* !defined(SIGNAL_SIGNAL_METHODDEF) */
+
+#ifndef SIGNAL_GETSIGNAL_METHODDEF
+    #define SIGNAL_GETSIGNAL_METHODDEF
+#endif /* !defined(SIGNAL_GETSIGNAL_METHODDEF) */
+
 #ifndef SIGNAL_SIGINTERRUPT_METHODDEF
     #define SIGNAL_SIGINTERRUPT_METHODDEF
 #endif /* !defined(SIGNAL_SIGINTERRUPT_METHODDEF) */
--- Modules/faulthandler.c
+++ Modules/faulthandler.c
@@ -298,7 +298,7 @@
     handler->enabled = 0;
 #ifdef HAVE_SIGACTION
     (void)sigaction(handler->signum, &handler->previous, NULL);
-#else
+#elif defined(HAVE_SIGNAL)
     (void)signal(handler->signum, handler->previous);
 #endif
 }
@@ -447,7 +447,7 @@
         }
 #endif
         err = sigaction(handler->signum, &action, &handler->previous);
-#else
+#elif defined(HAVE_SIGNAL)
         handler->previous = signal(handler->signum,
                 faulthandler_fatal_error);
         err = (handler->previous == SIG_ERR);
@@ -726,7 +726,7 @@
     }
 #endif
     return sigaction(signum, &action, p_previous);
-#else
+#elif defined(HAVE_SIGNAL)
     _Py_sighandler_t previous;
     previous = signal(signum, faulthandler_user);
     if (p_previous != NULL)
@@ -766,7 +766,7 @@
         (void)faulthandler_register(signum, user->chain, NULL);
         errno = save_errno;
     }
-#else
+#elif defined(HAVE_SIGNAL)
     if (user->chain) {
         errno = save_errno;
         /* call the previous signal handler */
@@ -864,7 +864,7 @@
     user->enabled = 0;
 #ifdef HAVE_SIGACTION
     (void)sigaction(signum, &user->previous, NULL);
-#else
+#elif defined(HAVE_SIGNAL)
     (void)signal(signum, user->previous);
 #endif
     Py_CLEAR(user->file);
--- Modules/signalmodule.c
+++ Modules/signalmodule.c
@@ -92,10 +92,15 @@
 static pid_t main_pid;
 #endif
 
+#ifdef HAVE_SIGNAL
+#define HAVE_SIG_ATOMIC_T 1
+#endif
+#ifdef HAVE_SIG_ATOMIC_T
 static volatile struct {
     sig_atomic_t tripped;
     PyObject *func;
 } Handlers[NSIG];
+#endif
 
 #ifdef MS_WINDOWS
 #define INVALID_FD ((SOCKET_T)-1)
@@ -107,13 +112,15 @@
     int send_errno;
     int send_win_error;
 } wakeup = {INVALID_FD, 0, 0};
-#else
+#elif defined(HAVE_SIG_ATOMIC_T)
 #define INVALID_FD (-1)
 static volatile sig_atomic_t wakeup_fd = -1;
 #endif
 
+#ifdef HAVE_SIG_ATOMIC_T
 /* Speed up sigcheck() when none tripped */
 static volatile sig_atomic_t is_tripped = 0;
+#endif
 
 static PyObject *DefaultHandler;
 static PyObject *IgnoreHandler;
@@ -124,7 +131,9 @@
    SIG_DFL as (void (*)())0; the correct declaration would have been
    (void (*)(int))0. */
 
+#ifdef HAVE_SIGNAL
 static PyOS_sighandler_t old_siginthandler = SIG_DFL;
+#endif
 
 #ifdef MS_WINDOWS
 static HANDLE sigint_event = NULL;
@@ -235,6 +244,7 @@
 }
 #endif   /* MS_WINDOWS */
 
+#ifdef HAVE_SIG_ATOMIC_T
 static void
 trip_signal(int sig_num)
 {
@@ -289,7 +299,9 @@
         Py_AddPendingCall(checksignals_witharg, NULL);
     }
 }
+#endif /* HAVE_SIG_ATOMIC_T */
 
+#ifdef HAVE_SIGNAL
 static void
 signal_handler(int sig_num)
 {
@@ -326,6 +338,7 @@
         SetEvent(sigint_event);
 #endif
 }
+#endif /* HAVE_SIGNAL */
 
 
 #ifdef HAVE_ALARM
@@ -393,6 +406,7 @@
 the first is the signal number, the second is the interrupted stack frame.
 [clinic start generated code]*/
 
+#ifdef HAVE_SIGNAL
 static PyObject *
 signal_signal_impl(PyModuleDef *module, int signalnum, PyObject *handler)
 /*[clinic end generated code: output=622d7d0beebea546 input=deee84af5fa0432c]*/
@@ -454,6 +468,7 @@
     else
         Py_RETURN_NONE;
 }
+#endif /* HAVE_SIGNAL */
 
 
 /*[clinic input]
@@ -471,6 +486,7 @@
   anything else -- the callable Python object used as a handler
 [clinic start generated code]*/
 
+#ifdef HAVE_SIGNAL
 static PyObject *
 signal_getsignal_impl(PyModuleDef *module, int signalnum)
 /*[clinic end generated code: output=d50ec355757e360c input=ac23a00f19dfa509]*/
@@ -490,6 +506,7 @@
         Py_RETURN_NONE;
     }
 }
+#endif /* HAVE_SIGNAL */
 
 #ifdef HAVE_SIGINTERRUPT
 
@@ -525,6 +542,7 @@
 #endif
 
 
+#ifdef HAVE_SIGNAL
 static PyObject*
 signal_set_wakeup_fd(PyObject *self, PyObject *args)
 {
@@ -634,7 +652,9 @@
     return PyLong_FromLong(old_fd);
 #endif
 }
+#endif /* HAVE_SIGNAL */
 
+#ifdef HAVE_SIGNAL
 PyDoc_STRVAR(set_wakeup_fd_doc,
 "set_wakeup_fd(fd) -> fd\n\
 \n\
@@ -661,6 +681,7 @@
 #endif
     return old_fd;
 }
+#endif /* HAVE_SIGNAL */
 
 
 #ifdef HAVE_SETITIMER
@@ -1127,9 +1148,11 @@
     SIGNAL_ALARM_METHODDEF
     SIGNAL_SETITIMER_METHODDEF
     SIGNAL_GETITIMER_METHODDEF
+#ifdef HAVE_SIGNAL
     SIGNAL_SIGNAL_METHODDEF
     SIGNAL_GETSIGNAL_METHODDEF
     {"set_wakeup_fd",           signal_set_wakeup_fd, METH_VARARGS, set_wakeup_fd_doc},
+#endif
     SIGNAL_SIGINTERRUPT_METHODDEF
     SIGNAL_PAUSE_METHODDEF
     SIGNAL_PTHREAD_KILL_METHODDEF
@@ -1219,6 +1242,7 @@
     /* Add some symbolic constants to the module */
     d = PyModule_GetDict(m);
 
+#ifdef HAVE_SIGNAL
     x = DefaultHandler = PyLong_FromVoidPtr((void *)SIG_DFL);
     if (!x || PyDict_SetItemString(d, "SIG_DFL", x) < 0)
         goto finally;
@@ -1226,6 +1250,7 @@
     x = IgnoreHandler = PyLong_FromVoidPtr((void *)SIG_IGN);
     if (!x || PyDict_SetItemString(d, "SIG_IGN", x) < 0)
         goto finally;
+#endif
 
     x = PyLong_FromLong((long)NSIG);
     if (!x || PyDict_SetItemString(d, "NSIG", x) < 0)
@@ -1250,6 +1275,7 @@
         goto finally;
     Py_INCREF(IntHandler);
 
+#ifdef HAVE_SIGNAL
     Handlers[0].tripped = 0;
     for (i = 1; i < NSIG; i++) {
         void (*t)(int);
@@ -1269,6 +1295,7 @@
         Py_SETREF(Handlers[SIGINT].func, IntHandler);
         old_siginthandler = PyOS_setsig(SIGINT, signal_handler);
     }
+#endif
 
 #ifdef SIGHUP
     x = PyLong_FromLong(SIGHUP);
@@ -1510,6 +1537,7 @@
     return m;
 }
 
+#ifdef HAVE_SIGNAL
 static void
 finisignal(void)
 {
@@ -1533,12 +1561,14 @@
     Py_CLEAR(DefaultHandler);
     Py_CLEAR(IgnoreHandler);
 }
+#endif /* HAVE_SIGNAL */
 
 
 /* Declared in pyerrors.h */
 int
 PyErr_CheckSignals(void)
 {
+#ifdef HAVE_SIG_ATOMIC_T
     int i;
     PyObject *f;
 
@@ -1587,6 +1617,7 @@
         }
     }
 
+#endif /* HAVE_SIG_ATOMIC_T */
     return 0;
 }
 
@@ -1597,7 +1628,9 @@
 void
 PyErr_SetInterrupt(void)
 {
+#ifdef HAVE_SIGNAL
     trip_signal(SIGINT);
+#endif
 }
 
 void
@@ -1612,12 +1645,15 @@
 void
 PyOS_FiniInterrupts(void)
 {
+#ifdef HAVE_SIGNAL
     finisignal();
+#endif
 }
 
 int
 PyOS_InterruptOccurred(void)
 {
+#ifdef HAVE_SIGNAL
     if (Handlers[SIGINT].tripped) {
 #ifdef WITH_THREAD
         if (PyThread_get_thread_ident() != main_thread)
@@ -1626,12 +1662,14 @@
         Handlers[SIGINT].tripped = 0;
         return 1;
     }
+#endif
     return 0;
 }
 
 static void
 _clear_pending_signals(void)
 {
+#ifdef HAVE_SIG_ATOMIC_T
     int i;
     if (!is_tripped)
         return;
@@ -1639,6 +1677,7 @@
     for (i = 1; i < NSIG; ++i) {
         Handlers[i].tripped = 0;
     }
+#endif /* HAVE_SIG_ATOMIC_T */
 }
 
 void
--- Python/pylifecycle.c
+++ Python/pylifecycle.c
@@ -1491,6 +1491,7 @@
 static void
 initsigs(void)
 {
+#ifdef SIG_IGN
 #ifdef SIGPIPE
     PyOS_setsig(SIGPIPE, SIG_IGN);
 #endif
@@ -1500,6 +1501,7 @@
 #ifdef SIGXFSZ
     PyOS_setsig(SIGXFSZ, SIG_IGN);
 #endif
+#endif /* SIG_IGN */
     PyOS_InitInterrupts(); /* May imply initsignal() */
     if (PyErr_Occurred()) {
         Py_FatalError("Py_Initialize: can't import signal");
@@ -1516,6 +1518,7 @@
 void
 _Py_RestoreSignals(void)
 {
+#ifdef SIG_DFL
 #ifdef SIGPIPE
     PyOS_setsig(SIGPIPE, SIG_DFL);
 #endif
@@ -1525,6 +1528,7 @@
 #ifdef SIGXFSZ
     PyOS_setsig(SIGXFSZ, SIG_DFL);
 #endif
+#endif /* SIG_DFL */
 }
 
 
@@ -1557,7 +1561,7 @@
     if (sigaction(sig, NULL, &context) == -1)
         return SIG_ERR;
     return context.sa_handler;
-#else
+#elif defined(HAVE_SIGNAL)
     PyOS_sighandler_t handler;
 /* Special signal handling for the secure CRT in Visual Studio 2005 */
 #if defined(_MSC_VER) && _MSC_VER >= 1400
@@ -1603,7 +1607,7 @@
     if (sigaction(sig, &context, &ocontext) == -1)
         return SIG_ERR;
     return ocontext.sa_handler;
-#else
+#elif defined(HAVE_SIGNAL)
     PyOS_sighandler_t oldhandler;
     oldhandler = signal(sig, handler);
 #ifdef HAVE_SIGINTERRUPT
