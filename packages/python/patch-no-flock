--- Modules/clinic/fcntlmodule.c.h
+++ Modules/clinic/fcntlmodule.c.h
@@ -101,6 +101,9 @@
     return return_value;
 }
 
+#if defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                             defined(F_WRLCK) && defined(F_SETLK) && \
+                             defined(F_SETLKW) )
 PyDoc_STRVAR(fcntl_flock__doc__,
 "flock($module, fd, operation, /)\n"
 "--\n"
@@ -186,4 +189,7 @@
 exit:
     return return_value;
 }
+#endif /* defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                                   defined(F_WRLCK) && defined(F_SETLK) && \
+                                   defined(F_SETLKW) ) */
 /*[clinic end generated code: output=36cff76a8fb2c9a6 input=a9049054013a1b77]*/
--- Modules/fcntlmodule.c
+++ Modules/fcntlmodule.c
@@ -265,6 +265,9 @@
 #undef IOCTL_BUFSZ
 }
 
+#if defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                             defined(F_WRLCK) && defined(F_SETLK) && \
+                             defined(F_SETLKW) )
 /*[clinic input]
 fcntl.flock
 
@@ -417,14 +420,23 @@
     }
     Py_RETURN_NONE;
 }
+#endif /* defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                                   defined(F_WRLCK) && defined(F_SETLK) && \
+                                   defined(F_SETLKW) ) */
 
 /* List of functions */
 
 static PyMethodDef fcntl_methods[] = {
     FCNTL_FCNTL_METHODDEF
     FCNTL_IOCTL_METHODDEF
+#if defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                             defined(F_WRLCK) && defined(F_SETLK) && \
+                             defined(F_SETLKW) )
     FCNTL_FLOCK_METHODDEF
     FCNTL_LOCKF_METHODDEF
+#endif /* defined(HAVE_FLOCK) || ( defined(F_UNLCK) && defined(F_RDLCK) && \
+                                   defined(F_WRLCK) && defined(F_SETLK) && \
+                                   defined(F_SETLKW) ) */
     {NULL, NULL}  /* sentinel */
 };
 
@@ -441,10 +453,18 @@
 static int
 all_ins(PyObject* m)
 {
+#ifdef LOCK_SH
     if (PyModule_AddIntMacro(m, LOCK_SH)) return -1;
+#endif
+#ifdef LOCK_EX
     if (PyModule_AddIntMacro(m, LOCK_EX)) return -1;
+#endif
+#ifdef LOCK_NB
     if (PyModule_AddIntMacro(m, LOCK_NB)) return -1;
+#endif
+#ifdef LOCK_UN
     if (PyModule_AddIntMacro(m, LOCK_UN)) return -1;
+#endif
 /* GNU extensions, as of glibc 2.2.4 */
 #ifdef LOCK_MAND
     if (PyModule_AddIntMacro(m, LOCK_MAND)) return -1;
