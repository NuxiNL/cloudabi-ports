--- Include/Python.h
+++ Include/Python.h
@@ -41,6 +41,11 @@
 #include <stddef.h>
 #endif
 
+#ifdef __CloudABI__
+#include <program.h>
+#include <argdata.h>
+#endif
+
 /* CAUTION:  Build setups should ensure that NDEBUG is defined on the
  * compiler command line when building Python in release mode; else
  * assert() calls won't be removed.
--- Include/pylifecycle.h
+++ Include/pylifecycle.h
@@ -50,6 +50,10 @@
 PyAPI_FUNC(int) Py_FdIsInteractive(FILE *, const char *);
 #endif
 
+#ifdef __CloudABI__
+PyAPI_FUNC(void) Py_ProgramMain(const argdata_t *ad);
+#endif
+
 /* Bootstrap __main__ (defined in Modules/main.c) */
 PyAPI_FUNC(int) Py_Main(int argc, wchar_t **argv);
 
--- Include/sysmodule.h
+++ Include/sysmodule.h
@@ -16,7 +16,12 @@
 
 PyAPI_FUNC(void) PySys_SetArgv(int, wchar_t **);
 PyAPI_FUNC(void) PySys_SetArgvEx(int, wchar_t **, int);
+#ifndef __CloudABI__
 PyAPI_FUNC(void) PySys_SetPath(const wchar_t *);
+#else
+PyAPI_FUNC(void) PySys_SetArgdata(const argdata_t *);
+PyAPI_FUNC(void) PySys_SetPath(const int);
+#endif
 
 PyAPI_FUNC(void) PySys_WriteStdout(const char *format, ...)
                  Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
--- Lib/importlib/_bootstrap_external.py
+++ Lib/importlib/_bootstrap_external.py
@@ -72,54 +72,64 @@
     return '', path
 
 
-def _path_stat(path):
+def _path_stat(path, dir_fd=None):
     """Stat the path.
 
     Made a separate function to make it easier to override in experiments
     (e.g. cache stat results).
 
     """
-    return _os.stat(path)
+    return _os.stat(path, dir_fd=dir_fd)
 
 
-def _path_is_mode_type(path, mode):
+def _path_is_mode_type(path, mode, dir_fd=None):
     """Test whether the path is the specified mode type."""
     try:
-        stat_info = _path_stat(path)
+        stat_info = _path_stat(path, dir_fd=dir_fd)
     except OSError:
         return False
-    return (stat_info.st_mode & 0o170000) == mode
+    if not isinstance(sys.path[0], int):
+        return (stat_info.st_mode & 0o170000) == mode
+    else:
+        return (stat_info.st_mode & 0o37600000) == mode
 
 
-def _path_isfile(path):
+def _path_isfile(path, dir_fd=None):
     """Replacement for os.path.isfile."""
-    return _path_is_mode_type(path, 0o100000)
+    if not isinstance(sys.path[0], int):
+        return _path_is_mode_type(path, 0o100000, dir_fd=dir_fd)
+    else:
+        return _path_is_mode_type(path, 0o10000000, dir_fd=dir_fd)
 
 
-def _path_isdir(path):
+def _path_isdir(path, dir_fd=None):
     """Replacement for os.path.isdir."""
-    if not path:
+    if not path and path not in {0}:
         path = _os.getcwd()
-    return _path_is_mode_type(path, 0o040000)
+    if not isinstance(sys.path[0], int):
+        return _path_is_mode_type(path, 0o040000, dir_fd=dir_fd)
+    else:
+        return _path_is_mode_type(path, 0o1000000, dir_fd=dir_fd)
 
 
-def _write_atomic(path, data, mode=0o666):
+def _write_atomic(path, data, mode=0o666, dir_fd=None):
     """Best-effort function to write data to a path atomically.
     Be prepared to handle a FileExistsError if concurrent writing of the
     temporary file is attempted."""
     # id() is used to generate a pseudo-random filename.
     path_tmp = '{}.{}'.format(path, id(path))
     fd = _os.open(path_tmp,
-                  _os.O_EXCL | _os.O_CREAT | _os.O_WRONLY, mode & 0o666)
+                  _os.O_EXCL | _os.O_CREAT | _os.O_WRONLY,
+                  mode & 0o666, dir_fd=dir_fd)
     try:
         # We first write data to a temporary file, and then use os.replace() to
         # perform an atomic rename.
         with _io.FileIO(fd, 'wb') as file:
             file.write(data)
-        _os.replace(path_tmp, path)
+        _os.replace(path_tmp, path, src_dir_fd=dir_fd, dst_dir_fd=dir_fd)
     except OSError:
         try:
-            _os.unlink(path_tmp)
+            _os.unlink(path_tmp, dir_fd=dir_fd)
         except OSError:
             pass
         raise
@@ -278,7 +288,12 @@
             message = 'debug_override or optimization must be set to None'
             raise TypeError(message)
         optimization = '' if debug_override else 1
-    head, tail = _path_split(path)
+    if isinstance(path, (str, bytes)):
+        dir_fd = None
+        head, tail = _path_split(path)
+    else:
+        dir_fd = path[0]
+        head, tail = _path_split(path[1])
     base, sep, rest = tail.rpartition('.')
     tag = sys.implementation.cache_tag
     if tag is None:
@@ -294,7 +309,11 @@
         if not optimization.isalnum():
             raise ValueError('{!r} is not alphanumeric'.format(optimization))
         almost_filename = '{}.{}{}'.format(almost_filename, _OPT, optimization)
-    return _path_join(head, _PYCACHE, almost_filename + BYTECODE_SUFFIXES[0])
+    p = _path_join(head, _PYCACHE, almost_filename + BYTECODE_SUFFIXES[0])
+    if dir_fd is None:
+        return p
+    else:
+        return (dir_fd, p)
 
 
 def source_from_cache(path):
@@ -308,7 +327,12 @@
     """
     if sys.implementation.cache_tag is None:
         raise NotImplementedError('sys.implementation.cache_tag is None')
-    head, pycache_filename = _path_split(path)
+    if isinstance(path, (str, bytes)):
+        dir_fd = None
+        head, pycache_filename = _path_split(path)
+    else:
+        dir_fd = path[0]
+        head, pycache_filename = _path_split(path[1])
     head, pycache = _path_split(head)
     if pycache != _PYCACHE:
         raise ValueError('{} not bottom-level directory in '
@@ -327,7 +351,11 @@
             raise ValueError("optimization level {!r} is not an alphanumeric "
                              "value".format(optimization))
     base_filename = pycache_filename.partition('.')[0]
-    return _path_join(head, base_filename + SOURCE_SUFFIXES[0])
+    p = _path_join(head, base_filename + SOURCE_SUFFIXES[0])
+    if dir_fd is None:
+        return p
+    else:
+        return (dir_fd, p)
 
 
 def _get_sourcefile(bytecode_path):
@@ -350,12 +378,13 @@
 
 
 def _get_cached(filename):
-    if filename.endswith(tuple(SOURCE_SUFFIXES)):
+    filename_ = filename if isinstance(filename, str) else filename[1]
+    if filename_.endswith(tuple(SOURCE_SUFFIXES)):
         try:
             return cache_from_source(filename)
         except NotImplementedError:
             pass
-    elif filename.endswith(tuple(BYTECODE_SUFFIXES)):
+    elif filename_.endswith(tuple(BYTECODE_SUFFIXES)):
         return filename
     else:
         return None
@@ -363,8 +392,12 @@
 
 def _calc_mode(path):
     """Calculate the mode permissions for a bytecode file."""
+    if isinstance(path, (str, bytes)):
+        dir_fd = None
+    else:
+        dir_fd, path = path
     try:
-        mode = _path_stat(path).st_mode
+        mode = _path_stat(path, dir_fd=dir_fd).st_mode
     except OSError:
         mode = 0o666
     # We always ensure write access so we can update cached files
@@ -478,8 +511,10 @@
     code = marshal.loads(data)
     if isinstance(code, _code_type):
         _bootstrap._verbose_message('code object from {!r}', bytecode_path)
-        if source_path is not None:
+        if isinstance(source_path, (str, bytes)):
             _imp._fix_co_filename(code, source_path)
+        elif isinstance(source_path, tuple):
+            _imp._fix_co_filename(code, source_path[1])
         return code
     else:
         raise ImportError('Non-code object in {!r}'.format(bytecode_path),
@@ -650,7 +685,12 @@
     def is_package(self, fullname):
         """Concrete implementation of InspectLoader.is_package by checking if
         the path returned by get_filename has a filename of '__init__.py'."""
-        filename = _path_split(self.get_filename(fullname))[1]
+        filename = self.get_filename(fullname)
+        if isinstance(filename, (str, bytes)):
+            filename = _path_split(filename)[1]
+        else:
+            dir_fd = filename[0]
+            filename = _path_split(filename[1])[1]
         filename_base = filename.rsplit('.', 1)[0]
         tail_name = fullname.rpartition('.')[2]
         return filename_base == '__init__' and tail_name != '__init__'
@@ -726,6 +766,8 @@
 
         The 'data' argument can be any object type that compile() supports.
         """
+        if not isinstance(path, (bytes, str)):
+            dir_fd, path = path
         return _bootstrap._call_with_frames_removed(compile, data, path, 'exec',
                                         dont_inherit=True, optimize=_optimize)
 
@@ -818,8 +860,19 @@
 
     def get_data(self, path):
         """Return the data from path as raw bytes."""
-        with _io.FileIO(path, 'r') as file:
-            return file.read()
+        if isinstance(path, (str, bytes)):
+            dir_fd = None
+        else:
+            #sys.stderr.write('get_data path: {!r}\n'.format(path))
+            dir_fd, path = path
+        fd = _os.open(path, _os.O_RDONLY, dir_fd=dir_fd)
+        with _io.FileIO(fd, 'r') as file:
+            #if dir_fd:
+            #    sys.stderr.write('get_data Reading {!r}\n'.format(path))
+            data = file.read()
+            #if dir_fd:
+            #    sys.stderr.write('get_data Read {!r}\n'.format(path))
+            return data
 
 
 class SourceFileLoader(FileLoader, SourceLoader):
@@ -828,7 +881,11 @@
 
     def path_stats(self, path):
         """Return the metadata for the path."""
-        st = _path_stat(path)
+        if isinstance(path, (str, bytes, int)):
+            st = _path_stat(path)
+        else:
+            dir_fd, path = path
+            st = _path_stat(path, dir_fd=dir_fd)
         return {'mtime': st.st_mtime, 'size': st.st_size}
 
     def _cache_bytecode(self, source_path, bytecode_path, data):
@@ -838,7 +895,12 @@
 
     def set_data(self, path, data, *, _mode=0o666):
         """Write bytes data to a file."""
-        parent, filename = _path_split(path)
+        if isinstance(path, (str, bytes)):
+            dir_fd=None
+            parent, filename = _path_split(path)
+        else:
+            dir_fd = path[0]
+            parent, filename = _path_split(path[1])
         path_parts = []
         # Figure out what directories are missing.
         while parent and not _path_isdir(parent):
@@ -848,7 +910,7 @@
         for part in reversed(path_parts):
             parent = _path_join(parent, part)
             try:
-                _os.mkdir(parent)
+                _os.mkdir(parent, dir_fd=dir_fd)
             except FileExistsError:
                 # Probably another Python process already created the dir.
                 continue
@@ -859,7 +921,7 @@
                                             parent, exc)
                 return
         try:
-            _write_atomic(path, data, _mode)
+            _write_atomic(path, data, _mode, dir_fd=dir_fd)
             _bootstrap._verbose_message('created {!r}', path)
         except OSError as exc:
             # Same as above: just don't write the bytecode.
@@ -1061,8 +1123,17 @@
         for hook in sys.path_hooks:
             try:
                 return hook(path)
-            except ImportError:
+            except ImportError as e:
+                #if isinstance(sys.path[0], int):
+                    #sys.stderr.write('{}._path_hooks ImportError={!r} hook={!r} path={!r}\n'.format(cls, e, hook, path))
                 continue
+            except TypeError as e:
+                # Raised by zipimporter when path is a file descriptor
+                if hasattr(hook, 'archive'):
+                    continue
+                else:
+                    #sys.stderr.write('{}._path_hooks TypeError={!r} hook={!r}\n'.format(cls, e, hook))
+                    raise
         else:
             return None
 
@@ -1086,6 +1157,9 @@
         except KeyError:
             finder = cls._path_hooks(path)
             sys.path_importer_cache[path] = finder
+            #if isinstance(sys.path[0], int):
+                #sys.stderr.write('PathFinder: finder={!r} cls._path_hooks={!r} path={!r}\n'.format(finder, cls._path_hooks, path))
+                #sys.stderr.write('PathFinder: sys.path_importer_cache: {!r}\n'.format(sys.path_importer_cache))
         return finder
 
     @classmethod
@@ -1110,7 +1184,9 @@
         #  the list of paths that will become its __path__
         namespace_path = []
         for entry in path:
-            if not isinstance(entry, (str, bytes)):
+            if not isinstance(entry, (str, bytes, int, tuple)):
+                #sys.stderr.write('PathFinder._get_spec() fullname={!r} path={!r} target={!r} entry={!r}'
+                #                 .format(fullname, path, target, entry))
                 continue
             finder = cls._path_importer_cache(entry)
             if finder is not None:
@@ -1191,7 +1267,7 @@
             loaders.extend((suffix, loader) for suffix in suffixes)
         self._loaders = loaders
         # Base (directory) path
-        self.path = path or '.'
+        self.path = path if path or path in {0} else '.'
         self._path_mtime = -1
         self._path_cache = set()
         self._relaxed_path_cache = set()
@@ -1226,8 +1302,18 @@
         """
         is_namespace = False
         tail_module = fullname.rpartition('.')[2]
+        if isinstance(self.path, tuple):
+            dir_fd = self.path[0]
+            path = self.path[1]
+        elif isinstance(self.path, int):
+            dir_fd = None
+            path = self.path
+        else:
+            dir_fd = None
+            path = self.path or _os.getcwd()
+
         try:
-            mtime = _path_stat(self.path or _os.getcwd()).st_mtime
+            mtime = _path_stat(path, dir_fd=dir_fd).st_mtime
         except OSError:
             mtime = -1
         if mtime != self._path_mtime:
@@ -1242,24 +1328,67 @@
             cache_module = tail_module
         # Check if the module is the name of a directory (and thus a package).
         if cache_module in cache:
-            base_path = _path_join(self.path, tail_module)
-            for suffix, loader_class in self._loaders:
-                init_filename = '__init__' + suffix
-                full_path = _path_join(base_path, init_filename)
-                if _path_isfile(full_path):
-                    return self._get_spec(loader_class, fullname, full_path, [base_path], target)
+            if isinstance(self.path, (bytes, str)):
+                base_path = _path_join(self.path, tail_module)
+                for suffix, loader_class in self._loaders:
+                    init_filename = '__init__' + suffix
+                    full_path = _path_join(base_path, init_filename)
+                    if _path_isfile(full_path):
+                        return self._get_spec(loader_class, fullname, full_path, [base_path], target)
+                else:
+                    # If a namespace package, return the path if we don't
+                    #  find a module in the next section.
+                    is_namespace = _path_isdir(base_path)
+
+            elif isinstance(self.path, int):
+                base_path = (self.path, tail_module)
+                for suffix, loader_class in self._loaders:
+                    init_filename = '__init__' + suffix
+                    full_path = (self.path, _path_join(tail_module, init_filename))
+                    if _path_isfile(_path_join(tail_module, init_filename), dir_fd=self.path):
+                        return self._get_spec(loader_class, fullname, full_path, [base_path], target)
+                else:
+                    is_namespace = _path_isdir(tail_module, dir_fd=self.path)
+
+            elif isinstance(self.path, tuple):
+                base_path = (self.path[0], _path_join(self.path[1], tail_module))
+                for suffix, loader_class in self._loaders:
+                    init_filename = '__init__' + suffix
+                    full_path = (self.path[0], _path_join(self.path[1], tail_module, init_filename))
+                    if _path_isfile(full_path[1], dir_fd=full_path[0]):
+                        return self._get_spec(loader_class, fullname, full_path, [base_path], target)
+                else:
+                    is_namespace = _path_isdir(base_path[1], dir_fd=base_path[0])
+
             else:
-                # If a namespace package, return the path if we don't
-                #  find a module in the next section.
-                is_namespace = _path_isdir(base_path)
+                raise RuntimeError(self.path)
+
         # Check for a file w/ a proper suffix exists.
         for suffix, loader_class in self._loaders:
-            full_path = _path_join(self.path, tail_module + suffix)
-            _bootstrap._verbose_message('trying {}', full_path, verbosity=2)
-            if cache_module + suffix in cache:
-                if _path_isfile(full_path):
-                    return self._get_spec(loader_class, fullname, full_path,
-                                          None, target)
+            if isinstance(self.path, (bytes, str)):
+                full_path = _path_join(self.path, tail_module + suffix)
+                _bootstrap._verbose_message('trying {}', full_path, verbosity=2)
+                if cache_module + suffix in cache:
+                    if _path_isfile(full_path):
+                        return self._get_spec(loader_class, fullname, full_path,
+                                              None, target)
+            elif isinstance(self.path, int):
+                full_path = (self.path, tail_module + suffix)
+                _bootstrap._verbose_message('trying {}', full_path, verbosity=2)
+                if cache_module + suffix in cache:
+                    if _path_isfile(tail_module + suffix, dir_fd=self.path):
+                        return self._get_spec(loader_class, fullname, full_path,
+                                              None, target)
+            elif isinstance(self.path, tuple):
+                full_path = (self.path[0], _path_join(self.path[1], tail_module + suffix))
+                _bootstrap._verbose_message('trying {}', full_path, verbosity=2)
+                if cache_module + suffix in cache:
+                    if _path_isfile(full_path[1], dir_fd=full_path[0]):
+                        return self._get_spec(loader_class, fullname, full_path,
+                                              None, target)
+            else:
+                raise RuntimeError(self.path)
+
         if is_namespace:
             _bootstrap._verbose_message('possible namespace for {}', base_path)
             spec = _bootstrap.ModuleSpec(fullname, None)
@@ -1269,13 +1398,33 @@
 
     def _fill_cache(self):
         """Fill the cache of potential modules and packages for this directory."""
-        path = self.path
+        if isinstance(self.path, tuple):
+            dir_fd = self.path[0]
+            path = self.path[1]
+        elif isinstance(self.path, int):
+            dir_fd = None
+            path = self.path
+        else:
+            dir_fd = None
+            path = self.path or _os.getcwd()
+
+        #if isinstance(sys.path[0], int):
+        #    sys.stderr.write('Filefinder._fill_cache path={!r} dir_fd={!r}\n'
+        #                     .format(path, dir_fd))
         try:
-            contents = _os.listdir(path or _os.getcwd())
+            fd = None
+            if dir_fd is not None:
+                fd = _os.open(path, _os.O_RDONLY, dir_fd=dir_fd)
+                contents = _os.listdir(fd)
+            else:
+                contents = _os.listdir(path)
         except (FileNotFoundError, PermissionError, NotADirectoryError):
             # Directory has either been removed, turned into a file, or made
             # unreadable.
             contents = []
+        finally:
+            if fd is not None:
+                _os.close(fd)
         # We store two cached versions, to handle runtime changes of the
         # PYTHONCASEOK environment variable.
         if not sys.platform.startswith('win'):
@@ -1310,7 +1459,14 @@
         """
         def path_hook_for_FileFinder(path):
             """Path hook for importlib.machinery.FileFinder."""
-            if not _path_isdir(path):
+            if isinstance(path, tuple):
+                dir_fd, path_ = path
+            else:
+                dir_fd = None
+                path_ = path
+            if not _path_isdir(path_, dir_fd=dir_fd):
+                #if isinstance(sys.path[0], int):
+                #    sys.stderr.write('path_hook_for_FileFinder path: {!r} {!r}\n'.format(path, _path_stat(path_, dir_fd=dir_fd)))
                 raise ImportError('only directories are supported', path=path)
             return cls(path, *loader_details)
 
--- Modules/main.c
+++ Modules/main.c
@@ -24,6 +24,12 @@
 
 #include "pygetopt.h"
 
+#ifdef __CloudABI__
+#include <argdata.h>
+#include <dirent.h>
+#include <program.h>
+#endif
+
 #define COPYRIGHT \
     "Type \"help\", \"copyright\", \"credits\" or \"license\" " \
     "for more information."
@@ -32,6 +38,168 @@
 extern "C" {
 #endif
 
+#ifdef __CloudABI__
+
+int stdlibfd = -1;
+
+static int run_command(wchar_t *, PyCompilerFlags *);
+
+void
+Py_ProgramMain(const argdata_t *ad)
+{
+    int c;
+    int sts;
+    wchar_t *command = NULL;
+    wchar_t *filename = NULL;
+    wchar_t *module = NULL;
+    char *p;
+    int stdin_is_interactive = 0;
+    int help = 0;
+    int version = 0;
+    int saw_unbuffered_flag = 0;
+
+    argdata_map_iterator_t it;
+    const argdata_t *key, *val;
+
+    PyCompilerFlags cf;
+    PyObject *warning_option = NULL;
+    PyObject *warning_options = NULL;
+
+    /* Force malloc() allocator to bootstrap Python */
+    (void)_PyMem_SetupAllocators("malloc");
+
+    cf.cf_flags = 0;
+
+    if (_PyMem_SetupAllocators(NULL) < 0) {
+        exit(1);
+    }
+
+    Py_HashRandomizationFlag = 1;
+    _PyRandom_Init();
+
+    PySys_ResetWarnOptions();
+
+    argdata_map_iterate(ad, &it);
+    while (argdata_map_next(&it, &key, &val)) {
+        const char *keystr;
+        argdata_get_str_c(key, &keystr);
+
+        if (strcmp(keystr, "stderr") == 0) {
+            int fd;
+            if (argdata_get_fd(val, &fd) == 0) {
+                FILE *fp = fdopen(fd, "w");
+                if (fp != NULL)
+                    fswap(stderr, fp);
+            }
+        }
+        else if (strcmp(keystr, "path") == 0) {
+            if (argdata_get_fd(val, &stdlibfd) == 0) {
+                //fprintf(stderr, "pathfd: %d\n", stdlibfd);
+            }
+        }
+        else if (strcmp(keystr, "c") == 0 || strcmp(keystr, "command") == 0) {
+            size_t len;
+            const char *valstr;
+            wchar_t *valwstr;
+            argdata_get_str_c(val, &valstr);
+            valwstr = Py_DecodeLocale(valstr, NULL);
+            if (!valwstr) {
+                fprintf(stderr, "Fatal Python error: "
+                                "unable to decode the 'command' argument\n");
+            }
+            len = wcslen(valwstr) + 1 + 1;
+            command = (wchar_t *)PyMem_RawMalloc(sizeof(wchar_t) * len);
+            if (command == NULL)
+                Py_FatalError(
+                   "not enough memory to copy  argument");
+            wcscpy(command, valwstr);
+            command[len - 2] = '\n';
+            command[len - 1] = 0;
+        }
+        else if (strcmp(keystr, "module") == 0) {
+            const char *valstr;
+            argdata_get_str_c(val, &valstr);
+            module = Py_DecodeLocale(valstr, NULL);
+            if (!module) {
+                fprintf(stderr, "Fatal Python error: "
+                                "unable to decode the 'module' argument\n");
+            }
+        }
+        else if (strcmp(keystr, "bytescompare") == 0) {
+            Py_BytesWarningFlag++;
+        }
+        else if (strcmp(keystr, "debug") == 0) {
+            Py_DebugFlag++;
+        }
+        else if (strcmp(keystr, "inspect") == 0) {
+            Py_InspectFlag++;
+            Py_InteractiveFlag++;
+        }
+        else if (strcmp(keystr, "isolate") == 0) {
+            Py_IsolatedFlag++;
+            Py_NoUserSiteDirectory++;
+            Py_IgnoreEnvironmentFlag++;
+        }
+        else if (strcmp(keystr, "optimize") == 0) {
+            Py_OptimizeFlag++;
+        }
+        else if (strcmp(keystr, "dontwritebytecode") == 0) {
+            Py_DontWriteBytecodeFlag++;
+        }
+        else if (strcmp(keystr, "unbufferedstdio") == 0) {
+            Py_UnbufferedStdioFlag = 1;
+            saw_unbuffered_flag = 1;
+        }
+        else if (strcmp(keystr, "verbose") == 0) {
+            Py_VerboseFlag++;
+        }
+        else if (strcmp(keystr, "quiet") == 0) {
+            Py_QuietFlag++;
+        }
+    }
+
+    Py_NoUserSiteDirectory = 1;
+    Py_NoSiteFlag = 1;
+    Py_Initialize();
+    Py_XDECREF(warning_options);
+
+    /* Extract the "args" key and expose it as sys.argdata. */
+    argdata_map_iterate(ad, &it);
+    while (argdata_map_next(&it, &key, &val)) {
+        const char *keystr;
+        argdata_get_str_c(key, &keystr);
+        if (strcmp(keystr, "args") == 0) {
+            PySys_SetArgdata(val);
+        }
+    }
+
+    if (!Py_QuietFlag && (Py_VerboseFlag ||
+                        (command == NULL && filename == NULL &&
+                         module == NULL && stdin_is_interactive))) {
+        fprintf(stderr, "Python %s on %s\n",
+            Py_GetVersion(), Py_GetPlatform());
+        if (!Py_NoSiteFlag)
+            fprintf(stderr, "%s\n", COPYRIGHT);
+    }
+
+    if (command) {
+        sts = run_command(command, &cf);
+    }
+
+    if (Py_FinalizeEx() < 0) {
+        /* Value unlikely to be confused with a non-error exit status or
+        other special meaning */
+        sts = 120;
+    }
+
+    /* Force again malloc() allocator to release memory blocks allocated
+       before Py_Main() */
+    (void)_PyMem_SetupAllocators("malloc");
+
+    exit(sts);
+}
+#endif /* __CloudABI__ */
+
 /* For Py_GetArgcArgv(); set by main() */
 static wchar_t **orig_argv;
 static int  orig_argc;
@@ -546,6 +714,7 @@
 #else
     if ((p = Py_GETENV("PYTHONWARNINGS")) && *p != '\0') {
         char *buf, *oldloc;
+        char *saveptr;
         PyObject *unicode;
 
         /* settle for strtok here as there's no one standard
@@ -555,9 +724,13 @@
             Py_FatalError(
                "not enough memory to copy PYTHONWARNINGS");
         strcpy(buf, p);
+#if defined(HAVE_SETLOCALE) && defined(LC_ALL)
         oldloc = _PyMem_RawStrdup(setlocale(LC_ALL, NULL));
         setlocale(LC_ALL, "");
-        for (p = strtok(buf, ","); p != NULL; p = strtok(NULL, ",")) {
+#endif
+        for (p = strtok_r(buf, ",", &saveptr);
+             p != NULL;
+             p = strtok_r(NULL, ",", &saveptr)) {
 #ifdef __APPLE__
             /* Use utf-8 on Mac OS X */
             unicode = PyUnicode_FromString(p);
@@ -572,8 +745,10 @@
             PySys_AddWarnOptionUnicode(unicode);
             Py_DECREF(unicode);
         }
+#if defined(HAVE_SETLOCALE) && defined(LC_ALL)
         setlocale(LC_ALL, oldloc);
         PyMem_RawFree(oldloc);
+#endif
         PyMem_RawFree(buf);
     }
 #endif
--- Programs/python.c
+++ Programs/python.c
@@ -7,6 +7,13 @@
 #include <fenv.h>
 #endif
 
+#ifdef __CloudABI__
+void
+program_main(const argdata_t *ad) {
+    Py_ProgramMain(ad);
+}
+#endif /* __CloudABI__ */
+
 #ifdef MS_WINDOWS
 int
 wmain(int argc, wchar_t **argv)
--- Python/pylifecycle.c
+++ Python/pylifecycle.c
@@ -45,6 +45,11 @@
 
 extern wchar_t *Py_GetPath(void);
 
+#if defined(__CloudABI__)
+#include <dirent.h>
+extern int stdlibfd;
+#endif
+
 extern grammar _PyParser_Grammar; /* From graminit.c */
 
 /* Forward */
@@ -389,7 +394,11 @@
         Py_FatalError("Py_Initialize: can't initialize sys dict");
     Py_INCREF(interp->sysdict);
     _PyImport_FixupBuiltin(sysmod, "sys");
+#ifndef __CloudABI__
     PySys_SetPath(Py_GetPath());
+#else
+    PySys_SetPath(stdlibfd);
+#endif
     PyDict_SetItemString(interp->sysdict, "modules",
                          interp->modules);
 
--- Python/sysmodule.c
+++ Python/sysmodule.c
@@ -20,6 +20,7 @@
 #include "pythread.h"
 
 #include "osdefs.h"
+#include <fcntl.h>
 #include <locale.h>
 
 #ifdef MS_WINDOWS
@@ -1920,6 +1921,8 @@
     return m;
 }
 
+#if !defined(__CloudABI__)
+
 static PyObject *
 makepathobject(const wchar_t *path, wchar_t delim)
 {
@@ -1964,6 +1967,240 @@
     Py_DECREF(v);
 }
 
+#else /* defined(__CloudABI__) */
+
+static PyObject *
+convertargdata(const argdata_t *ad)
+{
+    /* Byte strings. */
+    {
+        const void *buf;
+        size_t buflen;
+        if (argdata_get_binary(ad, &buf, &buflen) == 0)
+            return PyBytes_FromStringAndSize(buf, buflen);
+    }
+
+    /* Booleans. */
+    {
+        _Bool value;
+        if (argdata_get_bool(ad, &value) == 0) {
+            PyObject *o = value ? Py_True : Py_False;
+            Py_INCREF(o);
+            return o;
+        }
+    }
+
+    /* File descriptors. */
+    {
+        int value;
+        if (argdata_get_fd(ad, &value) == 0) {
+            struct stat sb;
+            if (fstat(value, &sb) == 0 && S_ISSOCK(sb.st_mode)) {
+                /*
+                 * File descriptor corresponds to a socket. Create a
+                 * socket.socket object.
+                 */
+                PyObject *module = PyImport_ImportModule("socket");
+                if (module == NULL)
+                    return NULL;
+                PyObject *function = PyObject_GetAttrString(module, "socket");
+                Py_DECREF(module);
+                if (function == NULL)
+                    return NULL;
+                PyObject *args = PyTuple_New(0);
+                if (args == NULL) {
+                    Py_DECREF(function);
+                    return NULL;
+                }
+                PyObject *kwargs = Py_BuildValue("{s:i}", "fileno", value);
+                if (args == NULL) {
+                    Py_DECREF(args);
+                    Py_DECREF(function);
+                    return NULL;
+                }
+                PyObject *o = PyObject_Call(function, args, kwargs);
+                Py_DECREF(kwargs);
+                Py_DECREF(args);
+                Py_DECREF(function);
+                return o;
+            } else {
+                /* Create an object using io.open(). */
+                int mode = fcntl(value, F_GETFL);
+                const char *modestr;
+                switch (mode & O_ACCMODE) {
+                case O_RDWR:
+                    modestr = (mode & O_APPEND) != 0 ? "a+b" : "w+b";
+                    break;
+                case O_WRONLY:
+                    modestr = (mode & O_APPEND) != 0 ? "ab" : "wb";
+                    break;
+                default:
+                    modestr = "r";
+                    break;
+                }
+                return PyFile_FromFd(value, NULL, modestr, 0,
+                                     NULL, NULL, NULL, 0);
+            }
+        }
+    }
+
+    /* Floating-point values. */
+    {
+        double value;
+        if (argdata_get_float(ad, &value) == 0)
+            return PyFloat_FromDouble(value);
+    }
+
+    /* Integers. */
+    {
+        long long value;
+        if (argdata_get_int(ad, &value) == 0)
+            return PyLong_FromLongLong(value);
+    }
+    {
+        unsigned long long value;
+        if (argdata_get_int(ad, &value) == 0)
+            return PyLong_FromUnsignedLongLong(value);
+    }
+
+    /* Unicode strings. */
+    {
+
+        const char *buf;
+        size_t buflen;
+        if (argdata_get_str(ad, &buf, &buflen) == 0)
+            return PyUnicode_FromStringAndSize(buf, buflen);
+    }
+
+    /* Timestamp values. */
+    {
+        struct timespec ts;
+        if (argdata_get_timestamp(ad, &ts) == 0) {
+            struct tm tmbuf, *tm;
+            tm = gmtime_r(&ts.tv_sec, &tmbuf);
+            if (tm == NULL)
+                return NULL;
+
+            PyObject *module = PyImport_ImportModule("datetime");
+            if (module == NULL)
+                return NULL;
+            PyObject *o = PyObject_CallMethod(
+                module, "datetime", "iiiiiil", tm->tm_year + 1900,
+                tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min,
+                tm->tm_sec, ts.tv_nsec / 1000);
+            Py_DECREF(module);
+            return o;
+        }
+    }
+
+    /* Dictionaries. */
+    {
+        argdata_map_iterator_t it;
+        if (argdata_map_iterate(ad, &it) == 0) {
+            PyObject *v = PyDict_New();
+            if (v == NULL)
+                return NULL;
+            const argdata_t *key, *value;
+            while (argdata_map_next(&it, &key, &value)) {
+                PyObject *keyv = convertargdata(key);
+                if (keyv == NULL) {
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                PyObject *valuev = convertargdata(value);
+                if (valuev == NULL) {
+                    Py_DECREF(keyv);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                if (PyDict_SetItem(v, keyv, valuev) != 0) {
+                    Py_DECREF(valuev);
+                    Py_DECREF(keyv);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+            }
+            return v;
+        }
+    }
+
+    /* Lists. */
+    {
+        argdata_seq_iterator_t it;
+        if (argdata_seq_iterate(ad, &it) == 0) {
+            PyObject *v = PyList_New(0);
+            if (v == NULL)
+                return NULL;
+            const argdata_t *value;
+            while (argdata_seq_next(&it, &value)) {
+                PyObject *valuev = convertargdata(value);
+                if (valuev == NULL) {
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                if (PyList_Append(v, valuev) != 0) {
+                    Py_DECREF(valuev);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+            }
+            return v;
+        }
+    }
+
+    /* Unknown or unsupported type. */
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+void
+PySys_SetArgdata(const argdata_t *ad)
+{
+    PyObject *v;
+
+    v = convertargdata(ad);
+    if (v == NULL) {
+        Py_FatalError("can't create sys.argdata");
+        return;
+    }
+    if (PySys_SetObject("argdata", v) != 0)
+        Py_FatalError("can't assign sys.argdata");
+    Py_DECREF(v);
+}
+
+static PyObject *
+makepathobject(const int dirfd)
+{
+    PyObject *v, *d;
+
+    v = PyList_New(1);
+    if (v == NULL) {
+        return NULL;
+    }
+    d = Py_BuildValue("i", dirfd);
+    if (d == NULL) {
+        Py_DECREF(v);
+        return NULL;
+    }
+    PyList_SetItem(v, 0, d);
+    return v;
+}
+
+void
+PySys_SetPath(const int dirfd)
+{
+    PyObject *v = makepathobject(dirfd);
+    if (v == NULL) {
+        Py_FatalError("can't create sys.path");
+    }
+    if (_PySys_SetObjectId(&PyId_path, v) != 0) {
+        Py_FatalError("can't assign sys.path");
+    }
+    Py_DECREF(v);
+}
+
+#endif
+
 static PyObject *
 makeargvobject(int argc, wchar_t **argv)
 {
