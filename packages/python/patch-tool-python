--- Include/Python.h
+++ Include/Python.h
@@ -41,6 +41,11 @@
 #include <stddef.h>
 #endif
 
+#ifdef __CloudABI__
+#include <program.h>
+#include <argdata.h>
+#endif
+
 /* CAUTION:  Build setups should ensure that NDEBUG is defined on the
  * compiler command line when building Python in release mode; else
  * assert() calls won't be removed.
--- Include/pylifecycle.h
+++ Include/pylifecycle.h
@@ -51,7 +51,11 @@
 #endif
 
 /* Bootstrap __main__ (defined in Modules/main.c) */
+#ifdef __CloudABI__
+PyAPI_FUNC(void) Py_ProgramMain(const argdata_t *ad);
+#else
 PyAPI_FUNC(int) Py_Main(int argc, wchar_t **argv);
+#endif
 
 /* In getpath.c */
 PyAPI_FUNC(wchar_t *) Py_GetProgramFullPath(void);
--- Include/sysmodule.h
+++ Include/sysmodule.h
@@ -14,9 +14,13 @@
 PyAPI_FUNC(int) _PySys_SetObjectId(_Py_Identifier *key, PyObject *);
 #endif
 
+#ifdef __CloudABI__
+PyAPI_FUNC(void) PySys_SetArgdata(const char *, const argdata_t *);
+#else
 PyAPI_FUNC(void) PySys_SetArgv(int, wchar_t **);
 PyAPI_FUNC(void) PySys_SetArgvEx(int, wchar_t **, int);
 PyAPI_FUNC(void) PySys_SetPath(const wchar_t *);
+#endif
 
 PyAPI_FUNC(void) PySys_WriteStdout(const char *format, ...)
                  Py_GCC_ATTRIBUTE((format(printf, 1, 2)));
--- Python/pylifecycle.c
+++ Python/pylifecycle.c
@@ -301,6 +301,10 @@
 }
 
 
+#ifdef __CloudABI__
+extern const argdata_t *path_argdata;
+#endif
+
 void
 _Py_InitializeEx_Private(int install_sigs, int install_importlib)
 {
@@ -408,7 +412,12 @@
         Py_FatalError("Py_Initialize: can't initialize sys dict");
     Py_INCREF(interp->sysdict);
     _PyImport_FixupBuiltin(sysmod, "sys");
+#ifdef __CloudABI__
+    if (path_argdata != NULL)
+        PySys_SetArgdata("path", path_argdata);
+#else
     PySys_SetPath(Py_GetPath());
+#endif
     PyDict_SetItemString(interp->sysdict, "modules",
                          interp->modules);
 
@@ -813,7 +822,12 @@
         if (interp->sysdict == NULL)
             goto handle_error;
         Py_INCREF(interp->sysdict);
+#ifdef __CloudABI__
+        if (path_argdata != NULL)
+            PySys_SetArgdata("path", path_argdata);
+#else
         PySys_SetPath(Py_GetPath());
+#endif
         PyDict_SetItemString(interp->sysdict, "modules",
                              interp->modules);
         /* Set up a preliminary stderr printer until we have enough
--- Python/sysmodule.c
+++ Python/sysmodule.c
@@ -20,6 +20,7 @@
 #include "pythread.h"
 
 #include "osdefs.h"
+#include <fcntl.h>
 #include <locale.h>
 
 #ifdef MS_WINDOWS
@@ -2084,6 +2085,8 @@
     return m;
 }
 
+#if !defined(__CloudABI__)
+
 static PyObject *
 makepathobject(const wchar_t *path, wchar_t delim)
 {
@@ -2277,6 +2280,213 @@
     PySys_SetArgvEx(argc, argv, Py_IsolatedFlag == 0);
 }
 
+#else /* defined(__CloudABI__) */
+
+static PyObject *
+convertargdata(const argdata_t *ad)
+{
+    /* Byte strings. */
+    {
+        const void *buf;
+        size_t buflen;
+        if (argdata_get_binary(ad, &buf, &buflen) == 0)
+            return PyBytes_FromStringAndSize(buf, buflen);
+    }
+
+    /* Booleans. */
+    {
+        _Bool value;
+        if (argdata_get_bool(ad, &value) == 0) {
+            PyObject *o = value ? Py_True : Py_False;
+            Py_INCREF(o);
+            return o;
+        }
+    }
+
+    /* File descriptors. */
+    {
+        int value;
+        if (argdata_get_fd(ad, &value) == 0) {
+            struct stat sb;
+            int stat_result = fstat(value, &sb);
+            if (stat_result == 0 && S_ISSOCK(sb.st_mode)) {
+                /*
+                 * File descriptor corresponds to a socket. Create a
+                 * socket.socket object.
+                 */
+                PyObject *module = PyImport_ImportModule("socket");
+                if (module == NULL)
+                    return NULL;
+                PyObject *function = PyObject_GetAttrString(module, "socket");
+                Py_DECREF(module);
+                if (function == NULL)
+                    return NULL;
+                PyObject *args = PyTuple_New(0);
+                if (args == NULL) {
+                    Py_DECREF(function);
+                    return NULL;
+                }
+                PyObject *kwargs = Py_BuildValue("{s:i}", "fileno", value);
+                if (args == NULL) {
+                    Py_DECREF(args);
+                    Py_DECREF(function);
+                    return NULL;
+                }
+                PyObject *o = PyObject_Call(function, args, kwargs);
+                Py_DECREF(kwargs);
+                Py_DECREF(args);
+                Py_DECREF(function);
+                return o;
+            } else if (stat_result == 0 && S_ISDIR(sb.st_mode)) {
+                /* Directories must be expressed as raw descriptor numbers. */
+                return PyLong_FromLong(value);
+            } else {
+                /* Create an object using io.open(). */
+                int mode = fcntl(value, F_GETFL);
+                const char *modestr;
+                switch (mode & O_ACCMODE) {
+                case O_RDWR:
+                    modestr = (mode & O_APPEND) != 0 ? "a+b" : "w+b";
+                    break;
+                case O_WRONLY:
+                    modestr = (mode & O_APPEND) != 0 ? "ab" : "wb";
+                    break;
+                default:
+                    modestr = "r";
+                    break;
+                }
+                return PyFile_FromFd(value, NULL, modestr, 0,
+                                     NULL, NULL, NULL, 0);
+            }
+        }
+    }
+
+    /* Floating-point values. */
+    {
+        double value;
+        if (argdata_get_float(ad, &value) == 0)
+            return PyFloat_FromDouble(value);
+    }
+
+    /* Integers. */
+    {
+        long long value;
+        if (argdata_get_int(ad, &value) == 0)
+            return PyLong_FromLongLong(value);
+    }
+    {
+        unsigned long long value;
+        if (argdata_get_int(ad, &value) == 0)
+            return PyLong_FromUnsignedLongLong(value);
+    }
+
+    /* Unicode strings. */
+    {
+
+        const char *buf;
+        size_t buflen;
+        if (argdata_get_str(ad, &buf, &buflen) == 0)
+            return PyUnicode_FromStringAndSize(buf, buflen);
+    }
+
+    /* Timestamp values. */
+    {
+        struct timespec ts;
+        if (argdata_get_timestamp(ad, &ts) == 0) {
+            struct tm tmbuf, *tm;
+            tm = gmtime_r(&ts.tv_sec, &tmbuf);
+            if (tm == NULL)
+                return NULL;
+
+            PyObject *module = PyImport_ImportModule("datetime");
+            if (module == NULL)
+                return NULL;
+            PyObject *o = PyObject_CallMethod(
+                module, "datetime", "iiiiiil", tm->tm_year + 1900,
+                tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min,
+                tm->tm_sec, ts.tv_nsec / 1000);
+            Py_DECREF(module);
+            return o;
+        }
+    }
+
+    /* Dictionaries. */
+    {
+        argdata_map_iterator_t it;
+        if (argdata_map_iterate(ad, &it) == 0) {
+            PyObject *v = PyDict_New();
+            if (v == NULL)
+                return NULL;
+            const argdata_t *key, *value;
+            while (argdata_map_next(&it, &key, &value)) {
+                PyObject *keyv = convertargdata(key);
+                if (keyv == NULL) {
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                PyObject *valuev = convertargdata(value);
+                if (valuev == NULL) {
+                    Py_DECREF(keyv);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                if (PyDict_SetItem(v, keyv, valuev) != 0) {
+                    Py_DECREF(valuev);
+                    Py_DECREF(keyv);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+            }
+            return v;
+        }
+    }
+
+    /* Lists. */
+    {
+        argdata_seq_iterator_t it;
+        if (argdata_seq_iterate(ad, &it) == 0) {
+            PyObject *v = PyList_New(0);
+            if (v == NULL)
+                return NULL;
+            const argdata_t *value;
+            while (argdata_seq_next(&it, &value)) {
+                PyObject *valuev = convertargdata(value);
+                if (valuev == NULL) {
+                    Py_DECREF(v);
+                    return NULL;
+                }
+                if (PyList_Append(v, valuev) != 0) {
+                    Py_DECREF(valuev);
+                    Py_DECREF(v);
+                    return NULL;
+                }
+            }
+            return v;
+        }
+    }
+
+    /* Unknown or unsupported type. */
+    Py_INCREF(Py_None);
+    return Py_None;
+}
+
+void
+PySys_SetArgdata(const char *name, const argdata_t *ad)
+{
+    PyObject *v;
+
+    v = convertargdata(ad);
+    if (v == NULL) {
+        Py_FatalError("can't create sys.argdata");
+        return;
+    }
+    if (PySys_SetObject(name, v) != 0)
+        Py_FatalError("can't assign sys.argdata");
+    Py_DECREF(v);
+}
+
+#endif
+
 /* Reimplementation of PyFile_WriteString() no calling indirectly
    PyErr_CheckSignals(): avoid the call to PyObject_Str(). */
 
