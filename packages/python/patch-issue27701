--- Modules/posixmodule.c
+++ Modules/posixmodule.c
@@ -353,17 +353,12 @@
 #endif
 
 /* choose the appropriate stat and fstat functions and return structs */
-#undef STAT
 #undef FSTAT
 #undef STRUCT_STAT
 #ifdef MS_WINDOWS
-#       define STAT win32_stat
-#       define LSTAT win32_lstat
 #       define FSTAT _Py_fstat_noraise
 #       define STRUCT_STAT struct _Py_stat_struct
 #else
-#       define STAT stat
-#       define LSTAT lstat
 #       define FSTAT fstat
 #       define STRUCT_STAT struct stat
 #endif
@@ -2162,21 +2157,21 @@
             result = win32_stat_w(path->wide, &st);
         else
             result = win32_lstat_w(path->wide, &st);
+    } else {
+        if (follow_symlinks)
+            result = win32_stat(path->narrow, &st);
+        else
+            result = win32_lstat(path->narrow, &st);
     }
+#elif defined(HAVE_FSTATAT)
+    result = fstatat(dir_fd, path->narrow, &st,
+                     follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
+#else
+    if (follow_symlinks)
+        result = stat(path->narrow, &st);
     else
+        result = lstat(path->narrow, &st);
 #endif
-#if defined(HAVE_LSTAT) || defined(MS_WINDOWS)
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = LSTAT(path->narrow, &st);
-    else
-#endif
-#ifdef HAVE_FSTATAT
-    if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks)
-        result = fstatat(dir_fd, path->narrow, &st,
-                         follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
-    else
-#endif
-        result = STAT(path->narrow, &st);
     Py_END_ALLOW_THREADS
 
     if (result != 0) {
@@ -2634,19 +2629,15 @@
 
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_FACCESSAT
-    if ((dir_fd != DEFAULT_DIR_FD) ||
-        effective_ids ||
-        !follow_symlinks) {
-        int flags = 0;
-        if (!follow_symlinks)
-            flags |= AT_SYMLINK_NOFOLLOW;
-        if (effective_ids)
-            flags |= AT_EACCESS;
-        result = faccessat(dir_fd, path->narrow, mode, flags);
-    }
-    else
+    int flags = 0;
+    if (!follow_symlinks)
+        flags |= AT_SYMLINK_NOFOLLOW;
+    if (effective_ids)
+        flags |= AT_EACCESS;
+    result = faccessat(dir_fd, path->narrow, mode, flags);
+#else
+    result = access(path->narrow, mode);
 #endif
-        result = access(path->narrow, mode);
     Py_END_ALLOW_THREADS
     return_value = !result;
 #endif
@@ -2866,13 +2857,8 @@
         result = fchmod(path->fd, mode);
     else
 #endif
-#ifdef HAVE_LCHMOD
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = lchmod(path->narrow, mode);
-    else
-#endif
+    {
 #ifdef HAVE_FCHMODAT
-    if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks) {
         /*
          * fchmodat() doesn't currently support AT_SYMLINK_NOFOLLOW!
          * The documentation specifically shows how to use it,
@@ -2893,10 +2879,15 @@
                          result &&
                          ((errno == ENOTSUP) || (errno == EOPNOTSUPP)) &&
                          !follow_symlinks;
-    }
-    else
+#else
+#ifdef HAVE_LCHMOD
+        if (!follow_symlinks)
+            result = lchmod(path->narrow, mode);
+        else
+#endif
+            result = chmod(path->narrow, mode);
 #endif
-        result = chmod(path->narrow, mode);
+    }
     Py_END_ALLOW_THREADS
 
     if (result) {
@@ -3213,18 +3204,19 @@
         result = fchown(path->fd, uid, gid);
     else
 #endif
-#ifdef HAVE_LCHOWN
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = lchown(path->narrow, uid, gid);
-    else
-#endif
+    {
 #ifdef HAVE_FCHOWNAT
-    if ((dir_fd != DEFAULT_DIR_FD) || (!follow_symlinks))
         result = fchownat(dir_fd, path->narrow, uid, gid,
                           follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
-    else
+#else
+#ifdef HAVE_LCHOWN
+        if (!follow_symlinks)
+            result = lchown(path->narrow, uid, gid);
+        else
+#endif
+            result = chown(path->narrow, uid, gid);
 #endif
-        result = chown(path->narrow, uid, gid);
+    }
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -3476,15 +3468,12 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_LINKAT
-    if ((src_dir_fd != DEFAULT_DIR_FD) ||
-        (dst_dir_fd != DEFAULT_DIR_FD) ||
-        (!follow_symlinks))
-        result = linkat(src_dir_fd, src->narrow,
-            dst_dir_fd, dst->narrow,
-            follow_symlinks ? AT_SYMLINK_FOLLOW : 0);
-    else
+    result = linkat(src_dir_fd, src->narrow,
+        dst_dir_fd, dst->narrow,
+        follow_symlinks ? AT_SYMLINK_FOLLOW : 0);
+#else
+    result = link(src->narrow, dst->narrow);
 #endif
-        result = link(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -4033,14 +4022,11 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #if HAVE_MKDIRAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = mkdirat(dir_fd, path->narrow, mode);
-    else
-#endif
-#if ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
-        result = mkdir(path->narrow);
+    result = mkdirat(dir_fd, path->narrow, mode);
+#elif ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
+    result = mkdir(path->narrow);
 #else
-        result = mkdir(path->narrow, mode);
+    result = mkdir(path->narrow, mode);
 #endif
     Py_END_ALLOW_THREADS
     if (result < 0)
@@ -4188,11 +4174,10 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_RENAMEAT
-    if (dir_fd_specified)
-        result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
-    else
+    result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
+#else
+    result = rename(src->narrow, dst->narrow);
 #endif
-        result = rename(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -4278,13 +4263,10 @@
     else
         result = RemoveDirectoryA(path->narrow);
     result = !result; /* Windows, success=1, UNIX, success=0 */
+#elif defined(HAVE_UNLINKAT)
+    result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
 #else
-#ifdef HAVE_UNLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
-    else
-#endif
-        result = rmdir(path->narrow);
+    result = rmdir(path->narrow);
 #endif
     Py_END_ALLOW_THREADS
 
@@ -4428,13 +4410,10 @@
     else
         result = DeleteFileA(path->narrow);
     result = !result; /* Windows, success=1, UNIX, success=0 */
+#elif defined(HAVE_UNLINKAT)
+    result = unlinkat(dir_fd, path->narrow, 0);
 #else
-#ifdef HAVE_UNLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = unlinkat(dir_fd, path->narrow, 0);
-    else
-#endif /* HAVE_UNLINKAT */
-        result = unlink(path->narrow);
+    result = unlink(path->narrow);
 #endif
     _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
@@ -4651,35 +4630,26 @@
     #define PATH_UTIME_HAVE_FD 0
 #endif
 
-#if defined(HAVE_UTIMENSAT) || defined(HAVE_LUTIMES)
-#  define UTIME_HAVE_NOFOLLOW_SYMLINKS
-#endif
+#if !defined(HAVE_UTIMENSAT)
 
-#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
+#  ifdef HAVE_LUTIMES
+#    define UTIME_HAVE_NOFOLLOW_SYMLINKS
 
 static int
 utime_nofollow_symlinks(utime_t *ut, const char *path)
 {
-#ifdef HAVE_UTIMENSAT
-    UTIME_TO_TIMESPEC;
-    return utimensat(DEFAULT_DIR_FD, path, time, AT_SYMLINK_NOFOLLOW);
-#else
     UTIME_TO_TIMEVAL;
     return lutimes(path, time);
-#endif
 }
 
-#endif
+#  endif
 
-#ifndef MS_WINDOWS
+#  ifndef MS_WINDOWS
 
 static int
 utime_default(utime_t *ut, const char *path)
 {
-#ifdef HAVE_UTIMENSAT
-    UTIME_TO_TIMESPEC;
-    return utimensat(DEFAULT_DIR_FD, path, time, 0);
-#elif defined(HAVE_UTIMES)
+#if defined(HAVE_UTIMES)
     UTIME_TO_TIMEVAL;
     return utimes(path, time);
 #elif defined(HAVE_UTIME_H)
@@ -4691,6 +4661,8 @@
 #endif
 }
 
+#  endif
+
 #endif
 
 static int
@@ -4871,25 +4843,23 @@
 #else /* MS_WINDOWS */
     Py_BEGIN_ALLOW_THREADS
 
-#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = utime_nofollow_symlinks(&utime, path->narrow);
+#if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
+    if (path->fd != -1)
+        result = utime_fd(&utime, path->fd);
     else
 #endif
-
+    {
 #if defined(HAVE_FUTIMESAT) || defined(HAVE_UTIMENSAT)
-    if ((dir_fd != DEFAULT_DIR_FD) || (!follow_symlinks))
         result = utime_dir_fd(&utime, dir_fd, path->narrow, follow_symlinks);
-    else
+#else
+#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
+        if (!follow_symlinks)
+            result = utime_nofollow_symlinks(&utime, path->narrow);
+        else
 #endif
-
-#if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
-    if (path->fd != -1)
-        result = utime_fd(&utime, path->fd);
-    else
+            result = utime_default(&utime, path->narrow);
 #endif
-
-    result = utime_default(&utime, path->narrow);
+    }
 
     Py_END_ALLOW_THREADS
 
@@ -7141,11 +7111,10 @@
 
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_READLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        length = readlinkat(dir_fd, path.narrow, buffer, sizeof(buffer));
-    else
+    length = readlinkat(dir_fd, path.narrow, buffer, sizeof(buffer));
+#else
+    length = readlink(path.narrow, buffer, sizeof(buffer));
 #endif
-        length = readlink(path.narrow, buffer, sizeof(buffer));
     Py_END_ALLOW_THREADS
 
     if (length < 0) {
@@ -7467,11 +7436,10 @@
 
     Py_BEGIN_ALLOW_THREADS
 #if HAVE_SYMLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = symlinkat(src->narrow, dir_fd, dst->narrow);
-    else
+    result = symlinkat(src->narrow, dir_fd, dst->narrow);
+#else
+    result = symlink(src->narrow, dst->narrow);
 #endif
-        result = symlink(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -7765,13 +7733,12 @@
         if (path->wide)
             fd = _wopen(path->wide, flags, mode);
         else
-#endif
-#ifdef HAVE_OPENAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            fd = openat(dir_fd, path->narrow, flags, mode);
-        else
-#endif
             fd = open(path->narrow, flags, mode);
+#elif defined(HAVE_OPENAT)
+        fd = openat(dir_fd, path->narrow, flags, mode);
+#else
+        fd = open(path->narrow, flags, mode);
+#endif
         Py_END_ALLOW_THREADS
     } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     _Py_END_SUPPRESS_IPH
@@ -8723,11 +8690,10 @@
     do {
         Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_MKFIFOAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            result = mkfifoat(dir_fd, path->narrow, mode);
-        else
+        result = mkfifoat(dir_fd, path->narrow, mode);
+#else
+        result = mkfifo(path->narrow, mode);
 #endif
-            result = mkfifo(path->narrow, mode);
         Py_END_ALLOW_THREADS
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
@@ -8775,11 +8741,10 @@
     do {
         Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_MKNODAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            result = mknodat(dir_fd, path->narrow, mode, device);
-        else
+        result = mknodat(dir_fd, path->narrow, mode, device);
+#else
+        result = mknod(path->narrow, mode, device);
 #endif
-            result = mknod(path->narrow, mode, device);
         Py_END_ALLOW_THREADS
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
@@ -11535,9 +11500,9 @@
     path = PyBytes_AS_STRING(bytes);
 
     if (follow_symlinks)
-        result = STAT(path, &st);
+        result = stat(path, &st);
     else
-        result = LSTAT(path, &st);
+        result = lstat(path, &st);
     Py_DECREF(bytes);
 
     if (result != 0)
