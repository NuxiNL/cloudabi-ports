--- Modules/clinic/posixmodule.c.h
+++ Modules/clinic/posixmodule.c.h
@@ -866,7 +866,7 @@
     int follow_symlinks = 1;
 
     if (!_PyArg_ParseTupleAndKeywordsFast(args, kwargs, &_parser,
-        path_converter, &src, path_converter, &dst, dir_fd_converter, &src_dir_fd, dir_fd_converter, &dst_dir_fd, &follow_symlinks)) {
+        path_converter, &src, path_converter, &dst, LINKAT_DIR_FD_CONVERTER, &src_dir_fd, LINKAT_DIR_FD_CONVERTER, &dst_dir_fd, &follow_symlinks)) {
         goto exit;
     }
     return_value = os_link_impl(module, &src, &dst, src_dir_fd, dst_dir_fd, follow_symlinks);
@@ -1232,7 +1232,7 @@
     int dst_dir_fd = DEFAULT_DIR_FD;
 
     if (!_PyArg_ParseTupleAndKeywordsFast(args, kwargs, &_parser,
-        path_converter, &src, path_converter, &dst, dir_fd_converter, &src_dir_fd, dir_fd_converter, &dst_dir_fd)) {
+        path_converter, &src, path_converter, &dst, RENAMEAT_DIR_FD_CONVERTER, &src_dir_fd, RENAMEAT_DIR_FD_CONVERTER, &dst_dir_fd)) {
         goto exit;
     }
     return_value = os_rename_impl(module, &src, &dst, src_dir_fd, dst_dir_fd);
@@ -1277,7 +1277,7 @@
     int dst_dir_fd = DEFAULT_DIR_FD;
 
     if (!_PyArg_ParseTupleAndKeywordsFast(args, kwargs, &_parser,
-        path_converter, &src, path_converter, &dst, dir_fd_converter, &src_dir_fd, dir_fd_converter, &dst_dir_fd)) {
+        path_converter, &src, path_converter, &dst, RENAMEAT_DIR_FD_CONVERTER, &src_dir_fd, RENAMEAT_DIR_FD_CONVERTER, &dst_dir_fd)) {
         goto exit;
     }
     return_value = os_replace_impl(module, &src, &dst, src_dir_fd, dst_dir_fd);
@@ -1590,7 +1590,7 @@
     int follow_symlinks = 1;
 
     if (!_PyArg_ParseTupleAndKeywordsFast(args, kwargs, &_parser,
-        path_converter, &path, &times, &ns, FUTIMENSAT_DIR_FD_CONVERTER, &dir_fd, &follow_symlinks)) {
+        path_converter, &path, &times, &ns, UTIMENSAT_DIR_FD_CONVERTER, &dir_fd, &follow_symlinks)) {
         goto exit;
     }
     return_value = os_utime_impl(module, &path, times, ns, dir_fd, follow_symlinks);
--- Modules/posixmodule.c
+++ Modules/posixmodule.c
@@ -353,17 +353,12 @@
 #endif
 
 /* choose the appropriate stat and fstat functions and return structs */
-#undef STAT
 #undef FSTAT
 #undef STRUCT_STAT
 #ifdef MS_WINDOWS
-#       define STAT win32_stat
-#       define LSTAT win32_lstat
 #       define FSTAT _Py_fstat_noraise
 #       define STRUCT_STAT struct _Py_stat_struct
 #else
-#       define STAT stat
-#       define LSTAT lstat
 #       define FSTAT fstat
 #       define STRUCT_STAT struct stat
 #endif
@@ -663,15 +658,26 @@
 #endif /* HAVE_MKNOD && HAVE_MAKEDEV */
 
 
-#ifdef AT_FDCWD
 /*
- * Why the (int) cast?  Solaris 10 defines AT_FDCWD as 0xffd19553 (-3041965);
- * without the int cast, the value gets interpreted as uint (4291925331),
- * which doesn't play nicely with all the initializer lines in this file that
- * look like this:
- *      int dir_fd = DEFAULT_DIR_FD;
+ * On Solaris 9 and 10, AT_FDCWD is defined as a positive number,
+ * exceeding INT_MAX. This causes annoying compiler warnings when using
+ * its value as part of an initializer. Wrap it to the same value within
+ * the range of an integer.
  */
-#define DEFAULT_DIR_FD (int)AT_FDCWD
+#if defined(AT_FDCWD) && AT_FDCWD == 0xffd19553
+#  undef AT_FDCWD
+#  define AT_FDCWD (-3041965)
+#endif
+
+
+/*
+ * Default argument for 'dir_fd' parameters if not provided. The default
+ * value (None) should correspond with AT_FDCWD. If this operating
+ * system does not provide support for *at() calls and thus AT_FDCWD,
+ * just use some placeholder. It will be completely ignored anyway.
+ */
+#ifdef AT_FDCWD
+#define DEFAULT_DIR_FD AT_FDCWD
 #else
 #define DEFAULT_DIR_FD (-100)
 #endif
@@ -709,11 +715,13 @@
 static int
 dir_fd_converter(PyObject *o, void *p)
 {
+#ifdef AT_FDCWD
     if (o == Py_None) {
-        *(int *)p = DEFAULT_DIR_FD;
+        *(int *)p = AT_FDCWD;
         return 1;
     }
-    else if (PyIndex_Check(o)) {
+#endif
+    if (PyIndex_Check(o)) {
         return _fd_converter(o, (int *)p);
     }
     else {
@@ -990,14 +998,10 @@
 static int
 dir_fd_unavailable(PyObject *o, void *p)
 {
-    int dir_fd;
-    if (!dir_fd_converter(o, &dir_fd))
-        return 0;
-    if (dir_fd != DEFAULT_DIR_FD) {
+    if (o != Py_None) {
         argument_unavailable_error(NULL, "dir_fd");
         return 0;
     }
-    *(int *)p = dir_fd;
     return 1;
 }
 
@@ -1024,24 +1028,28 @@
 static int
 path_and_dir_fd_invalid(const char *function_name, path_t *path, int dir_fd)
 {
-    if (!path->narrow && !path->wide && (dir_fd != DEFAULT_DIR_FD)) {
+#ifdef AT_FDCWD
+    if (!path->narrow && !path->wide && dir_fd != AT_FDCWD) {
         PyErr_Format(PyExc_ValueError,
                      "%s: can't specify dir_fd without matching path",
                      function_name);
         return 1;
     }
+#endif
     return 0;
 }
 
 static int
 dir_fd_and_fd_invalid(const char *function_name, int dir_fd, int fd)
 {
-    if ((dir_fd != DEFAULT_DIR_FD) && (fd != -1)) {
+#ifdef AT_FDCWD
+    if (dir_fd != AT_FDCWD && fd != -1) {
         PyErr_Format(PyExc_ValueError,
                      "%s: can't specify both dir_fd and fd",
                      function_name);
         return 1;
     }
+#endif
     return 0;
 }
 
@@ -1058,19 +1066,6 @@
     return 0;
 }
 
-static int
-dir_fd_and_follow_symlinks_invalid(const char *function_name, int dir_fd,
-                                   int follow_symlinks)
-{
-    if ((dir_fd != DEFAULT_DIR_FD) && (!follow_symlinks)) {
-        PyErr_Format(PyExc_ValueError,
-                     "%s: cannot use dir_fd and follow_symlinks together",
-                     function_name);
-        return 1;
-    }
-    return 0;
-}
-
 #ifdef MS_WINDOWS
     typedef PY_LONG_LONG Py_off_t;
 #else
@@ -2162,21 +2157,21 @@
             result = win32_stat_w(path->wide, &st);
         else
             result = win32_lstat_w(path->wide, &st);
+    } else {
+        if (follow_symlinks)
+            result = win32_stat(path->narrow, &st);
+        else
+            result = win32_lstat(path->narrow, &st);
     }
+#elif defined(HAVE_FSTATAT)
+    result = fstatat(dir_fd, path->narrow, &st,
+                     follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
+#else
+    if (follow_symlinks)
+        result = stat(path->narrow, &st);
     else
+        result = lstat(path->narrow, &st);
 #endif
-#if defined(HAVE_LSTAT) || defined(MS_WINDOWS)
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = LSTAT(path->narrow, &st);
-    else
-#endif
-#ifdef HAVE_FSTATAT
-    if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks)
-        result = fstatat(dir_fd, path->narrow, &st,
-                         follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
-    else
-#endif
-        result = STAT(path->narrow, &st);
     Py_END_ALLOW_THREADS
 
     if (result != 0) {
@@ -2200,6 +2195,7 @@
 MKNODAT
 OPENAT
 READLINKAT
+RENAMEAT
 SYMLINKAT
 UNLINKAT
 
@@ -2296,6 +2292,12 @@
     #define READLINKAT_DIR_FD_CONVERTER dir_fd_unavailable
 #endif
 
+#ifdef HAVE_RENAMEAT
+    #define RENAMEAT_DIR_FD_CONVERTER dir_fd_converter
+#else
+    #define RENAMEAT_DIR_FD_CONVERTER dir_fd_unavailable
+#endif
+
 #ifdef HAVE_SYMLINKAT
     #define SYMLINKAT_DIR_FD_CONVERTER dir_fd_converter
 #else
@@ -2355,7 +2357,7 @@
 #else
     #define PATH_HAVE_FTRUNCATE 0
 #endif
-/*[python end generated code: output=4bd4f6f7d41267f1 input=80b4c890b6774ea5]*/
+/*[python end generated code: output=f1ea428e2f74e1c4 input=f67880de61f4d7e9]*/
 
 #ifdef MS_WINDOWS
     #undef PATH_HAVE_FTRUNCATE
@@ -2406,12 +2408,8 @@
     type = 'int'
 
     def converter_init(self, requires=None):
-        if self.default in (unspecified, None):
-            self.c_default = 'DEFAULT_DIR_FD'
-        if isinstance(requires, str):
-            self.converter = requires.upper() + '_DIR_FD_CONVERTER'
-        else:
-            self.converter = 'dir_fd_converter'
+        self.c_default = 'DEFAULT_DIR_FD'
+        self.converter = requires.upper() + '_DIR_FD_CONVERTER'
 
 class fildes_converter(CConverter):
     type = 'int'
@@ -2484,7 +2482,7 @@
     impl_by_reference = True;
 
 [python start generated code]*/
-/*[python end generated code: output=da39a3ee5e6b4b0d input=affe68316f160401]*/
+/*[python end generated code: output=da39a3ee5e6b4b0d input=aa1f506cfb804c68]*/
 
 /*[clinic input]
 
@@ -2634,19 +2632,15 @@
 
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_FACCESSAT
-    if ((dir_fd != DEFAULT_DIR_FD) ||
-        effective_ids ||
-        !follow_symlinks) {
-        int flags = 0;
-        if (!follow_symlinks)
-            flags |= AT_SYMLINK_NOFOLLOW;
-        if (effective_ids)
-            flags |= AT_EACCESS;
-        result = faccessat(dir_fd, path->narrow, mode, flags);
-    }
-    else
+    int flags = 0;
+    if (!follow_symlinks)
+        flags |= AT_SYMLINK_NOFOLLOW;
+    if (effective_ids)
+        flags |= AT_EACCESS;
+    result = faccessat(dir_fd, path->narrow, mode, flags);
+#else
+    result = access(path->narrow, mode);
 #endif
-        result = access(path->narrow, mode);
     Py_END_ALLOW_THREADS
     return_value = !result;
 #endif
@@ -2866,13 +2860,8 @@
         result = fchmod(path->fd, mode);
     else
 #endif
-#ifdef HAVE_LCHMOD
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = lchmod(path->narrow, mode);
-    else
-#endif
+    {
 #ifdef HAVE_FCHMODAT
-    if ((dir_fd != DEFAULT_DIR_FD) || !follow_symlinks) {
         /*
          * fchmodat() doesn't currently support AT_SYMLINK_NOFOLLOW!
          * The documentation specifically shows how to use it,
@@ -2893,24 +2882,24 @@
                          result &&
                          ((errno == ENOTSUP) || (errno == EOPNOTSUPP)) &&
                          !follow_symlinks;
-    }
-    else
+#else
+#ifdef HAVE_LCHMOD
+        if (!follow_symlinks)
+            result = lchmod(path->narrow, mode);
+        else
+#endif
+            result = chmod(path->narrow, mode);
 #endif
-        result = chmod(path->narrow, mode);
+    }
     Py_END_ALLOW_THREADS
 
     if (result) {
 #ifdef HAVE_FCHMODAT
-        if (fchmodat_nofollow_unsupported) {
-            if (dir_fd != DEFAULT_DIR_FD)
-                dir_fd_and_follow_symlinks_invalid("chmod",
-                                                   dir_fd, follow_symlinks);
-            else
-                follow_symlinks_specified("chmod", follow_symlinks);
-        }
+        if (fchmodat_nofollow_unsupported)
+            follow_symlinks_specified("chmod", follow_symlinks);
         else
 #endif
-        return path_error(path);
+            return path_error(path);
     }
 #endif
 
@@ -3213,18 +3202,19 @@
         result = fchown(path->fd, uid, gid);
     else
 #endif
-#ifdef HAVE_LCHOWN
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = lchown(path->narrow, uid, gid);
-    else
-#endif
+    {
 #ifdef HAVE_FCHOWNAT
-    if ((dir_fd != DEFAULT_DIR_FD) || (!follow_symlinks))
         result = fchownat(dir_fd, path->narrow, uid, gid,
                           follow_symlinks ? 0 : AT_SYMLINK_NOFOLLOW);
-    else
+#else
+#ifdef HAVE_LCHOWN
+        if (!follow_symlinks)
+            result = lchown(path->narrow, uid, gid);
+        else
+#endif
+            result = chown(path->narrow, uid, gid);
 #endif
-        result = chown(path->narrow, uid, gid);
+    }
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -3422,8 +3412,8 @@
     src : path_t
     dst : path_t
     *
-    src_dir_fd : dir_fd = None
-    dst_dir_fd : dir_fd = None
+    src_dir_fd : dir_fd(requires='linkat') = None
+    dst_dir_fd : dir_fd(requires='linkat') = None
     follow_symlinks: bool = True
 
 Create a hard link to a file.
@@ -3450,13 +3440,6 @@
     int result;
 #endif
 
-#ifndef HAVE_LINKAT
-    if ((src_dir_fd != DEFAULT_DIR_FD) || (dst_dir_fd != DEFAULT_DIR_FD)) {
-        argument_unavailable_error("link", "src_dir_fd and dst_dir_fd");
-        return NULL;
-    }
-#endif
-
     if ((src->narrow && dst->wide) || (src->wide && dst->narrow)) {
         PyErr_SetString(PyExc_NotImplementedError,
                         "link: src and dst must be the same type");
@@ -3476,15 +3459,12 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_LINKAT
-    if ((src_dir_fd != DEFAULT_DIR_FD) ||
-        (dst_dir_fd != DEFAULT_DIR_FD) ||
-        (!follow_symlinks))
-        result = linkat(src_dir_fd, src->narrow,
-            dst_dir_fd, dst->narrow,
-            follow_symlinks ? AT_SYMLINK_FOLLOW : 0);
-    else
+    result = linkat(src_dir_fd, src->narrow,
+        dst_dir_fd, dst->narrow,
+        follow_symlinks ? AT_SYMLINK_FOLLOW : 0);
+#else
+    result = link(src->narrow, dst->narrow);
 #endif
-        result = link(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -4033,14 +4013,11 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #if HAVE_MKDIRAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = mkdirat(dir_fd, path->narrow, mode);
-    else
-#endif
-#if ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
-        result = mkdir(path->narrow);
+    result = mkdirat(dir_fd, path->narrow, mode);
+#elif ( defined(__WATCOMC__) || defined(PYCC_VACPP) ) && !defined(__QNX__)
+    result = mkdir(path->narrow);
 #else
-        result = mkdir(path->narrow, mode);
+    result = mkdir(path->narrow, mode);
 #endif
     Py_END_ALLOW_THREADS
     if (result < 0)
@@ -4150,7 +4127,6 @@
 internal_rename(path_t *src, path_t *dst, int src_dir_fd, int dst_dir_fd, int is_replace)
 {
     const char *function_name = is_replace ? "replace" : "rename";
-    int dir_fd_specified;
 
 #ifdef MS_WINDOWS
     BOOL result;
@@ -4159,15 +4135,6 @@
     int result;
 #endif
 
-    dir_fd_specified = (src_dir_fd != DEFAULT_DIR_FD) ||
-                       (dst_dir_fd != DEFAULT_DIR_FD);
-#ifndef HAVE_RENAMEAT
-    if (dir_fd_specified) {
-        argument_unavailable_error(function_name, "src_dir_fd and dst_dir_fd");
-        return NULL;
-    }
-#endif
-
     if ((src->narrow && dst->wide) || (src->wide && dst->narrow)) {
         PyErr_Format(PyExc_ValueError,
                      "%s: src and dst must be the same type", function_name);
@@ -4188,11 +4155,10 @@
 #else
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_RENAMEAT
-    if (dir_fd_specified)
-        result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
-    else
+    result = renameat(src_dir_fd, src->narrow, dst_dir_fd, dst->narrow);
+#else
+    result = rename(src->narrow, dst->narrow);
 #endif
-        result = rename(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -4208,8 +4174,8 @@
     src : path_t
     dst : path_t
     *
-    src_dir_fd : dir_fd = None
-    dst_dir_fd : dir_fd = None
+    src_dir_fd : dir_fd(requires='renameat') = None
+    dst_dir_fd : dir_fd(requires='renameat') = None
 
 Rename a file or directory.
 
@@ -4278,13 +4244,10 @@
     else
         result = RemoveDirectoryA(path->narrow);
     result = !result; /* Windows, success=1, UNIX, success=0 */
+#elif defined(HAVE_UNLINKAT)
+    result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
 #else
-#ifdef HAVE_UNLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = unlinkat(dir_fd, path->narrow, AT_REMOVEDIR);
-    else
-#endif
-        result = rmdir(path->narrow);
+    result = rmdir(path->narrow);
 #endif
     Py_END_ALLOW_THREADS
 
@@ -4428,13 +4391,10 @@
     else
         result = DeleteFileA(path->narrow);
     result = !result; /* Windows, success=1, UNIX, success=0 */
+#elif defined(HAVE_UNLINKAT)
+    result = unlinkat(dir_fd, path->narrow, 0);
 #else
-#ifdef HAVE_UNLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = unlinkat(dir_fd, path->narrow, 0);
-    else
-#endif /* HAVE_UNLINKAT */
-        result = unlink(path->narrow);
+    result = unlink(path->narrow);
 #endif
     _Py_END_SUPPRESS_IPH
     Py_END_ALLOW_THREADS
@@ -4627,9 +4587,9 @@
 #endif
 }
 
-    #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_converter
+    #define UTIMENSAT_DIR_FD_CONVERTER dir_fd_converter
 #else
-    #define FUTIMENSAT_DIR_FD_CONVERTER dir_fd_unavailable
+    #define UTIMENSAT_DIR_FD_CONVERTER dir_fd_unavailable
 #endif
 
 #if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
@@ -4651,35 +4611,26 @@
     #define PATH_UTIME_HAVE_FD 0
 #endif
 
-#if defined(HAVE_UTIMENSAT) || defined(HAVE_LUTIMES)
-#  define UTIME_HAVE_NOFOLLOW_SYMLINKS
-#endif
+#if !defined(HAVE_UTIMENSAT)
 
-#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
+#  ifdef HAVE_LUTIMES
+#    define UTIME_HAVE_NOFOLLOW_SYMLINKS
 
 static int
 utime_nofollow_symlinks(utime_t *ut, const char *path)
 {
-#ifdef HAVE_UTIMENSAT
-    UTIME_TO_TIMESPEC;
-    return utimensat(DEFAULT_DIR_FD, path, time, AT_SYMLINK_NOFOLLOW);
-#else
     UTIME_TO_TIMEVAL;
     return lutimes(path, time);
-#endif
 }
 
-#endif
+#  endif
 
-#ifndef MS_WINDOWS
+#  ifndef MS_WINDOWS
 
 static int
 utime_default(utime_t *ut, const char *path)
 {
-#ifdef HAVE_UTIMENSAT
-    UTIME_TO_TIMESPEC;
-    return utimensat(DEFAULT_DIR_FD, path, time, 0);
-#elif defined(HAVE_UTIMES)
+#if defined(HAVE_UTIMES)
     UTIME_TO_TIMEVAL;
     return utimes(path, time);
 #elif defined(HAVE_UTIME_H)
@@ -4691,6 +4642,8 @@
 #endif
 }
 
+#  endif
+
 #endif
 
 static int
@@ -4722,7 +4675,7 @@
     times: object = NULL
     *
     ns: object = NULL
-    dir_fd: dir_fd(requires='futimensat') = None
+    dir_fd: dir_fd(requires='utimensat') = None
     follow_symlinks: bool=True
 
 # "utime(path, times=None, *[, ns], dir_fd=None, follow_symlinks=True)\n\
@@ -4827,15 +4780,6 @@
         fd_and_follow_symlinks_invalid("utime", path->fd, follow_symlinks))
         goto exit;
 
-#if !defined(HAVE_UTIMENSAT)
-    if ((dir_fd != DEFAULT_DIR_FD) && (!follow_symlinks)) {
-        PyErr_SetString(PyExc_ValueError,
-                     "utime: cannot use dir_fd and follow_symlinks "
-                     "together on this platform");
-        goto exit;
-    }
-#endif
-
 #ifdef MS_WINDOWS
     Py_BEGIN_ALLOW_THREADS
     if (path->wide)
@@ -4871,25 +4815,23 @@
 #else /* MS_WINDOWS */
     Py_BEGIN_ALLOW_THREADS
 
-#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
-    if ((!follow_symlinks) && (dir_fd == DEFAULT_DIR_FD))
-        result = utime_nofollow_symlinks(&utime, path->narrow);
+#if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
+    if (path->fd != -1)
+        result = utime_fd(&utime, path->fd);
     else
 #endif
-
+    {
 #if defined(HAVE_FUTIMESAT) || defined(HAVE_UTIMENSAT)
-    if ((dir_fd != DEFAULT_DIR_FD) || (!follow_symlinks))
         result = utime_dir_fd(&utime, dir_fd, path->narrow, follow_symlinks);
-    else
+#else
+#ifdef UTIME_HAVE_NOFOLLOW_SYMLINKS
+        if (!follow_symlinks)
+            result = utime_nofollow_symlinks(&utime, path->narrow);
+        else
 #endif
-
-#if defined(HAVE_FUTIMES) || defined(HAVE_FUTIMENS)
-    if (path->fd != -1)
-        result = utime_fd(&utime, path->fd);
-    else
+            result = utime_default(&utime, path->narrow);
 #endif
-
-    result = utime_default(&utime, path->narrow);
+    }
 
     Py_END_ALLOW_THREADS
 
@@ -7141,11 +7083,10 @@
 
     Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_READLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        length = readlinkat(dir_fd, path.narrow, buffer, sizeof(buffer));
-    else
+    length = readlinkat(dir_fd, path.narrow, buffer, sizeof(buffer));
+#else
+    length = readlink(path.narrow, buffer, sizeof(buffer));
 #endif
-        length = readlink(path.narrow, buffer, sizeof(buffer));
     Py_END_ALLOW_THREADS
 
     if (length < 0) {
@@ -7467,11 +7408,10 @@
 
     Py_BEGIN_ALLOW_THREADS
 #if HAVE_SYMLINKAT
-    if (dir_fd != DEFAULT_DIR_FD)
-        result = symlinkat(src->narrow, dir_fd, dst->narrow);
-    else
+    result = symlinkat(src->narrow, dir_fd, dst->narrow);
+#else
+    result = symlink(src->narrow, dst->narrow);
 #endif
-        result = symlink(src->narrow, dst->narrow);
     Py_END_ALLOW_THREADS
 
     if (result)
@@ -7765,13 +7705,12 @@
         if (path->wide)
             fd = _wopen(path->wide, flags, mode);
         else
-#endif
-#ifdef HAVE_OPENAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            fd = openat(dir_fd, path->narrow, flags, mode);
-        else
-#endif
             fd = open(path->narrow, flags, mode);
+#elif defined(HAVE_OPENAT)
+        fd = openat(dir_fd, path->narrow, flags, mode);
+#else
+        fd = open(path->narrow, flags, mode);
+#endif
         Py_END_ALLOW_THREADS
     } while (fd < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
     _Py_END_SUPPRESS_IPH
@@ -8723,11 +8662,10 @@
     do {
         Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_MKFIFOAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            result = mkfifoat(dir_fd, path->narrow, mode);
-        else
+        result = mkfifoat(dir_fd, path->narrow, mode);
+#else
+        result = mkfifo(path->narrow, mode);
 #endif
-            result = mkfifo(path->narrow, mode);
         Py_END_ALLOW_THREADS
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
@@ -8775,11 +8713,10 @@
     do {
         Py_BEGIN_ALLOW_THREADS
 #ifdef HAVE_MKNODAT
-        if (dir_fd != DEFAULT_DIR_FD)
-            result = mknodat(dir_fd, path->narrow, mode, device);
-        else
+        result = mknodat(dir_fd, path->narrow, mode, device);
+#else
+        result = mknod(path->narrow, mode, device);
 #endif
-            result = mknod(path->narrow, mode, device);
         Py_END_ALLOW_THREADS
     } while (result != 0 && errno == EINTR &&
              !(async_err = PyErr_CheckSignals()));
@@ -11535,9 +11472,9 @@
     path = PyBytes_AS_STRING(bytes);
 
     if (follow_symlinks)
-        result = STAT(path, &st);
+        result = stat(path, &st);
     else
-        result = LSTAT(path, &st);
+        result = lstat(path, &st);
     Py_DECREF(bytes);
 
     if (result != 0)
@@ -13334,7 +13271,6 @@
     int ignored;
     fd_specified("", -1);
     follow_symlinks_specified("", 1);
-    dir_fd_and_follow_symlinks_invalid("chmod", DEFAULT_DIR_FD, 1);
     dir_fd_converter(Py_None, &ignored);
     dir_fd_unavailable(Py_None, &ignored);
     }
