--- Include/fileutils.h
+++ Include/fileutils.h
@@ -5,6 +5,8 @@
 extern "C" {
 #endif
 
+#include "pyconfig.h"
+
 PyAPI_FUNC(PyObject *) _Py_device_encoding(int);
 
 PyAPI_FUNC(wchar_t *) Py_DecodeLocale(
@@ -53,6 +55,7 @@
     struct stat *status);
 
 #ifndef Py_LIMITED_API
+#ifdef HAVE_OPEN
 PyAPI_FUNC(int) _Py_open(
     const char *pathname,
     int flags);
@@ -60,6 +63,7 @@
 PyAPI_FUNC(int) _Py_open_noraise(
     const char *pathname,
     int flags);
+#endif /* HAVE_OPEN */
 #endif
 
 PyAPI_FUNC(FILE *) _Py_wfopen(
--- Include/pyerrors.h
+++ Include/pyerrors.h
@@ -345,6 +345,7 @@
     int lineno,
     int col_offset);
 #endif
+#ifdef HAVE_OPEN
 PyAPI_FUNC(PyObject *) PyErr_ProgramText(
     const char *filename,       /* decoded from the filesystem encoding */
     int lineno);
@@ -353,6 +354,7 @@
     PyObject *filename,
     int lineno);
 #endif
+#endif /* HAVE_OPEN */
 
 /* The following functions are used to create and modify unicode
    exceptions from C */
--- Modules/_io/fileio.c
+++ Modules/_io/fileio.c
@@ -392,7 +392,11 @@
                     self->fd = _wopen(widename, flags, 0666);
                 else
 #endif
+#ifdef HAVE_OPEN
                     self->fd = open(name, flags, 0666);
+#else
+                    {self->fd = -1; errno = ENOSYS;}
+#endif /* HAVE_OPEN */
                 Py_END_ALLOW_THREADS
             } while (self->fd < 0 && errno == EINTR &&
                      !(async_err = PyErr_CheckSignals()));
--- Python/ast.c
+++ Python/ast.c
@@ -659,7 +659,11 @@
 {
     PyObject *value, *errstr, *loc, *tmp;
 
+#ifdef HAVE_OPEN
     loc = PyErr_ProgramTextObject(c->c_filename, LINENO(n));
+#else
+    loc = NULL;
+#endif
     if (!loc) {
         Py_INCREF(Py_None);
         loc = Py_None;
--- Python/compile.c
+++ Python/compile.c
@@ -4289,7 +4289,11 @@
     PyObject *loc;
     PyObject *u = NULL, *v = NULL;
 
+#ifdef HAVE_OPEN
     loc = PyErr_ProgramTextObject(c->c_filename, c->u->u_lineno);
+#else
+    loc = NULL;
+#endif
     if (!loc) {
         Py_INCREF(Py_None);
         loc = Py_None;
--- Python/errors.c
+++ Python/errors.c
@@ -1020,12 +1020,14 @@
         if (_PyObject_SetAttrId(v, &PyId_filename, filename))
             PyErr_Clear();
 
+#ifdef HAVE_OPEN
         tmp = PyErr_ProgramTextObject(filename, lineno);
         if (tmp) {
             if (_PyObject_SetAttrId(v, &PyId_text, tmp))
                 PyErr_Clear();
             Py_DECREF(tmp);
         }
+#endif
     }
     if (_PyObject_SetAttrId(v, &PyId_offset, Py_None)) {
         PyErr_Clear();
@@ -1107,6 +1109,7 @@
     return NULL;
 }
 
+#ifdef HAVE_OPEN
 PyObject *
 PyErr_ProgramText(const char *filename, int lineno)
 {
@@ -1130,6 +1133,7 @@
     }
     return err_programtext(fp, lineno);
 }
+#endif /* HAVE_OPEN */
 
 #ifdef __cplusplus
 }
--- Python/fileutils.c
+++ Python/fileutils.c
@@ -942,6 +942,7 @@
     return set_inheritable(fd, inheritable, 1, atomic_flag_works);
 }
 
+#ifdef HAVE_OPEN
 static int
 _Py_open_impl(const char *pathname, int flags, int gil_held)
 {
@@ -1160,6 +1161,7 @@
     }
     return f;
 }
+#endif /* HAVE_OPEN */
 
 /* Read count bytes from fd into buf.
 
