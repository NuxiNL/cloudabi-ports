--- glib/gbookmarkfile.c
+++ glib/gbookmarkfile.c
@@ -1669,6 +1669,7 @@
  *
  * Since: 2.12
  */
+#ifndef __CloudABI__
 gboolean
 g_bookmark_file_load_from_file (GBookmarkFile  *bookmark,
 				const gchar    *filename,
@@ -1692,6 +1693,7 @@
   g_free (buffer);
   return ret;
 }
+#endif
 
 
 /* Iterates through all the directories in *dirs trying to
@@ -1781,6 +1783,7 @@
  *
  * Since: 2.12
  */
+#ifndef __CloudABI__
 gboolean
 g_bookmark_file_load_from_data_dirs (GBookmarkFile  *bookmark,
 				     const gchar    *file,
@@ -1843,6 +1846,7 @@
 
   return found_file;
 }
+#endif
 
 
 /**
@@ -1892,6 +1896,7 @@
  *
  * Since: 2.12
  */
+#ifndef __CloudABI__
 gboolean
 g_bookmark_file_to_file (GBookmarkFile  *bookmark,
 			 const gchar    *filename,
@@ -1929,6 +1934,7 @@
   
   return retval;
 }
+#endif
 
 static BookmarkItem *
 g_bookmark_file_lookup_item (GBookmarkFile *bookmark,
--- glib/gbookmarkfile.h
+++ glib/gbookmarkfile.h
@@ -82,28 +82,34 @@
 GLIB_AVAILABLE_IN_ALL
 void           g_bookmark_file_free                (GBookmarkFile  *bookmark);
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean       g_bookmark_file_load_from_file      (GBookmarkFile  *bookmark,
 						    const gchar    *filename,
 						    GError        **error);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gboolean       g_bookmark_file_load_from_data      (GBookmarkFile  *bookmark,
 						    const gchar    *data,
 						    gsize           length,
 						    GError        **error);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean       g_bookmark_file_load_from_data_dirs (GBookmarkFile  *bookmark,
 						    const gchar    *file,
 						    gchar         **full_path,
 						    GError        **error);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gchar *        g_bookmark_file_to_data             (GBookmarkFile  *bookmark,
 						    gsize          *length,
 						    GError        **error) G_GNUC_MALLOC;
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean       g_bookmark_file_to_file             (GBookmarkFile  *bookmark,
 						    const gchar    *filename,
 						    GError        **error);
+#endif
 
 GLIB_AVAILABLE_IN_ALL
 void           g_bookmark_file_set_title           (GBookmarkFile  *bookmark,
--- glib/gcharset.c
+++ glib/gcharset.c
@@ -233,6 +233,7 @@
 read_aliases (gchar      *file,
               GHashTable *alias_table)
 {
+#ifndef __CloudABI__
   FILE *fp;
   char buf[256];
 
@@ -278,6 +279,7 @@
       }
     }
   fclose (fp);
+#endif
 }
 
 #endif
--- glib/gfileutils.c
+++ glib/gfileutils.c
@@ -205,6 +205,7 @@
  *
  * Since: 2.8
  */
+#ifndef __CloudABI__
 int
 g_mkdir_with_parents (const gchar *pathname,
 		      int          mode)
@@ -458,6 +459,7 @@
   return FALSE;
 #endif
 }
+#endif
 
 G_DEFINE_QUARK (g-file-error-quark, g_file_error)
 
@@ -846,6 +848,7 @@
   return FALSE;
 }
 
+#ifndef __CloudABI__
 static gboolean
 get_contents_posix (const gchar  *filename,
                     gchar       **contents,
@@ -916,6 +919,7 @@
       return retval;
     }
 }
+#endif
 
 #else  /* G_OS_WIN32 */
 
@@ -969,6 +973,7 @@
  *
  * Returns: %TRUE on success, %FALSE if an error occurred
  **/
+#ifndef __CloudABI__
 gboolean
 g_file_get_contents (const gchar  *filename,
                      gchar       **contents,
@@ -1639,6 +1644,7 @@
   else
     return fulltemplate;
 }
+#endif
 
 static gchar *
 g_build_path_va (const gchar  *separator,
@@ -2022,6 +2028,7 @@
  *
  * Since: 2.4
  */
+#ifndef __CloudABI__
 gchar *
 g_file_read_link (const gchar  *filename,
 	          GError      **error)
@@ -2066,6 +2073,7 @@
   return NULL;
 #endif
 }
+#endif
 
 /**
  * g_path_is_absolute:
@@ -2440,6 +2448,7 @@
  *
  * Returns: (type filename): the current directory
  */
+#ifndef __CloudABI__
 gchar *
 g_get_current_dir (void)
 {
@@ -2507,6 +2516,7 @@
 
 #endif /* !G_OS_WIN32 */
 }
+#endif
 
 
 /* NOTE : Keep this part last to ensure nothing in this file uses thn
--- glib/gfileutils.h
+++ glib/gfileutils.h
@@ -78,6 +78,7 @@
 GLIB_AVAILABLE_IN_ALL
 GFileError g_file_error_from_errno (gint err_no);
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean g_file_test         (const gchar  *filename,
                               GFileTest     test);
@@ -118,6 +119,7 @@
 GLIB_AVAILABLE_IN_2_30
 gchar   *g_dir_make_tmp       (const gchar  *tmpl,
                                GError      **error);
+#endif
 
 GLIB_AVAILABLE_IN_ALL
 gchar   *g_build_path         (const gchar *separator,
@@ -133,9 +135,11 @@
 GLIB_AVAILABLE_IN_ALL
 gchar   *g_build_filenamev    (gchar      **args) G_GNUC_MALLOC;
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gint     g_mkdir_with_parents (const gchar *pathname,
                                gint         mode);
+#endif
 
 #ifdef G_OS_WIN32
 
@@ -170,8 +174,10 @@
 #define g_dirname g_path_get_dirname
 #endif
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gchar *g_get_current_dir   (void);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gchar *g_path_get_basename (const gchar *file_name) G_GNUC_MALLOC;
 GLIB_AVAILABLE_IN_ALL
--- glib/giochannel.h
+++ glib/giochannel.h
@@ -287,10 +287,12 @@
 					   gint64        offset,
 					   GSeekType     type,
 					   GError      **error);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 GIOChannel* g_io_channel_new_file         (const gchar  *filename,
 					   const gchar  *mode,
 					   GError      **error);
+#endif
 
 /* Error handling */
 
--- glib/giounix.c
+++ glib/giounix.c
@@ -441,6 +441,7 @@
   return flags;
 }
 
+#ifndef __CloudABI__
 GIOChannel *
 g_io_channel_new_file (const gchar *filename,
                        const gchar *mode,
@@ -578,6 +579,7 @@
   ((GIOUnixChannel *) channel)->fd = fid;
   return channel;
 }
+#endif
 
 /**
  * g_io_channel_unix_new:
--- glib/gkeyfile.c
+++ glib/gkeyfile.c
@@ -486,10 +486,12 @@
   gchar *value;
 };
 
+#ifndef __CloudABI__
 static gint                  find_file_in_data_dirs            (const gchar            *file,
 								const gchar           **data_dirs,
 								gchar                 **output_file,
 								GError                **error);
+#endif
 static gboolean              g_key_file_load_from_fd           (GKeyFile               *key_file,
 								gint                    fd,
 								GKeyFileFlags           flags,
@@ -671,6 +673,7 @@
  * returns the file descriptor to the open file.  It also
  * outputs the absolute path of the file in output_file.
  */
+#ifndef __CloudABI__
 static gint
 find_file_in_data_dirs (const gchar   *file,
                         const gchar  **dirs,
@@ -745,6 +748,7 @@
 
   return fd;
 }
+#endif
 
 static gboolean
 g_key_file_load_from_fd (GKeyFile       *key_file,
@@ -836,6 +840,7 @@
  *
  * Since: 2.6
  **/
+#ifndef __CloudABI__
 gboolean
 g_key_file_load_from_file (GKeyFile       *key_file,
 			   const gchar    *file,
@@ -869,6 +874,7 @@
 
   return TRUE;
 }
+#endif
 
 /**
  * g_key_file_load_from_data:
@@ -976,6 +982,7 @@
  *
  * Since: 2.14
  **/
+#ifndef __CloudABI__
 gboolean
 g_key_file_load_from_dirs (GKeyFile       *key_file,
                            const gchar    *file,
@@ -1088,6 +1095,7 @@
 
   return found_file;
 }
+#endif
 
 /**
  * g_key_file_ref: (skip)
@@ -4457,6 +4465,7 @@
  *
  * Since: 2.40
  */
+#ifndef __CloudABI__
 gboolean
 g_key_file_save_to_file (GKeyFile     *key_file,
                          const gchar  *filename,
@@ -4478,3 +4487,4 @@
 
   return success;
 }
+#endif
--- glib/gkeyfile.h
+++ glib/gkeyfile.h
@@ -66,11 +66,13 @@
 GLIB_AVAILABLE_IN_ALL
 void      g_key_file_set_list_separator     (GKeyFile             *key_file,
 					     gchar                 separator);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean  g_key_file_load_from_file         (GKeyFile             *key_file,
 					     const gchar          *file,
 					     GKeyFileFlags         flags,
 					     GError              **error);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gboolean  g_key_file_load_from_data         (GKeyFile             *key_file,
 					     const gchar          *data,
@@ -82,6 +84,7 @@
                                              GBytes               *bytes,
                                              GKeyFileFlags         flags,
                                              GError              **error);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gboolean g_key_file_load_from_dirs          (GKeyFile             *key_file,
 					     const gchar	  *file,
@@ -95,14 +98,17 @@
 					     gchar               **full_path,
 					     GKeyFileFlags         flags,
 					     GError              **error);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gchar    *g_key_file_to_data                (GKeyFile             *key_file,
 					     gsize                *length,
 					     GError              **error) G_GNUC_MALLOC;
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_2_40
 gboolean  g_key_file_save_to_file           (GKeyFile             *key_file,
                                              const gchar          *filename,
                                              GError              **error);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gchar    *g_key_file_get_start_group        (GKeyFile             *key_file) G_GNUC_MALLOC;
 GLIB_AVAILABLE_IN_ALL
--- glib/gmappedfile.c
+++ glib/gmappedfile.c
@@ -239,6 +239,7 @@
  *
  * Since: 2.8
  */
+#ifndef __CloudABI__
 GMappedFile *
 g_mapped_file_new (const gchar  *filename,
 		   gboolean      writable,
@@ -272,6 +273,7 @@
 
   return file;
 }
+#endif
 
 
 /**
--- glib/gmappedfile.h
+++ glib/gmappedfile.h
@@ -31,10 +31,12 @@
 
 typedef struct _GMappedFile GMappedFile;
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 GMappedFile *g_mapped_file_new          (const gchar  *filename,
 				         gboolean      writable,
 				         GError      **error) G_GNUC_MALLOC;
+#endif
 GLIB_AVAILABLE_IN_ALL
 GMappedFile *g_mapped_file_new_from_fd  (gint          fd,
 					 gboolean      writable,
--- glib/gstdio.c
+++ glib/gstdio.c
@@ -38,7 +38,9 @@
 #include <io.h>
 #include <sys/utime.h>
 #else
+#ifndef __CloudABI__
 #include <utime.h>
+#endif
 #include <errno.h>
 #endif
 
@@ -79,6 +81,7 @@
  * 
  * Since: 2.8
  */
+#ifndef __CloudABI__
 int
 g_access (const gchar *filename,
 	  int          mode)
@@ -846,6 +849,7 @@
   return utime (filename, utb);
 #endif
 }
+#endif
 
 /**
  * g_close:
--- glib/gstdio.h
+++ glib/gstdio.h
@@ -51,6 +51,7 @@
 
 #endif
 
+#ifndef __CloudABI__
 #if defined(G_OS_UNIX) && !defined(G_STDIO_NO_WRAP_ON_UNIX)
 
 /* Just pass on to the system functions, so there's no potential for data
@@ -161,6 +162,7 @@
 		 struct utimbuf *utb);
 
 #endif /* G_OS_UNIX */
+#endif
 
 GLIB_AVAILABLE_IN_2_36
 gboolean g_close (gint       fd,
--- glib/gtimezone.c
+++ glib/gtimezone.c
@@ -393,6 +393,7 @@
 }
 
 #ifdef G_OS_UNIX
+#ifndef __CloudABI__
 static GBytes*
 zone_info_unix (const gchar *identifier)
 {
@@ -435,6 +436,7 @@
   g_free (filename);
   return zoneinfo;
 }
+#endif
 
 static void
 init_zone_from_iana_info (GTimeZone *gtz, GBytes *zoneinfo)
@@ -1384,6 +1386,7 @@
       g_free (rules);
     }
 
+#ifndef __CloudABI__
   if (tz->t_info == NULL)
     {
 #ifdef G_OS_UNIX
@@ -1430,6 +1433,7 @@
         }
 #endif
     }
+#endif
 
   if (tz->t_info != NULL)
     {
--- glib/gutils.c
+++ glib/gutils.c
@@ -40,7 +40,9 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #ifdef G_OS_UNIX
+#ifndef __CloudABI__
 #include <pwd.h>
+#endif
 #include <unistd.h>
 #endif
 #include <sys/types.h>
@@ -321,6 +323,7 @@
  * Returns: (type filename): a newly-allocated string with the absolute path,
  *     or %NULL
  **/
+#ifndef __CloudABI__
 #ifdef G_OS_WIN32
 static gchar *
 inner_find_program_in_path (const gchar *program)
@@ -478,6 +481,7 @@
 
   return NULL;
 }
+#endif
 
 /* The functions below are defined this way for compatibility reasons.
  * See the note in gutils.h.
@@ -540,6 +544,7 @@
   return g_bit_storage_impl (number);
 }
 
+#ifndef __CloudABI__
 G_LOCK_DEFINE_STATIC (g_utils_global);
 
 typedef struct
@@ -993,6 +998,7 @@
 
   return hostname;
 }
+#endif
 
 G_LOCK_DEFINE_STATIC (g_prgname);
 static gchar *g_prgname = NULL;
@@ -1150,6 +1156,7 @@
  *               or freed.
  * Since: 2.6
  **/
+#ifndef __CloudABI__
 const gchar *
 g_get_user_data_dir (void)
 {
@@ -2036,6 +2043,7 @@
 
   return (const gchar * const *) conf_dir_vector;
 }
+#endif
 
 /**
  * g_nullify_pointer:
--- glib/gutils.h
+++ glib/gutils.h
@@ -47,6 +47,7 @@
 #  endif /* va_list is a pointer */
 #endif /* !G_VA_COPY */
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_get_user_name        (void);
 GLIB_AVAILABLE_IN_ALL
@@ -57,6 +58,7 @@
 const gchar *         g_get_tmp_dir          (void);
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_get_host_name	     (void);
+#endif
 GLIB_AVAILABLE_IN_ALL
 const gchar *         g_get_prgname          (void);
 GLIB_AVAILABLE_IN_ALL
@@ -66,6 +68,7 @@
 GLIB_AVAILABLE_IN_ALL
 void                  g_set_application_name (const gchar *application_name);
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 void      g_reload_user_special_dirs_cache     (void);
 GLIB_AVAILABLE_IN_ALL
@@ -76,6 +79,7 @@
 const gchar *         g_get_user_cache_dir     (void);
 GLIB_AVAILABLE_IN_ALL
 const gchar * const * g_get_system_data_dirs   (void);
+#endif
 
 #ifdef G_OS_WIN32
 /* This functions is not part of the public GLib API */
@@ -96,11 +100,13 @@
 #define g_get_system_data_dirs _g_win32_get_system_data_dirs
 #endif
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 const gchar * const * g_get_system_config_dirs (void);
 
 GLIB_AVAILABLE_IN_ALL
 const gchar * g_get_user_runtime_dir (void);
+#endif
 
 /**
  * GUserDirectory:
@@ -137,8 +143,10 @@
   G_USER_N_DIRECTORIES
 } GUserDirectory;
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 const gchar * g_get_user_special_dir (GUserDirectory directory);
+#endif
 
 /**
  * GDebugKey:
--- glib/libcharset/localcharset.c
+++ glib/libcharset/localcharset.c
@@ -111,7 +111,9 @@
   cp = charset_aliases;
   if (cp == NULL)
     {
-#if !(defined VMS || defined WIN32_NATIVE || defined __CYGWIN__)
+#ifdef __CloudABI__
+      cp = "";
+#elif !(defined VMS || defined WIN32_NATIVE || defined __CYGWIN__)
       FILE *fp;
       const char *dir;
       const char *base = "charset.alias";
--- gmodule/gmodule.c
+++ gmodule/gmodule.c
@@ -339,6 +339,7 @@
 static gchar*
 parse_libtool_archive (const gchar* libtool_name)
 {
+#ifndef __CloudABI__
   const guint TOKEN_DLNAME = G_TOKEN_LAST + 1;
   const guint TOKEN_INSTALLED = G_TOKEN_LAST + 2;
   const guint TOKEN_LIBDIR = G_TOKEN_LAST + 3;
@@ -424,6 +425,9 @@
   close (fd);
 
   return name;
+#else
+  return NULL;
+#endif
 }
 
 static inline gboolean
@@ -517,6 +521,7 @@
     }
 
   /* check whether we have a readable file right away */
+#ifndef __CloudABI__
   if (g_file_test (file_name, G_FILE_TEST_IS_REGULAR))
     name = g_strdup (file_name);
   /* try completing file name with standard library suffix */
@@ -539,6 +544,7 @@
 	  name = NULL;
 	}
     }
+#endif
   /* we can't access() the file, lets hope the platform backends finds
    * it via library paths
    */
