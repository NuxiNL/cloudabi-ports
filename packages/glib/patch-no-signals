--- glib/glib-unix.c
+++ glib/glib-unix.c
@@ -212,6 +212,7 @@
  *
  * Since: 2.30
  */
+#ifndef __CloudABI__
 GSource *
 g_unix_signal_source_new (int signum)
 {
@@ -281,6 +282,7 @@
 {
   return g_unix_signal_add_full (G_PRIORITY_DEFAULT, signum, handler, user_data, NULL);
 }
+#endif
 
 typedef struct
 {
--- glib/glib-unix.h
+++ glib/glib-unix.h
@@ -66,6 +66,7 @@
                                     gboolean   nonblock,
                                     GError   **error);
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_2_30
 GSource *g_unix_signal_source_new  (gint signum);
 
@@ -80,6 +81,7 @@
 guint    g_unix_signal_add         (gint        signum,
                                     GSourceFunc handler,
                                     gpointer    user_data);
+#endif
 
 /**
  * GUnixFDSourceFunc:
--- glib/gmain-internal.h
+++ glib/gmain-internal.h
@@ -26,7 +26,9 @@
 
 G_BEGIN_DECLS
 
+#ifndef __CloudABI__
 GSource *_g_main_create_unix_signal_watch (int signum);
+#endif
 
 G_END_DECLS
 
--- glib/gmain.c
+++ glib/gmain.c
@@ -448,7 +448,7 @@
 G_LOCK_DEFINE_STATIC (main_loop);
 static GMainContext *default_main_context;
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(__CloudABI__)
 
 
 /* UNIX signals work by marking one of these variables then waking the
@@ -4957,6 +4957,7 @@
   G_UNLOCK(main_context_list);
 }
 
+#ifndef __CloudABI__
 static void
 dispatch_unix_signals_unlocked (void)
 {
@@ -5055,6 +5056,7 @@
   dispatch_unix_signals_unlocked ();
   G_UNLOCK(unix_signal_lock);
 }
+#endif
 
 static gboolean
 g_child_watch_prepare (GSource *source,
@@ -5122,6 +5124,7 @@
   return again;
 }
 
+#ifndef __CloudABI__
 static void
 ref_unix_signal_handler_unlocked (int signum)
 {
@@ -5198,6 +5201,7 @@
   unref_unix_signal_handler_unlocked (SIGCHLD);
   G_UNLOCK (unix_signal_lock);
 }
+#endif
 
 #endif /* G_OS_WIN32 */
 
@@ -5224,7 +5228,7 @@
   return FALSE;
 }
 
-#ifndef G_OS_WIN32
+#if !defined(G_OS_WIN32) && !defined(__CloudABI__)
 
 static void
 g_unix_signal_handler (int signum)
@@ -5273,6 +5277,7 @@
  *
  * Since: 2.4
  **/
+#ifndef __CloudABI__
 GSource *
 g_child_watch_source_new (GPid pid)
 {
@@ -5407,6 +5412,7 @@
 {
   return g_child_watch_add_full (G_PRIORITY_DEFAULT, pid, function, data, NULL);
 }
+#endif
 
 
 /* Idle functions */
@@ -5671,7 +5677,7 @@
     {
       g_main_context_iteration (glib_worker_context, TRUE);
 
-#ifdef G_OS_UNIX
+#if defined(G_OS_UNIX) && !defined(__CloudABI__)
       if (any_unix_signal_pending)
         dispatch_unix_signals ();
 #endif
@@ -5688,7 +5694,7 @@
   if (g_once_init_enter (&initialised))
     {
       /* mask all signals in the worker thread */
-#ifdef G_OS_UNIX
+#if defined(G_OS_UNIX) && !defined(__CloudABI__)
       sigset_t prev_mask;
       sigset_t all;
 
@@ -5697,7 +5703,7 @@
 #endif
       glib_worker_context = g_main_context_new ();
       g_thread_new ("gmain", glib_worker_main, NULL);
-#ifdef G_OS_UNIX
+#if defined(G_OS_UNIX) && !defined(__CloudABI__)
       pthread_sigmask (SIG_SETMASK, &prev_mask, NULL);
 #endif
       g_once_init_leave (&initialised, TRUE);
--- glib/gmain.h
+++ glib/gmain.h
@@ -523,8 +523,10 @@
  */
 GLIB_AVAILABLE_IN_ALL
 GSource *g_idle_source_new        (void);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 GSource *g_child_watch_source_new (GPid pid);
+#endif
 GLIB_AVAILABLE_IN_ALL
 GSource *g_timeout_source_new     (guint interval);
 GLIB_AVAILABLE_IN_ALL
@@ -570,6 +572,7 @@
 guint    g_timeout_add_seconds      (guint           interval,
                                      GSourceFunc     function,
                                      gpointer        data);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 guint    g_child_watch_add_full     (gint            priority,
                                      GPid            pid,
@@ -580,6 +583,7 @@
 guint    g_child_watch_add          (GPid            pid,
                                      GChildWatchFunc function,
                                      gpointer        data);
+#endif
 GLIB_AVAILABLE_IN_ALL
 guint    g_idle_add                 (GSourceFunc     function,
                                      gpointer        data);
@@ -607,7 +611,9 @@
 GLIB_VAR GSourceFuncs g_child_watch_funcs;
 GLIB_VAR GSourceFuncs g_idle_funcs;
 #ifdef G_OS_UNIX
+#ifndef __CloudABI__
 GLIB_VAR GSourceFuncs g_unix_signal_funcs;
+#endif
 GLIB_VAR GSourceFuncs g_unix_fd_source_funcs;
 #endif
 
--- gobject/gsourceclosure.c
+++ gobject/gsourceclosure.c
@@ -206,7 +206,7 @@
         closure_callback = (GSourceFunc)g_unix_fd_source_closure_callback;
 #endif
       else if (source->source_funcs == &g_timeout_funcs ||
-#ifdef G_OS_UNIX
+#if defined(G_OS_UNIX) && !defined(__CloudABI__)
                source->source_funcs == &g_unix_signal_funcs ||
 #endif
                source->source_funcs == &g_idle_funcs)
@@ -251,8 +251,10 @@
   if (!source->source_funcs->closure_callback &&
 #ifdef G_OS_UNIX
       source->source_funcs != &g_unix_fd_source_funcs &&
+#ifndef __CloudABI__
       source->source_funcs != &g_unix_signal_funcs &&
 #endif
+#endif
       source->source_funcs != &g_child_watch_funcs &&
       source->source_funcs != &g_io_watch_funcs &&
       source->source_funcs != &g_timeout_funcs &&
@@ -274,7 +276,7 @@
       if (marshal)
 	g_closure_set_marshal (closure, marshal);
       else if (source->source_funcs == &g_idle_funcs ||
-#ifdef G_OS_UNIX
+#if defined(G_OS_UNIX) && !defined(__CloudABI__)
                source->source_funcs == &g_unix_signal_funcs ||
 #endif
                source->source_funcs == &g_timeout_funcs)
