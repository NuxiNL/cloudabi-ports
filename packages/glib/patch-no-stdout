--- glib/gmessages.c
+++ glib/gmessages.c
@@ -1143,7 +1143,7 @@
   if ((log_level & G_LOG_FLAG_FATAL) != 0 && !g_test_initialized ())
     win32_keep_fatal_message = TRUE;
 #endif
-  return to_stdout ? stdout : stderr;
+  return stderr;
 }
 
 typedef struct {
@@ -1364,11 +1364,7 @@
 static FILE *
 log_level_to_file (GLogLevelFlags log_level)
 {
-  if (log_level & (G_LOG_LEVEL_ERROR | G_LOG_LEVEL_CRITICAL |
-                   G_LOG_LEVEL_WARNING | G_LOG_LEVEL_MESSAGE))
-    return stderr;
-  else
-    return stdout;
+  return stderr;
 }
 
 static const gchar *
@@ -2859,6 +2855,7 @@
  * use g_log(), g_log_structured(), or the convenience macros g_message(),
  * g_warning() and g_error().
  */
+#ifndef __CloudABI__
 void
 g_print (const gchar *format,
          ...)
@@ -2896,6 +2893,7 @@
     }
   g_free (string);
 }
+#endif
 
 /**
  * g_set_printerr_handler:
--- glib/gmessages.h
+++ glib/gmessages.h
@@ -470,9 +470,11 @@
  * These are called with the complete formatted string to output.
  */
 typedef void    (*GPrintFunc)           (const gchar    *string);
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 void            g_print                 (const gchar    *format,
                                          ...) G_GNUC_PRINTF (1, 2);
+#endif
 GLIB_AVAILABLE_IN_ALL
 GPrintFunc      g_set_print_handler     (GPrintFunc      func);
 GLIB_AVAILABLE_IN_ALL
--- glib/gnulib/printf.c
+++ glib/gnulib/printf.c
@@ -32,6 +32,7 @@
 #include "vasnprintf.h"
 #include "printf.h"
 
+#ifndef __CloudABI__
 int _g_gnulib_printf (char const *format, ...)
 {
   va_list args;
@@ -43,6 +44,7 @@
 
   return retval;
 }
+#endif
 
 int _g_gnulib_fprintf (FILE *file, char const *format, ...)
 {
@@ -80,10 +82,12 @@
   return retval;
 }
 
+#ifndef __CloudABI__
 int _g_gnulib_vprintf (char const *format, va_list args)         
 {
   return _g_gnulib_vfprintf (stdout, format, args);
 }
+#endif
 
 int _g_gnulib_vfprintf (FILE *file, char const *format, va_list args)
 {
--- glib/gnulib/printf.h
+++ glib/gnulib/printf.h
@@ -20,8 +20,10 @@
 #include <stdarg.h>
 #include <stdio.h>
 
+#ifndef __CloudABI__
 int _g_gnulib_printf    (char const *format, 
 			 ...);
+#endif
 int _g_gnulib_fprintf   (FILE        *file,
 			 char const *format, 
 			 ...);
@@ -32,8 +34,10 @@
 			 size_t       n,
 			 char const *format, 
 			 ...);
+#ifndef __CloudABI__
 int _g_gnulib_vprintf   (char const *format,
 			 va_list      args);            
+#endif
 int _g_gnulib_vfprintf  (FILE        *file,
 			 char const *format,
 			 va_list      args);
--- glib/goption.c
+++ glib/goption.c
@@ -1088,7 +1088,11 @@
   gchar *help;
 
   help = g_option_context_get_help (context, main_help, group);
+#ifndef __CloudABI__
   g_print ("%s", help);
+#else
+  g_printerr ("%s", help);
+#endif
   g_free (help);
 
   exit (0);
--- glib/gprintf.c
+++ glib/gprintf.c
@@ -42,6 +42,7 @@
  *
  * Since: 2.2
  **/
+#ifndef __CloudABI__
 gint
 g_printf (gchar const *format,
 	  ...)
@@ -55,6 +56,7 @@
   
   return retval;
 }
+#endif
 
 /**
  * g_fprintf:
@@ -180,6 +182,7 @@
  *
  * Since: 2.2
  **/
+#ifndef __CloudABI__
 gint
 g_vprintf (gchar const *format,
 	   va_list      args)
@@ -188,6 +191,7 @@
 
   return _g_vprintf (format, args);
 }
+#endif
 
 /**
  * g_vfprintf:
--- glib/gprintf.h
+++ glib/gprintf.h
@@ -24,9 +24,11 @@
 
 G_BEGIN_DECLS
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gint                  g_printf    (gchar const *format,
                                    ...) G_GNUC_PRINTF (1, 2);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gint                  g_fprintf   (FILE        *file,
 				   gchar const *format,
@@ -36,9 +38,11 @@
 				   gchar const *format,
 				   ...) G_GNUC_PRINTF (2, 3);
 
+#ifndef __CloudABI__
 GLIB_AVAILABLE_IN_ALL
 gint                  g_vprintf   (gchar const *format,
                                    va_list      args) G_GNUC_PRINTF(1, 0);
+#endif
 GLIB_AVAILABLE_IN_ALL
 gint                  g_vfprintf  (FILE        *file,
 				   gchar const *format,
--- glib/gstrfuncs.c
+++ glib/gstrfuncs.c
@@ -1291,7 +1291,11 @@
         {
           msg = g_locale_to_utf8 (msg, -1, NULL, NULL, &error);
           if (error)
+#ifndef __CloudABI__
             g_print ("%s\n", error->message);
+#else
+            g_printerr ("%s\n", error->message);
+#endif
         }
       else if (msg == (const gchar *)buf)
         msg = g_strdup (buf);
--- glib/gtestutils.c
+++ glib/gtestutils.c
@@ -805,6 +805,9 @@
     {
     case G_TEST_LOG_START_BINARY:
       if (test_tap_log)
+#ifdef __CloudABI__
+#define g_print g_printerr
+#endif
         g_print ("# random seed: %s\n", string2);
       else if (g_test_verbose())
         g_print ("GTest: random seed: %s\n", string2);
@@ -1064,7 +1067,11 @@
                strcmp ("-h", argv[i]) == 0 ||
                strcmp ("--help", argv[i]) == 0)
         {
+#ifndef __CloudABI__
           printf ("Usage:\n"
+#else
+          fprintf (stderr, "Usage:\n"
+#endif
                   "  %s [OPTION...]\n\n"
                   "Help Options:\n"
                   "  -h, --help                     Show help options\n\n"
@@ -2677,7 +2684,11 @@
     {
       g_string_append_len (data->stdout_str, buf, nread);
       if (data->echo_stdout)
+#ifndef __CloudABI__
         echo_file = stdout;
+#else
+        echo_file = stderr;
+#endif
     }
   else
     {
--- tests/gobject/performance-threaded.c
+++ tests/gobject/performance-threaded.c
@@ -281,6 +281,9 @@
     }
   avg = avg / array->len * 1000;
 
+#ifdef __CloudABI__
+#define g_print g_printerr
+#endif
   g_print ("  %u runs, min/avg/max = %.3f/%.3f/%.3f ms\n", array->len, min, avg, max);
 }
 
--- tests/gobject/performance.c
+++ tests/gobject/performance.c
@@ -68,6 +68,9 @@
   double elapsed, min_elapsed, max_elapsed, avg_elapsed, factor;
   GTimer *timer;
 
+#ifdef __CloudABI__
+#define g_print g_printerr
+#endif
   g_print ("Running test %s\n", test->name);
 
   /* Set up test */
