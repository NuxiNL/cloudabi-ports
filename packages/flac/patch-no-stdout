--- src/libFLAC/stream_encoder.c
+++ src/libFLAC/stream_encoder.c
@@ -304,7 +304,6 @@
 static FLAC__StreamEncoderSeekStatus file_seek_callback_(const FLAC__StreamEncoder *encoder, FLAC__uint64 absolute_byte_offset, void *client_data);
 static FLAC__StreamEncoderTellStatus file_tell_callback_(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_byte_offset, void *client_data);
 static FLAC__StreamEncoderWriteStatus file_write_callback_(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data);
-static FILE *get_binary_stdout_(void);
 
 
 /***********************************************************************
@@ -1317,13 +1316,6 @@
 		return FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR;
 	}
 
-	/*
-	 * To make sure that our file does not go unclosed after an error, we
-	 * must assign the FILE pointer before any further error can occur in
-	 * this routine.
-	 */
-	if(file == stdout)
-		file = get_binary_stdout_(); /* just to be safe */
 
 #ifdef _WIN32
 	/*
@@ -1342,10 +1334,10 @@
 
 	init_status = init_stream_internal_(
 		encoder,
-		encoder->private_->file == stdout? 0 : is_ogg? file_read_callback_ : 0,
+		is_ogg? file_read_callback_ : 0,
 		file_write_callback_,
-		encoder->private_->file == stdout? 0 : file_seek_callback_,
-		encoder->private_->file == stdout? 0 : file_tell_callback_,
+		file_seek_callback_,
+		file_tell_callback_,
 		/*metadata_callback=*/0,
 		client_data,
 		is_ogg
@@ -1385,6 +1377,7 @@
 	return init_FILE_internal_(encoder, file, progress_callback, client_data, /*is_ogg=*/true);
 }
 
+#if 0
 static FLAC__StreamEncoderInitStatus init_file_internal_(
 	FLAC__StreamEncoder *encoder,
 	const char *filename,
@@ -1434,6 +1427,7 @@
 {
 	return init_file_internal_(encoder, filename, progress_callback, client_data, /*is_ogg=*/true);
 }
+#endif
 
 FLAC_API FLAC__bool FLAC__stream_encoder_finish(FLAC__StreamEncoder *encoder)
 {
@@ -1484,8 +1478,7 @@
 	}
 
 	if(0 != encoder->private_->file) {
-		if(encoder->private_->file != stdout)
-			fclose(encoder->private_->file);
+		fclose(encoder->private_->file);
 		encoder->private_->file = 0;
 	}
 
@@ -4530,6 +4523,7 @@
 /*
  * This will forcibly set stdout to binary mode (for OSes that require it)
  */
+#if 0
 FILE *get_binary_stdout_(void)
 {
 	/* if something breaks here it is probably due to the presence or
@@ -4547,3 +4541,4 @@
 
 	return stdout;
 }
+#endif
