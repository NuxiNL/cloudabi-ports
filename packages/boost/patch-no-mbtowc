--- boost/archive/impl/xml_iarchive_impl.ipp
+++ boost/archive/impl/xml_iarchive_impl.ipp
@@ -66,9 +66,11 @@
         ws.resize(0);
     const char * start = s.data();
     const char * end = start + s.size();
+    std::mbstate_t mbs;
+    std::mbrtowc(0, 0, 0, &mbs);
     while(start < end){
         wchar_t wc;
-        int resultx = std::mbtowc(&wc, start, end - start);
+        int resultx = std::mbrtowc(&wc, start, end - start, &mbs);
         if(0 < resultx){
             start += resultx;
             ws += wc;
@@ -96,9 +98,11 @@
         
     const char * start = s.data();
     const char * end = start + s.size();
+    std::mbstate_t mbs;
+    std::mbrtowc(0, 0, 0, &mbs);
     while(start < end){
         wchar_t wc;
-        int length = std::mbtowc(&wc, start, end - start);
+        int length = std::mbrtowc(&wc, start, end - start, &mbs);
         if(0 < length){
             start += length;
             *ws++ = wc;
--- boost/archive/iterators/mb_from_wchar.hpp
+++ boost/archive/iterators/mb_from_wchar.hpp
@@ -83,8 +83,7 @@
 
     void fill(){
         wchar_t value = * this->base_reference();
-        #if (defined(__MINGW32__) && ((__MINGW32_MAJOR_VERSION > 3) \
-        || ((__MINGW32_MAJOR_VERSION == 3) && (__MINGW32_MINOR_VERSION >= 8))))
+        #if 1
         m_bend = std::wcrtomb(m_buffer, value,0);
         #else
         m_bend = std::wctomb(m_buffer, value);
--- boost/archive/iterators/wchar_from_mb.hpp
+++ boost/archive/iterators/wchar_from_mb.hpp
@@ -101,24 +101,20 @@
 
 template<class Base>
 wchar_t wchar_from_mb<Base>::drain(){
-    char buffer[9];
-    char * bptr = buffer;
-    char val;
-    for(std::size_t i = 0; i++ < (unsigned)MB_CUR_MAX;){
-        val = * this->base_reference();
-        *bptr++ = val;
-        int result = std::mblen(buffer, i);
-        if(-1 != result)
-            break;
-        ++(this->base_reference());
-    }
+    std::mbstate_t mbs;
+    std::mbrtowc(0, 0, 0, &mbs);
     wchar_t retval;
-    int result = std::mbtowc(& retval, buffer, MB_CUR_MAX);
-    if(0 >= result)
-        boost::serialization::throw_exception(iterators::dataflow_exception(
-            iterators::dataflow_exception::invalid_conversion
-        ));
-    return retval;
+    while(true) {
+        char c = *this->base_reference();
+        int result = std::mbrtowc(&retval, &c, 1, &mbs);
+        if (result == -1)
+            boost::serialization::throw_exception(iterators::dataflow_exception(
+                iterators::dataflow_exception::invalid_conversion
+            ));
+        ++this->base_reference();
+        if (result >= 0)
+            return retval;
+    }
 }
 
 } // namespace iterators
