--- src/get_str.c
+++ src/get_str.c
@@ -2269,7 +2269,7 @@
     {
       if (s == NULL)
         s = (char *) (*__gmp_allocate_func) (6);
-      strcpy (s, "@NaN@");
+      memcpy (s, "@NaN@", 6);
       return s;
     }
 
@@ -2279,7 +2279,7 @@
     {
       if (s == NULL)
         s = (char *) (*__gmp_allocate_func) (neg + 6);
-      strcpy (s, (neg) ? "-@Inf@" : "@Inf@");
+      memcpy (s, (neg) ? "-@Inf@" : "@Inf@", neg + 6);
       return s;
     }
 
--- src/vasprintf.c
+++ src/vasprintf.c
@@ -559,7 +559,7 @@
   if (MPFR_UNLIKELY ((b->curr + len) >= (b->start + b->size)))
     buffer_widen (b, len);
 
-  strncat (b->curr, s, len);
+  memcpy (b->curr, s, len);
   b->curr += len;
 
   MPFR_ASSERTD (b->curr < b->start + b->size);
@@ -1029,14 +1029,10 @@
   str = (char *) (*__gmp_allocate_func) (1 + np->exp_size);
   np->exp_ptr = register_string (np->sl, str);
   {
-    char exp_fmt[8];  /* contains at most 7 characters like in "p%+.1i",
-                         or "P%+.2li" */
-
+    char exp_fmt[] = "?%+.1" MPFR_EXP_FSPEC "d";
     exp_fmt[0] = uppercase ? 'P' : 'p';
-    exp_fmt[1] = '\0';
-    strcat (exp_fmt, "%+.1" MPFR_EXP_FSPEC "d");
 
-    if (sprintf (str, exp_fmt, (mpfr_eexp_t) exp) < 0)
+    if (snprintf (str, 1 + np->exp_size, exp_fmt, (mpfr_eexp_t) exp) < 0)
       return -1;
   }
 
@@ -1157,13 +1153,10 @@
   np->exp_ptr = register_string (np->sl, str);
 
   {
-    char exp_fmt[8];  /* e.g. "e%+.2i", or "E%+.2li" */
-
+    char exp_fmt[] = "?%+.2" MPFR_EXP_FSPEC "d";
     exp_fmt[0] = uppercase ? 'E' : 'e';
-    exp_fmt[1] = '\0';
-    strcat (exp_fmt, "%+.2" MPFR_EXP_FSPEC "d");
 
-    if (sprintf (str, exp_fmt, (mpfr_eexp_t) exp) < 0)
+    if (snprintf (str, 1 + np->exp_size, exp_fmt, (mpfr_eexp_t) exp) < 0)
       return -1;
   }
 
@@ -1492,14 +1485,14 @@
             {
               np->ip_size = MPFR_NAN_STRING_LENGTH;
               str = (char *) (*__gmp_allocate_func) (1 + np->ip_size);
-              strcpy (str, MPFR_NAN_STRING_UC);
+              memcpy (str, MPFR_NAN_STRING_UC, 1 + np->ip_size);
               np->ip_ptr = register_string (np->sl, str);
             }
           else
             {
               np->ip_size = MPFR_NAN_STRING_LENGTH;
               str = (char *) (*__gmp_allocate_func) (1 + np->ip_size);
-              strcpy (str, MPFR_NAN_STRING_LC);
+              memcpy (str, MPFR_NAN_STRING_LC, 1 + np->ip_size);
               np->ip_ptr = register_string (np->sl, str);
             }
         }
@@ -1517,14 +1510,14 @@
             {
               np->ip_size = MPFR_INF_STRING_LENGTH;
               str = (char *) (*__gmp_allocate_func) (1 + np->ip_size);
-              strcpy (str, MPFR_INF_STRING_UC);
+              memcpy (str, MPFR_INF_STRING_UC, 1 + np->ip_size);
               np->ip_ptr = register_string (np->sl, str);
             }
           else
             {
               np->ip_size = MPFR_INF_STRING_LENGTH;
               str = (char *) (*__gmp_allocate_func) (1 + np->ip_size);
-              strcpy (str, MPFR_INF_STRING_LC);
+              memcpy (str, MPFR_INF_STRING_LC, 1 + np->ip_size);
               np->ip_ptr = register_string (np->sl, str);
             }
         }
@@ -1576,9 +1569,9 @@
               np->exp_size = (spec.spec == 'e' || spec.spec == 'E') ? 4 : 3;
               str = (char *) (*__gmp_allocate_func) (1 + np->exp_size);
               if (spec.spec == 'e' || spec.spec == 'E')
-                strcpy (str, uppercase ? "E+00" : "e+00");
+                memcpy (str, uppercase ? "E+00" : "e+00", np->exp_size);
               else
-                strcpy (str, uppercase ? "P+0" : "p+0");
+                memcpy (str, uppercase ? "P+0" : "p+0", np->exp_size);
               np->exp_ptr = register_string (np->sl, str);
             }
         }
@@ -1990,7 +1983,7 @@
           format[2] = '.';
           format[3] = '*';
           format[4] = '\0';
-          strcat (format, MPFR_PREC_FORMAT_TYPE);
+          strlcat (format, MPFR_PREC_FORMAT_TYPE, sizeof(format));
           format[4 + MPFR_PREC_FORMAT_SIZE] = spec.spec;
           format[5 + MPFR_PREC_FORMAT_SIZE] = '\0';
           length = gmp_asprintf (&s, format, spec.width, spec.prec, prec);
