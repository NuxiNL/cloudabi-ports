--- crypto/conf/conf_mod.c
+++ crypto/conf/conf_mod.c
@@ -170,11 +170,13 @@
 	if (!conf)
 		goto err;
 
+#if 0
 	if (filename == NULL) {
 		file = CONF_get1_default_config_file();
 		if (!file)
 			goto err;
 	} else
+#endif
 		file = (char *)filename;
 
 	if (NCONF_load(conf, file, NULL) <= 0) {
@@ -541,6 +543,7 @@
 
 /* Return default config file name */
 
+#if 0
 char *
 CONF_get1_default_config_file(void)
 {
@@ -551,6 +554,7 @@
 		return (NULL);
 	return file;
 }
+#endif
 
 /* This function takes a list separated by 'sep' and calls the
  * callback function giving the start and length of each member
--- crypto/cversion.c
+++ crypto/cversion.c
@@ -73,8 +73,6 @@
 		return("compiler: information not available");
 	case SSLEAY_PLATFORM:
 		return("platform: information not available");
-	case SSLEAY_DIR:
-		return "OPENSSLDIR: \"" OPENSSLDIR "\"";
 	}
 	return("not available");
 }
--- crypto/x509/x509_def.c
+++ crypto/x509/x509_def.c
@@ -61,6 +61,7 @@
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 
+#if 0
 const char *
 X509_get_default_private_dir(void)
 {
@@ -96,3 +97,4 @@
 {
 	return (X509_CERT_FILE_EVP);
 }
+#endif
--- include/openssl/conf.h
+++ include/openssl/conf.h
@@ -186,7 +186,6 @@
 void *CONF_module_get_usr_data(CONF_MODULE *pmod);
 void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
 
-char *CONF_get1_default_config_file(void);
 
 int CONF_parse_list(const char *list, int sep, int nospc,
     int (*list_cb)(const char *elem, int len, void *usr), void *arg);
--- include/openssl/crypto.h
+++ include/openssl/crypto.h
@@ -140,7 +140,6 @@
 #define SSLEAY_CFLAGS		2
 #define SSLEAY_BUILT_ON		3
 #define SSLEAY_PLATFORM		4
-#define SSLEAY_DIR		5
 
 /* A generic structure to pass assorted data in a expandable way */
 typedef struct openssl_item_st {
--- include/openssl/x509.h
+++ include/openssl/x509.h
@@ -779,12 +779,6 @@
 				int offset_day, long offset_sec, time_t *t);
 ASN1_TIME *	X509_gmtime_adj(ASN1_TIME *s, long adj);
 
-const char *	X509_get_default_cert_area(void );
-const char *	X509_get_default_cert_dir(void );
-const char *	X509_get_default_cert_file(void );
-const char *	X509_get_default_cert_dir_env(void );
-const char *	X509_get_default_cert_file_env(void );
-const char *	X509_get_default_private_dir(void );
 
 X509_REQ *	X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
 X509 *		X509_REQ_to_X509(X509_REQ *r, int days,EVP_PKEY *pkey);
