--- crypto/bio/bss_file.c
+++ crypto/bio/bss_file.c
@@ -110,6 +110,7 @@
 	.destroy = file_free
 };
 
+#if 0
 BIO *
 BIO_new_file(const char *filename, const char *mode)
 {
@@ -135,6 +136,7 @@
 	BIO_set_fp(ret, file, BIO_CLOSE);
 	return (ret);
 }
+#endif
 
 BIO *
 BIO_new_fp(FILE *stream, int close_flag)
@@ -232,6 +234,7 @@
 		b->ptr = ptr;
 		b->init = 1;
 		break;
+#if 0
 	case BIO_C_SET_FILENAME:
 		file_free(b);
 		b->shutdown = (int)num&BIO_CLOSE;
@@ -261,6 +264,7 @@
 		b->ptr = fp;
 		b->init = 1;
 		break;
+#endif
 	case BIO_C_GET_FILE_PTR:
 		/* the ptr parameter is actually a FILE ** in this case. */
 		if (ptr != NULL) {
--- crypto/conf/conf_def.c
+++ crypto/conf/conf_def.c
@@ -83,7 +83,6 @@
 static int def_init_WIN32(CONF *conf);
 static int def_destroy(CONF *conf);
 static int def_destroy_data(CONF *conf);
-static int def_load(CONF *conf, const char *name, long *eline);
 static int def_load_bio(CONF *conf, BIO *bp, long *eline);
 static int def_dump(const CONF *conf, BIO *bp);
 static int def_is_number(const CONF *conf, char c);
@@ -99,7 +98,6 @@
 	.dump = def_dump,
 	.is_number = def_is_number,
 	.to_int = def_to_int,
-	.load = def_load
 };
 
 static CONF_METHOD WIN32_method = {
@@ -112,7 +110,6 @@
 	def_dump,
 	def_is_number,
 	def_to_int,
-	def_load
 };
 
 CONF_METHOD *
@@ -186,6 +183,7 @@
 	return 1;
 }
 
+#if 0
 static int
 def_load(CONF *conf, const char *name, long *line)
 {
@@ -206,6 +204,7 @@
 
 	return ret;
 }
+#endif
 
 static int
 def_load_bio(CONF *conf, BIO *in, long *line)
--- crypto/conf/conf_lib.c
+++ crypto/conf/conf_lib.c
@@ -86,6 +86,7 @@
 	return 1;
 }
 
+#if 0
 LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
     long *eline)
 {
@@ -103,6 +104,7 @@
 
 	return ltmp;
 }
+#endif
 
 LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
     long *eline)
@@ -252,6 +254,7 @@
 	conf->meth->destroy_data(conf);
 }
 
+#if 0
 int
 NCONF_load(CONF *conf, const char *file, long *eline)
 {
@@ -262,6 +265,7 @@
 
 	return conf->meth->load(conf, file, eline);
 }
+#endif
 
 int
 NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
--- crypto/conf/conf_mod.c
+++ crypto/conf/conf_mod.c
@@ -159,6 +159,7 @@
 	return 1;
 }
 
+#if 0
 int
 CONF_modules_load_file(const char *filename, const char *appname,
     unsigned long flags)
@@ -196,6 +197,7 @@
 
 	return ret;
 }
+#endif
 
 static int
 module_run(const CONF *cnf, char *name, char *value, unsigned long flags)
@@ -541,6 +543,7 @@
 
 /* Return default config file name */
 
+#if 0
 char *
 CONF_get1_default_config_file(void)
 {
@@ -551,6 +554,7 @@
 		return (NULL);
 	return file;
 }
+#endif
 
 /* This function takes a list separated by 'sep' and calls the
  * callback function giving the start and length of each member
--- crypto/conf/conf_sap.c
+++ crypto/conf/conf_sap.c
@@ -77,6 +77,7 @@
 
 static int openssl_configured = 0;
 
+#if 0
 void
 OPENSSL_config(const char *config_name)
 {
@@ -105,6 +106,7 @@
 
 	return;
 }
+#endif
 
 void
 OPENSSL_no_config(void)
--- crypto/cversion.c
+++ crypto/cversion.c
@@ -73,8 +73,6 @@
 		return("compiler: information not available");
 	case SSLEAY_PLATFORM:
 		return("platform: information not available");
-	case SSLEAY_DIR:
-		return "OPENSSLDIR: \"" OPENSSLDIR "\"";
 	}
 	return("not available");
 }
--- crypto/engine/eng_openssl.c
+++ crypto/engine/eng_openssl.c
@@ -88,7 +88,7 @@
  * the application explicitly calls "ENGINE_load_openssl()" because this is no
  * longer automatic in ENGINE_load_builtin_engines(). */
 #define TEST_ENG_OPENSSL_RC4
-#define TEST_ENG_OPENSSL_PKEY
+#undef TEST_ENG_OPENSSL_PKEY
 /* #define TEST_ENG_OPENSSL_RC4_OTHERS */
 #define TEST_ENG_OPENSSL_RC4_P_INIT
 /* #define TEST_ENG_OPENSSL_RC4_P_CIPHER */
--- crypto/evp/c_all.c
+++ crypto/evp/c_all.c
@@ -290,9 +290,11 @@
 	OpenSSL_add_all_digests();
 }
 
+#if 0
 void
 OPENSSL_add_all_algorithms_conf(void)
 {
 	OPENSSL_add_all_algorithms_noconf();
 	OPENSSL_config(NULL);
 }
+#endif
--- crypto/rand/randfile.c
+++ crypto/rand/randfile.c
@@ -86,6 +86,7 @@
 		return bytes;
 }
 
+#if 0
 int
 RAND_write_file(const char *file)
 {
@@ -133,6 +134,7 @@
 	explicit_bzero(buf, BUFSIZE);
 	return ret;
 }
+#endif
 
 const char *
 RAND_file_name(char * buf, size_t size)
--- crypto/ts/ts_conf.c
+++ crypto/ts/ts_conf.c
@@ -94,6 +94,7 @@
 
 /* Function definitions for certificate and key loading. */
 
+#if 0
 X509 *
 TS_CONF_load_cert(const char *file)
 {
@@ -161,6 +162,7 @@
 	BIO_free(key);
 	return pkey;
 }
+#endif
 
 /* Function definitions for handling configuration options. */
 
@@ -256,6 +258,7 @@
 
 #endif
 
+#if 0
 int
 TS_CONF_set_signer_cert(CONF *conf, const char *section, const char *cert,
     TS_RESP_CTX *ctx)
@@ -329,6 +332,7 @@
 	EVP_PKEY_free(key_obj);
 	return ret;
 }
+#endif
 
 int
 TS_CONF_set_def_policy(CONF *conf, const char *section, const char *policy,
--- crypto/x509/by_dir.c
+++ crypto/x509/by_dir.c
@@ -72,6 +72,7 @@
 
 # include <sys/stat.h>
 
+#if 0
 typedef struct lookup_dir_hashes_st {
 	unsigned long hash;
 	int suffix;
@@ -420,3 +421,4 @@
 		BUF_MEM_free(b);
 	return (ok);
 }
+#endif
--- crypto/x509/by_file.c
+++ crypto/x509/by_file.c
@@ -67,6 +67,7 @@
 #include <openssl/lhash.h>
 #include <openssl/x509.h>
 
+#if 0
 static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
     long argl, char **ret);
 
@@ -271,4 +272,5 @@
 	sk_X509_INFO_pop_free(inf, X509_INFO_free);
 	return count;
 }
+#endif
 
--- crypto/x509/x509_d2.c
+++ crypto/x509/x509_d2.c
@@ -63,6 +63,7 @@
 #include <openssl/err.h>
 #include <openssl/x509.h>
 
+#if 0
 int
 X509_STORE_set_default_paths(X509_STORE *ctx)
 {
@@ -107,6 +108,7 @@
 		return (0);
 	return (1);
 }
+#endif
 
 int
 X509_STORE_load_mem(X509_STORE *ctx, void *buf, int len)
--- crypto/x509/x509_def.c
+++ crypto/x509/x509_def.c
@@ -61,6 +61,7 @@
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 
+#if 0
 const char *
 X509_get_default_private_dir(void)
 {
@@ -96,3 +97,4 @@
 {
 	return (X509_CERT_FILE_EVP);
 }
+#endif
--- crypto/x509v3/v3_pci.c
+++ crypto/x509v3/v3_pci.c
@@ -160,6 +160,7 @@
 			}
 			free(tmp_data2);
 		}
+#if 0
 		else if (strncmp(val->value, "file:", 5) == 0) {
 			unsigned char buf[2048];
 			int n;
@@ -196,6 +197,7 @@
 				goto err;
 			}
 		}
+#endif
 		else if (strncmp(val->value, "text:", 5) == 0) {
 			val_len = strlen(val->value + 5);
 			tmp_data = realloc((*policy)->data,
--- include/openssl/bio.h
+++ include/openssl/bio.h
@@ -347,7 +347,6 @@
 #define BIO_C_GET_FD				105
 #define BIO_C_SET_FILE_PTR			106
 #define BIO_C_GET_FILE_PTR			107
-#define BIO_C_SET_FILENAME			108
 #define BIO_C_SET_SSL				109
 #define BIO_C_GET_SSL				110
 #define BIO_C_SET_MD				111
@@ -457,14 +456,6 @@
 
 /* name is cast to lose const, but might be better to route through a function
    so we can do it safely */
-#define BIO_read_filename(b,name) BIO_ctrl(b,BIO_C_SET_FILENAME, \
-		BIO_CLOSE|BIO_FP_READ,(char *)name)
-#define BIO_write_filename(b,name) BIO_ctrl(b,BIO_C_SET_FILENAME, \
-		BIO_CLOSE|BIO_FP_WRITE,name)
-#define BIO_append_filename(b,name) BIO_ctrl(b,BIO_C_SET_FILENAME, \
-		BIO_CLOSE|BIO_FP_APPEND,name)
-#define BIO_rw_filename(b,name) BIO_ctrl(b,BIO_C_SET_FILENAME, \
-		BIO_CLOSE|BIO_FP_READ|BIO_FP_WRITE,name)
 
 /* WARNING WARNING, this ups the reference count on the read bio of the
  * SSL structure.  This is because the ssl read BIO is now pointed to by
@@ -569,7 +560,6 @@
 asn1_ps_func **psuffix_free);
 
 BIO_METHOD *BIO_s_file(void );
-BIO *BIO_new_file(const char *filename, const char *mode);
 BIO *BIO_new_fp(FILE *stream, int close_flag);
 # define BIO_s_file_internal	BIO_s_file
 BIO *	BIO_new(BIO_METHOD *type);
--- include/openssl/conf.h
+++ include/openssl/conf.h
@@ -95,7 +95,6 @@
 	int (*dump)(const CONF *conf, BIO *bp);
 	int (*is_number)(const CONF *conf, char c);
 	int (*to_int)(const CONF *conf, char c);
-	int (*load)(CONF *conf, const char *name, long *eline);
 };
 
 /* Module definitions */
@@ -119,8 +118,6 @@
 
 int CONF_set_default_method(CONF_METHOD *meth);
 void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
-LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
-    long *eline);
 LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
     long *eline);
 LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp, long *eline);
@@ -134,7 +131,6 @@
 int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
 int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
 
-void OPENSSL_config(const char *config_name);
 void OPENSSL_no_config(void);
 
 /* New conf code.  The semantics are different from the functions above.
@@ -152,7 +148,6 @@
 void NCONF_free(CONF *conf);
 void NCONF_free_data(CONF *conf);
 
-int NCONF_load(CONF *conf, const char *file, long *eline);
 int NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
 int NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
 STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf, const char *section);
@@ -168,8 +163,6 @@
 
 int CONF_modules_load(const CONF *cnf, const char *appname,
     unsigned long flags);
-int CONF_modules_load_file(const char *filename, const char *appname,
-    unsigned long flags);
 void CONF_modules_unload(int all);
 void CONF_modules_finish(void);
 void CONF_modules_free(void);
@@ -186,7 +179,6 @@
 void *CONF_module_get_usr_data(CONF_MODULE *pmod);
 void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
 
-char *CONF_get1_default_config_file(void);
 
 int CONF_parse_list(const char *list, int sep, int nospc,
     int (*list_cb)(const char *elem, int len, void *usr), void *arg);
--- include/openssl/crypto.h
+++ include/openssl/crypto.h
@@ -141,7 +141,6 @@
 #define SSLEAY_CFLAGS		2
 #define SSLEAY_BUILT_ON		3
 #define SSLEAY_PLATFORM		4
-#define SSLEAY_DIR		5
 
 /* A generic structure to pass assorted data in a expandable way */
 typedef struct openssl_item_st {
--- include/openssl/evp.h
+++ include/openssl/evp.h
@@ -821,13 +821,8 @@
 #endif
 
 void OPENSSL_add_all_algorithms_noconf(void);
-void OPENSSL_add_all_algorithms_conf(void);
 
-#ifdef OPENSSL_LOAD_CONF
-#define OpenSSL_add_all_algorithms() OPENSSL_add_all_algorithms_conf()
-#else
 #define OpenSSL_add_all_algorithms() OPENSSL_add_all_algorithms_noconf()
-#endif
 
 void OpenSSL_add_all_ciphers(void);
 void OpenSSL_add_all_digests(void);
--- include/openssl/rand.h
+++ include/openssl/rand.h
@@ -95,7 +95,6 @@
 void RAND_seed(const void *buf, int num);
 void RAND_add(const void *buf, int num, double entropy);
 int  RAND_load_file(const char *file, long max_bytes);
-int  RAND_write_file(const char *file);
 const char *RAND_file_name(char *file, size_t num);
 int RAND_status(void);
 int RAND_poll(void);
--- include/openssl/ssl.h
+++ include/openssl/ssl.h
@@ -1567,19 +1567,7 @@
 int	SSL_use_certificate(SSL *ssl, X509 *x);
 int	SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
 
-int	SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
-int	SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
-int	SSL_use_certificate_file(SSL *ssl, const char *file, int type);
-int	SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);
-int	SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);
-int	SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);
-int	SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file); /* PEM type */
 int	SSL_CTX_use_certificate_chain_mem(SSL_CTX *ctx, void *buf, int len);
-STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);
-int	SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
-	    const char *file);
-int	SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
-	    const char *dir);
 
 void	SSL_load_error_strings(void );
 const char *SSL_state_string(const SSL *s);
@@ -1741,9 +1729,6 @@
 void SSL_set_shutdown(SSL *ssl,int mode);
 int SSL_get_shutdown(const SSL *ssl);
 int SSL_version(const SSL *ssl);
-int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
-int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
-    const char *CApath);
 int SSL_CTX_load_verify_mem(SSL_CTX *ctx, void *buf, int len);
 #define SSL_get0_session SSL_get_session /* just peek at pointer */
 SSL_SESSION *SSL_get_session(const SSL *ssl);
--- include/openssl/ts.h
+++ include/openssl/ts.h
@@ -707,21 +707,12 @@
 /* Function declarations for handling configuration options,
    defined in ts/ts_conf.c */
 
-X509 *TS_CONF_load_cert(const char *file);
-STACK_OF(X509) *TS_CONF_load_certs(const char *file);
-EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass);
 const char *TS_CONF_get_tsa_section(CONF *conf, const char *section);
 int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
     TS_RESP_CTX *ctx);
 int TS_CONF_set_crypto_device(CONF *conf, const char *section,
     const char *device);
 int TS_CONF_set_default_engine(const char *name);
-int TS_CONF_set_signer_cert(CONF *conf, const char *section,
-    const char *cert, TS_RESP_CTX *ctx);
-int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
-    TS_RESP_CTX *ctx);
-int TS_CONF_set_signer_key(CONF *conf, const char *section,
-    const char *key, const char *pass, TS_RESP_CTX *ctx);
 int TS_CONF_set_def_policy(CONF *conf, const char *section,
     const char *policy, TS_RESP_CTX *ctx);
 int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx);
--- include/openssl/x509.h
+++ include/openssl/x509.h
@@ -779,12 +779,6 @@
 				int offset_day, long offset_sec, time_t *t);
 ASN1_TIME *	X509_gmtime_adj(ASN1_TIME *s, long adj);
 
-const char *	X509_get_default_cert_area(void );
-const char *	X509_get_default_cert_dir(void );
-const char *	X509_get_default_cert_file(void );
-const char *	X509_get_default_cert_dir_env(void );
-const char *	X509_get_default_cert_file_env(void );
-const char *	X509_get_default_private_dir(void );
 
 X509_REQ *	X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
 X509 *		X509_REQ_to_X509(X509_REQ *r, int days,EVP_PKEY *pkey);
--- include/openssl/x509_vfy.h
+++ include/openssl/x509_vfy.h
@@ -429,8 +429,6 @@
 
 X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);
 
-X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
-X509_LOOKUP_METHOD *X509_LOOKUP_file(void);
 X509_LOOKUP_METHOD *X509_LOOKUP_mem(void);
 
 int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
@@ -442,9 +440,6 @@
 int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
 	long argl, char **ret);
 
-int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
-int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
-int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);
 
 
 X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
@@ -460,10 +455,7 @@
 	int len, X509_OBJECT *ret);
 int X509_LOOKUP_shutdown(X509_LOOKUP *ctx);
 
-int	X509_STORE_load_locations (X509_STORE *ctx,
-		const char *file, const char *dir);
 int	X509_STORE_load_mem(X509_STORE *ctx, void *buf, int len);
-int	X509_STORE_set_default_paths(X509_STORE *ctx);
 
 int X509_STORE_CTX_get_ex_new_index(long argl, void *argp, CRYPTO_EX_new *new_func,
 	CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
--- include/tls.h
+++ include/tls.h
@@ -57,28 +57,19 @@
 struct tls_config *tls_config_new(void);
 void tls_config_free(struct tls_config *_config);
 
-int tls_config_add_keypair_file(struct tls_config *_config,
-    const char *_cert_file, const char *_key_file);
 int tls_config_add_keypair_mem(struct tls_config *_config, const uint8_t *_cert,
     size_t _cert_len, const uint8_t *_key, size_t _key_len);
 
 int tls_config_set_alpn(struct tls_config *_config, const char *_alpn);
-int tls_config_set_ca_file(struct tls_config *_config, const char *_ca_file);
-int tls_config_set_ca_path(struct tls_config *_config, const char *_ca_path);
 int tls_config_set_ca_mem(struct tls_config *_config, const uint8_t *_ca,
     size_t _len);
-int tls_config_set_cert_file(struct tls_config *_config,
-    const char *_cert_file);
 int tls_config_set_cert_mem(struct tls_config *_config, const uint8_t *_cert,
     size_t _len);
 int tls_config_set_ciphers(struct tls_config *_config, const char *_ciphers);
 int tls_config_set_dheparams(struct tls_config *_config, const char *_params);
 int tls_config_set_ecdhecurve(struct tls_config *_config, const char *_name);
-int tls_config_set_key_file(struct tls_config *_config, const char *_key_file);
 int tls_config_set_key_mem(struct tls_config *_config, const uint8_t *_key,
     size_t _len);
-int tls_config_set_keypair_file(struct tls_config *_config,
-    const char *_cert_file, const char *_key_file);
 int tls_config_set_keypair_mem(struct tls_config *_config, const uint8_t *_cert,
     size_t _cert_len, const uint8_t *_key, size_t _key_len);
 void tls_config_set_protocols(struct tls_config *_config, uint32_t _protocols);
@@ -136,7 +127,6 @@
 const char *tls_conn_servername(struct tls *_ctx);
 const char *tls_conn_version(struct tls *_ctx);
 
-uint8_t *tls_load_file(const char *_file, size_t *_len, char *_password);
 
 #ifdef __cplusplus
 }
--- ssl/ssl_cert.c
+++ ssl/ssl_cert.c
@@ -563,6 +563,7 @@
  * \param file the file containing one or more certs.
  * \return a ::STACK containing the certs.
  */
+#if 0
 STACK_OF(X509_NAME) *
 SSL_load_client_CA_file(const char *file)
 {
@@ -720,3 +721,4 @@
 	}
 	return ret;
 }
+#endif
--- ssl/ssl_lib.c
+++ ssl/ssl_lib.c
@@ -2867,6 +2867,7 @@
 	return (ssl->ctx);
 }
 
+#if 0
 int
 SSL_CTX_set_default_verify_paths(SSL_CTX *ctx)
 {
@@ -2879,6 +2880,7 @@
 {
 	return (X509_STORE_load_locations(ctx->cert_store, CAfile, CApath));
 }
+#endif
 
 int
 SSL_CTX_load_verify_mem(SSL_CTX *ctx, void *buf, int len)
--- ssl/ssl_rsa.c
+++ ssl/ssl_rsa.c
@@ -84,6 +84,7 @@
 	return (ssl_set_cert(ssl->cert, x));
 }
 
+#if 0
 int
 SSL_use_certificate_file(SSL *ssl, const char *file, int type)
 {
@@ -126,6 +127,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len)
@@ -213,6 +215,7 @@
 	return (1);
 }
 
+#if 0
 int
 SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type)
 {
@@ -252,6 +255,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned char *d, long len)
@@ -288,6 +292,7 @@
 	return (ret);
 }
 
+#if 0
 int
 SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type)
 {
@@ -327,6 +332,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_use_PrivateKey_ASN1(int type, SSL *ssl, const unsigned char *d, long len)
@@ -417,6 +423,7 @@
 	return (1);
 }
 
+#if 0
 int
 SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type)
 {
@@ -458,6 +465,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d)
@@ -503,6 +511,7 @@
 	return (ret);
 }
 
+#if 0
 int
 SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type)
 {
@@ -542,6 +551,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d, long len)
@@ -576,6 +586,7 @@
 	return (ssl_set_pkey(ctx->cert, pkey));
 }
 
+#if 0
 int
 SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type)
 {
@@ -616,6 +627,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx, const unsigned char *d,
@@ -707,6 +719,7 @@
 	return (ret);
 }
 
+#if 0
 int
 SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)
 {
@@ -730,6 +743,7 @@
 	BIO_free(in);
 	return (ret);
 }
+#endif
 
 int
 SSL_CTX_use_certificate_chain_mem(SSL_CTX *ctx, void *buf, int len)
--- tls/tls.c
+++ tls/tls.c
@@ -347,6 +347,7 @@
 
 	SSL_CTX_set_verify(ssl_ctx, verify, NULL);
 
+#if 0
 	/* If no CA has been specified, attempt to load the default. */
 	if (ctx->config->ca_mem == NULL && ctx->config->ca_path == NULL) {
 		if (tls_config_load_file(&ctx->error, "CA", _PATH_SSL_CA_FILE,
@@ -354,6 +355,7 @@
 			goto err;
 		ca_free = ca_mem;
 	}
+#endif
 
 	if (ca_mem != NULL) {
 		if (ca_len > INT_MAX) {
@@ -364,10 +366,12 @@
 			tls_set_errorx(ctx, "ssl verify memory setup failure");
 			goto err;
 		}
+#if 0
 	} else if (SSL_CTX_load_verify_locations(ssl_ctx, NULL,
 	    ctx->config->ca_path) != 1) {
 		tls_set_errorx(ctx, "ssl verify locations failure");
 		goto err;
+#endif
 	}
 	if (ctx->config->verify_depth >= 0)
 		SSL_CTX_set_verify_depth(ssl_ctx, ctx->config->verify_depth);
--- tls/tls_config.c
+++ tls/tls_config.c
@@ -67,6 +67,7 @@
 	return calloc(1, sizeof(struct tls_keypair));
 }
 
+#if 0
 static int
 tls_keypair_set_cert_file(struct tls_keypair *keypair, struct tls_error *error,
     const char *cert_file)
@@ -74,6 +75,7 @@
 	return tls_config_load_file(error, "certificate", cert_file,
 	    &keypair->cert_mem, &keypair->cert_len);
 }
+#endif
 
 static int
 tls_keypair_set_cert_mem(struct tls_keypair *keypair, const uint8_t *cert,
@@ -82,6 +84,7 @@
 	return set_mem(&keypair->cert_mem, &keypair->cert_len, cert, len);
 }
 
+#if 0
 static int
 tls_keypair_set_key_file(struct tls_keypair *keypair, struct tls_error *error,
     const char *key_file)
@@ -91,6 +94,7 @@
 	return tls_config_load_file(error, "key", key_file,
 	    &keypair->key_mem, &keypair->key_len);
 }
+#endif
 
 static int
 tls_keypair_set_key_mem(struct tls_keypair *keypair, const uint8_t *key,
@@ -122,6 +126,7 @@
 	free(keypair);
 }
 
+#if 0
 int
 tls_config_load_file(struct tls_error *error, const char *filetype,
     const char *filename, char **buf, size_t *len)
@@ -168,6 +173,7 @@
 
 	return -1;
 }
+#endif
 
 struct tls_config *
 tls_config_new(void)
@@ -221,7 +227,6 @@
 
 	free(config->alpn);
 	free((char *)config->ca_mem);
-	free((char *)config->ca_path);
 	free((char *)config->ciphers);
 
 	free(config);
@@ -381,6 +386,7 @@
 	    &config->alpn_len);
 }
 
+#if 0
 int
 tls_config_add_keypair_file(struct tls_config *config,
     const char *cert_file, const char *key_file)
@@ -402,6 +408,7 @@
 	tls_keypair_free(keypair);
 	return (-1);
 }
+#endif
 
 int
 tls_config_add_keypair_mem(struct tls_config *config, const uint8_t *cert,
@@ -425,6 +432,7 @@
 	return (-1);
 }
 
+#if 0
 int
 tls_config_set_ca_file(struct tls_config *config, const char *ca_file)
 {
@@ -437,6 +445,7 @@
 {
 	return set_string(&config->ca_path, ca_path);
 }
+#endif
 
 int
 tls_config_set_ca_mem(struct tls_config *config, const uint8_t *ca, size_t len)
@@ -444,12 +453,14 @@
 	return set_mem(&config->ca_mem, &config->ca_len, ca, len);
 }
 
+#if 0
 int
 tls_config_set_cert_file(struct tls_config *config, const char *cert_file)
 {
 	return tls_keypair_set_cert_file(config->keypair, &config->error,
 	    cert_file);
 }
+#endif
 
 int
 tls_config_set_cert_mem(struct tls_config *config, const uint8_t *cert,
@@ -532,12 +543,14 @@
 	return (0);
 }
 
+#if 0
 int
 tls_config_set_key_file(struct tls_config *config, const char *key_file)
 {
 	return tls_keypair_set_key_file(config->keypair, &config->error,
 	    key_file);
 }
+#endif
 
 int
 tls_config_set_key_mem(struct tls_config *config, const uint8_t *key,
@@ -546,6 +559,7 @@
 	return tls_keypair_set_key_mem(config->keypair, key, len);
 }
 
+#if 0
 int
 tls_config_set_keypair_file(struct tls_config *config,
     const char *cert_file, const char *key_file)
@@ -557,6 +571,7 @@
 
 	return (0);
 }
+#endif
 
 int
 tls_config_set_keypair_mem(struct tls_config *config, const uint8_t *cert,
--- tls/tls_internal.h
+++ tls/tls_internal.h
@@ -57,7 +57,6 @@
 
 	char *alpn;
 	size_t alpn_len;
-	const char *ca_path;
 	char *ca_mem;
 	size_t ca_len;
 	const char *ciphers;
@@ -142,8 +141,6 @@
 int tls_handshake_client(struct tls *ctx);
 int tls_handshake_server(struct tls *ctx);
 
-int tls_config_load_file(struct tls_error *error, const char *filetype,
-    const char *filename, char **buf, size_t *len);
 int tls_host_port(const char *hostport, char **host, char **port);
 
 int tls_set_cbs(struct tls *ctx,
--- tls/tls_util.c
+++ tls/tls_util.c
@@ -86,6 +86,7 @@
 	return (rv);
 }
 
+#if 0
 static int
 tls_password_cb(char *buf, int size, int rwflag, void *u)
 {
@@ -167,3 +168,4 @@
 
 	return (NULL);
 }
+#endif
