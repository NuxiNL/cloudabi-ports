--- bindings/c/xspf_c.cpp
+++ bindings/c/xspf_c.cpp
@@ -278,7 +278,7 @@
 		size_t len;
 		len = strlen(nstr) + 1;
 		*str = new char[len];
-		strcpy(*str, nstr);
+		memcpy(*str, nstr, len);
 	}
 }
 
--- src/XspfToolbox.cpp
+++ src/XspfToolbox.cpp
@@ -75,7 +75,7 @@
 		return NULL;
 	}
 	XML_Char * dup = new XML_Char[static_cast<int>(PORT_STRLEN(source)) + 1];
-	PORT_STRCPY(dup, source);
+	memcpy(dup, source, PORT_STRLEN(source) + 1);
 	return dup;
 }
 
@@ -96,7 +96,7 @@
 		int const srcLen = static_cast<int>(::PORT_STRLEN(src));
 		if (srcLen > 0) {
 			*dest = new XML_Char[static_cast<int>(srcLen) + 1];
-			PORT_STRCPY(*dest, src);
+			memcpy(*dest, src, srcLen + 1);
 		} else {
 			*dest = NULL;
 		}
@@ -121,7 +121,7 @@
 			int const sourceLen = static_cast<int>(::PORT_STRLEN(source));
 			if (sourceLen > 0) {
 				XML_Char * const tempDest = new XML_Char[static_cast<int>(sourceLen) + 1];
-				PORT_STRCPY(tempDest, source);
+				memcpy(tempDest, source, sourceLen + 1);
 				dest = tempDest;
 				destOwnership = true;
 			} else {
--- src/XspfXmlFormatter.cpp
+++ src/XspfXmlFormatter.cpp
@@ -259,13 +259,13 @@
 		if (prefixLen == 0) {
 			// Default namespace
 			fullName = new XML_Char[localNameLen + 1];
-			::PORT_STRCPY(fullName, localName);
+			::memcpy(fullName, localName, localNameLen + 1);
 		} else {
 			// Namespace with prefix
 			fullName = new XML_Char[prefixLen + 1 + localNameLen + 1];
-			::PORT_STRCPY(fullName, prefix);
-			::PORT_STRCPY(fullName + prefixLen, _PT(":"));
-			::PORT_STRCPY(fullName + prefixLen + 1, localName);
+			::memcpy(fullName, prefix, prefixLen);
+			fullName[prefixLen] = ':';
+			::memcpy(fullName + prefixLen + 1, localName, localNameLen + 1);
 		}
 		return fullName;
 	} else {
@@ -342,13 +342,13 @@
 				if (::PORT_STRLEN(finalPrefix) == 0) {
 					// Default namespace
 					finalKey = new XML_Char[5 + 1];
-					::PORT_STRCPY(finalKey, _PT("xmlns"));
+					::memcpy(finalKey, _PT("xmlns"), 5 + 1);
 				} else {
 					// Namespace with prefix
 					int const finalPrefixLen = static_cast<int>(::PORT_STRLEN(finalPrefix));
 					finalKey = new XML_Char[5 + 1 + finalPrefixLen + 1];
-					::PORT_STRCPY(finalKey, _PT("xmlns:"));
-					::PORT_STRCPY(finalKey + 6, finalPrefix);
+					::memcpy(finalKey, _PT("xmlns:"), 6);
+					::memcpy(finalKey + 6, finalPrefix, finalPrefixLen + 1);
 				}
 
 				attribs.push_back(std::pair<XML_Char const *, XML_Char const *>(finalKey, uri));
