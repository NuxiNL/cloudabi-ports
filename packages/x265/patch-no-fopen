--- source/common/common.cpp
+++ source/common/common.cpp
@@ -170,6 +170,7 @@
 
 char* x265_slurp_file(const char *filename)
 {
+#if 0
     if (!filename)
         return NULL;
 
@@ -213,6 +214,8 @@
 
 error:
     fclose(fh);
+#endif
+    x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
     return NULL;
 }
 
--- source/common/param.cpp
+++ source/common/param.cpp
@@ -1510,6 +1510,7 @@
 
 bool parseLambdaFile(x265_param* param)
 {
+#if 0
     if (!param->rc.lambdaFileName)
         return false;
 
@@ -1576,6 +1577,9 @@
 
     fclose(lfn);
     return false;
+#endif
+    x265_log(param, X265_LOG_ERROR, "filesystem access not supported\n");
+    return true;
 }
 
 }
--- source/common/scalinglist.cpp
+++ source/common/scalinglist.cpp
@@ -237,6 +237,7 @@
 
 bool ScalingList::parseScalingList(const char* filename)
 {
+#if 0
     FILE *fp = fopen(filename, "r");
     if (!fp)
     {
@@ -313,6 +314,9 @@
     m_bDataPresent = !checkDefaultScalingList();
 
     return false;
+#endif
+    x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+    return true;
 }
 
 /** set quantized matrix coefficient for encode */
--- source/encoder/encoder.cpp
+++ source/encoder/encoder.cpp
@@ -318,6 +318,7 @@
 
     if (m_param->analysisMode)
     {
+#if 0
         const char* name = m_param->analysisFileName;
         if (!name)
             name = defaultAnalysisFileName;
@@ -328,6 +329,9 @@
             x265_log(NULL, X265_LOG_ERROR, "Analysis load/save: failed to open file %s\n", name);
             m_aborted = true;
         }
+#endif
+        x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+        m_aborted = true;
     }
 
     m_bZeroLatency = !m_param->bframes && !m_param->lookaheadDepth && m_param->frameNumThreads == 1;
--- source/encoder/ratecontrol.cpp
+++ source/encoder/ratecontrol.cpp
@@ -398,6 +398,7 @@
                 return false;
             if (m_param->rc.cuTree)
             {
+#if 0
                 char *tmpFile = strcatFilename(fileName, ".cutree");
                 if (!tmpFile)
                     return false;
@@ -408,6 +409,9 @@
                     x265_log(m_param, X265_LOG_ERROR, "can't open stats file %s\n", tmpFile);
                     return false;
                 }
+#endif
+                x265_log(m_param, X265_LOG_ERROR, "filesystem access not supported\n");
+                return false;
             }
 
             /* check whether 1st pass options were compatible with current options */
@@ -575,6 +579,7 @@
          * and move it to the real name only when it's complete */
         if (m_param->rc.bStatWrite)
         {
+#if 0
             char *p, *statFileTmpname;
             statFileTmpname = strcatFilename(fileName, ".temp");
             if (!statFileTmpname)
@@ -603,6 +608,9 @@
                     return false;
                 }
             }
+#endif
+            x265_log(m_param, X265_LOG_ERROR, "filesystem access not supported\n");
+            return false;
         }
         if (m_param->rc.cuTree)
         {
@@ -2535,6 +2543,7 @@
     if (!fileName)
         fileName = s_defaultStatFileName;
 
+#if 0
     if (m_statFileOut)
     {
         fclose(m_statFileOut);
@@ -2572,6 +2581,7 @@
         X265_FREE(tmpFileName);
         X265_FREE(newFileName);
     }
+#endif
 
     if (m_cutreeStatFileIn)
         fclose(m_cutreeStatFileIn);
