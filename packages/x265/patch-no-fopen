--- source/common/common.cpp
+++ source/common/common.cpp
@@ -260,6 +260,7 @@
 
 char* x265_slurp_file(const char *filename)
 {
+#if 0
     if (!filename)
         return NULL;
 
@@ -303,6 +304,8 @@
 
 error:
     fclose(fh);
+#endif
+    x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
     return NULL;
 }
 
--- source/common/param.cpp
+++ source/common/param.cpp
@@ -1654,6 +1654,7 @@
 
 bool parseLambdaFile(x265_param* param)
 {
+#if 0
     if (!param->rc.lambdaFileName)
         return false;
 
@@ -1720,6 +1721,9 @@
 
     fclose(lfn);
     return false;
+#endif
+    x265_log(param, X265_LOG_ERROR, "filesystem access not supported\n");
+    return true;
 }
 
 }
--- source/common/scalinglist.cpp
+++ source/common/scalinglist.cpp
@@ -245,6 +245,7 @@
 
 bool ScalingList::parseScalingList(const char* filename)
 {
+#if 0
     FILE *fp = fopen(filename, "r");
     if (!fp)
     {
@@ -336,6 +337,9 @@
     m_bDataPresent = true;
 
     return false;
+#endif
+    x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+    return true;
 }
 
 /** set quantized matrix coefficient for encode */
--- source/encoder/encoder.cpp
+++ source/encoder/encoder.cpp
@@ -341,6 +341,7 @@
 
     if (m_param->analysisMode)
     {
+#if 0
         const char* name = m_param->analysisFileName;
         if (!name)
             name = defaultAnalysisFileName;
@@ -351,6 +352,9 @@
             x265_log(NULL, X265_LOG_ERROR, "Analysis load/save: failed to open file %s\n", name);
             m_aborted = true;
         }
+#endif
+        x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+        m_aborted = true;
     }
 
     if (m_param->analysisMultiPassRefine || m_param->analysisMultiPassDistortion)
@@ -360,6 +364,7 @@
             name = defaultAnalysisFileName;
         if (m_param->rc.bStatWrite)
         {
+#if 0
             char* temp = strcatFilename(name, ".temp");
             if (!temp)
                 m_aborted = true;
@@ -373,15 +378,22 @@
                 x265_log(NULL, X265_LOG_ERROR, "Analysis 2 pass: failed to open file %s\n", temp);
                 m_aborted = true;
             }
+#endif
+            x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+            m_aborted = true;
         }
         if (m_param->rc.bStatRead)
         {
+#if 0
             m_analysisFileIn = fopen(name, "rb");
             if (!m_analysisFileIn)
             {
                 x265_log(NULL, X265_LOG_ERROR, "Analysis 2 pass: failed to open file %s\n", name);
                 m_aborted = true;
             }
+#endif
+            x265_log(NULL, X265_LOG_ERROR, "filesystem access not supported\n");
+            m_aborted = true;
         }
     }
 
@@ -471,6 +483,7 @@
     if (m_analysisFileIn)
         fclose(m_analysisFileIn);
 
+#if 0
     if (m_analysisFileOut)
     {
         int bError = 1;
@@ -490,6 +503,7 @@
         }
         X265_FREE(temp);
      }
+#endif
     if (m_param)
     {
         /* release string arguments that were strdup'd */
--- source/encoder/ratecontrol.cpp
+++ source/encoder/ratecontrol.cpp
@@ -402,6 +402,7 @@
                 return false;
             if (m_param->rc.cuTree)
             {
+#if 0
                 char *tmpFile = strcatFilename(fileName, ".cutree");
                 if (!tmpFile)
                     return false;
@@ -412,6 +413,9 @@
                     x265_log_file(m_param, X265_LOG_ERROR, "can't open stats file %s.cutree\n", fileName);
                     return false;
                 }
+#endif
+                x265_log(m_param, X265_LOG_ERROR, "filesystem access not supported\n");
+                return false;
             }
 
             /* check whether 1st pass options were compatible with current options */
@@ -634,6 +638,7 @@
          * and move it to the real name only when it's complete */
         if (m_param->rc.bStatWrite)
         {
+#if 0
             char *p, *statFileTmpname;
             statFileTmpname = strcatFilename(fileName, ".temp");
             if (!statFileTmpname)
@@ -662,6 +667,9 @@
                     return false;
                 }
             }
+#endif
+            x265_log(m_param, X265_LOG_ERROR, "filesystem access not supported\n");
+            return false;
         }
         if (m_param->rc.cuTree)
         {
@@ -2793,6 +2801,7 @@
     if (!fileName)
         fileName = s_defaultStatFileName;
 
+#if 0
     if (m_statFileOut)
     {
         fclose(m_statFileOut);
@@ -2828,6 +2837,7 @@
         X265_FREE(tmpFileName);
         X265_FREE(newFileName);
     }
+#endif
 
     if (m_cutreeStatFileIn)
         fclose(m_cutreeStatFileIn);
