--- include/qpdf/FileInputSource.hh
+++ include/qpdf/FileInputSource.hh
@@ -30,8 +30,6 @@
     QPDF_DLL
     FileInputSource();
     QPDF_DLL
-    void setFilename(char const* filename);
-    QPDF_DLL
     void setFile(char const* description, FILE* filep, bool close_file);
     QPDF_DLL
     virtual ~FileInputSource();
--- include/qpdf/QPDF.hh
+++ include/qpdf/QPDF.hh
@@ -65,8 +65,6 @@
     // encrypted,either a null password or an empty password can be
     // used.  If the file is encrypted, either the user password or
     // the owner password may be supplied.
-    QPDF_DLL
-    void processFile(char const* filename, char const* password = 0);
 
     // Parse a PDF from a stdio FILE*.  The FILE must be open in
     // binary mode and must be seekable.  It may be open read only.
--- include/qpdf/QPDFWriter.hh
+++ include/qpdf/QPDFWriter.hh
@@ -63,8 +63,6 @@
     // to stdout.  This is equivalent to using the previous
     // constructor and then calling setOutputFilename().  See
     // setOutputFilename() for details.
-    QPDF_DLL
-    QPDFWriter(QPDF& pdf, char const* filename);
 
     // Create a QPDFWriter object that writes its output to an already
     // open FILE*.  This is equivalent to calling the first
@@ -87,8 +85,6 @@
     // useful for tracking down problems.  If your application doesn't
     // want the partially written file to be left behind, you should
     // delete it the eventual call to write fails.
-    QPDF_DLL
-    void setOutputFilename(char const* filename);
 
     // Write to the given FILE*, which must be opened by the caller.
     // If close_file is true, QPDFWriter will close the file.
--- include/qpdf/QUtil.hh
+++ include/qpdf/QUtil.hh
@@ -77,14 +77,10 @@
 
     // If the open fails, throws std::runtime_error.  Otherwise, the
     // FILE* is returned.
-    QPDF_DLL
-    FILE* safe_fopen(char const* filename, char const* mode);
 
     // The FILE* argument is assumed to be the return of fopen.  If
     // null, throw std::runtime_error.  Otherwise, return the FILE*
     // argument.
-    QPDF_DLL
-    FILE* fopen_wrapper(std::string const&, FILE*);
 
     // Wrap around off_t versions of fseek and ftell if available
     QPDF_DLL
@@ -92,8 +88,6 @@
     QPDF_DLL
     qpdf_offset_t tell(FILE* stream);
 
-    QPDF_DLL
-    bool same_file(char const* name1, char const* name2);
 
     QPDF_DLL
     char* copy_string(std::string const&);
@@ -180,8 +174,6 @@
     RandomDataProvider* getRandomDataProvider();
 
     QPDF_DLL
-    std::list<std::string> read_lines_from_file(char const* filename);
-    QPDF_DLL
     std::list<std::string> read_lines_from_file(std::istream&);
 
     QPDF_DLL
--- include/qpdf/qpdf-c.h
+++ include/qpdf/qpdf-c.h
@@ -195,9 +195,6 @@
      * only read as needed.  For files without passwords, pass a null
      * pointer as the password.
      */
-    QPDF_DLL
-    QPDF_ERROR_CODE qpdf_read(qpdf_data qpdf, char const* filename,
-			      char const* password);
 
     /* Calling qpdf_read_memory causes processMemoryFile to be called
      * in the C++ API.  Otherwise, it behaves in the same way as
@@ -302,8 +299,6 @@
      * etc.) is lost, so any write parameter functions must be called
      * again.
      */
-    QPDF_DLL
-    QPDF_ERROR_CODE qpdf_init_write(qpdf_data qpdf, char const* filename);
 
     /* Initialize for writing but indicate that the PDF file should be
      * written to memory.  Call qpdf_get_buffer_length and
--- libqpdf/FileInputSource.cc
+++ libqpdf/FileInputSource.cc
@@ -10,6 +10,7 @@
 {
 }
 
+#if 0
 void
 FileInputSource::setFilename(char const* filename)
 {
@@ -18,6 +19,7 @@
     this->close_file = true;
     this->file = QUtil::safe_fopen(this->filename.c_str(), "rb");
 }
+#endif
 
 void
 FileInputSource::setFile(
--- libqpdf/MD5.cc
+++ libqpdf/MD5.cc
@@ -324,6 +324,7 @@
     update(QUtil::unsigned_char_pointer(data), len);
 }
 
+#if 0
 void MD5::encodeFile(char const *filename, int up_to_size)
 {
     unsigned char buffer[1024];
@@ -361,6 +362,7 @@
 
     final();
 }
+#endif
 
 void MD5::digest(Digest result)
 {
@@ -395,6 +397,7 @@
     return m.unparse();
 }
 
+#if 0
 std::string
 MD5::getFileChecksum(char const* filename, int up_to_size)
 {
@@ -402,6 +405,7 @@
     m.encodeFile(filename, up_to_size);
     return m.unparse();
 }
+#endif
 
 bool
 MD5::checkDataChecksum(char const* const checksum,
@@ -411,6 +415,7 @@
     return (checksum == actual_checksum);
 }
 
+#if 0
 bool
 MD5::checkFileChecksum(char const* const checksum,
 		       char const* filename, int up_to_size)
@@ -427,3 +432,4 @@
     }
     return result;
 }
+#endif
--- libqpdf/QPDF.cc
+++ libqpdf/QPDF.cc
@@ -133,6 +133,7 @@
     }
 }
 
+#if 0
 void
 QPDF::processFile(char const* filename, char const* password)
 {
@@ -140,6 +141,7 @@
     fi->setFilename(filename);
     processInputSource(fi, password);
 }
+#endif
 
 void
 QPDF::processFile(char const* description, FILE* filep,
--- libqpdf/QPDFWriter.cc
+++ libqpdf/QPDFWriter.cc
@@ -83,11 +83,13 @@
 {
 }
 
+#if 0
 QPDFWriter::QPDFWriter(QPDF& pdf, char const* filename) :
     m(new Members(pdf))
 {
     setOutputFilename(filename);
 }
+#endif
 
 QPDFWriter::QPDFWriter(QPDF& pdf, char const* description,
                        FILE *file, bool close_file) :
@@ -100,6 +102,7 @@
 {
 }
 
+#if 0
 void
 QPDFWriter::setOutputFilename(char const* filename)
 {
@@ -121,6 +124,7 @@
     }
     setOutputFile(description, f, close_file);
 }
+#endif
 
 void
 QPDFWriter::setOutputFile(char const* description, FILE* file, bool close_file)
--- libqpdf/QTC.cc
+++ libqpdf/QTC.cc
@@ -4,14 +4,17 @@
 #include <stdio.h>
 #include <qpdf/QUtil.hh>
 
+#if 0
 static bool tc_active(char const* const scope)
 {
     std::string value;
     return (QUtil::get_env("TC_SCOPE", &value) && (value == scope));
 }
+#endif
 
 void QTC::TC(char const* const scope, char const* const ccase, int n)
 {
+#if 0
     static std::set<std::pair<std::string, int> > cache;
 
     if (! tc_active(scope))
@@ -40,4 +43,5 @@
     FILE* tc = QUtil::safe_fopen(filename.c_str(), "ab");
     fprintf(tc, "%s %d\n", ccase, n);
     fclose(tc);
+#endif
 }
--- libqpdf/QUtil.cc
+++ libqpdf/QUtil.cc
@@ -160,6 +160,7 @@
     return status;
 }
 
+#if 0
 FILE*
 QUtil::safe_fopen(char const* filename, char const* mode)
 {
@@ -186,6 +187,7 @@
     }
     return f;
 }
+#endif
 
 int
 QUtil::seek(FILE* stream, qpdf_offset_t offset, int whence)
@@ -219,6 +221,7 @@
 #endif
 }
 
+#if 0
 bool
 QUtil::same_file(char const* name1, char const* name2)
 {
@@ -267,6 +270,7 @@
 #endif
     return false;
 }
+#endif
 
 char*
 QUtil::copy_string(std::string const& str)
@@ -597,6 +601,7 @@
     return found_digit;
 }
 
+#if 0
 std::list<std::string>
 QUtil::read_lines_from_file(char const* filename)
 {
@@ -609,6 +614,7 @@
     in.close();
     return lines;
 }
+#endif
 
 std::list<std::string>
 QUtil::read_lines_from_file(std::istream& in)
--- libqpdf/qpdf/MD5.hh
+++ libqpdf/qpdf/MD5.hh
@@ -26,8 +26,6 @@
     void encodeString(char const* input_string);
 
     // encodes file and finalizes
-    QPDF_DLL
-    void encodeFile(char const* filename, int up_to_size = -1);
 
     // appends string to current md5 object
     QPDF_DLL
@@ -54,14 +52,9 @@
     QPDF_DLL
     static std::string getDataChecksum(char const* buf, int len);
     QPDF_DLL
-    static std::string getFileChecksum(char const* filename,
-				       int up_to_size = -1);
     QPDF_DLL
     static bool checkDataChecksum(char const* const checksum,
 				  char const* buf, int len);
-    QPDF_DLL
-    static bool checkFileChecksum(char const* const checksum,
-				  char const* filename, int up_to_size = -1);
 
   private:
     // POINTER defines a generic pointer type
--- libqpdf/qpdf-c.cc
+++ libqpdf/qpdf-c.cc
@@ -53,10 +53,12 @@
 }
 
 // must set qpdf->filename and qpdf->password
+#if 0
 static void call_read(qpdf_data qpdf)
 {
     qpdf->qpdf->processFile(qpdf->filename, qpdf->password);
 }
+#endif
 
 // must set qpdf->filename, qpdf->buffer, qpdf->size, and qpdf->password
 static void call_read_memory(qpdf_data qpdf)
@@ -66,10 +68,12 @@
 }
 
 // must set qpdf->filename
+#if 0
 static void call_init_write(qpdf_data qpdf)
 {
     qpdf->qpdf_writer = new QPDFWriter(*(qpdf->qpdf), qpdf->filename);
 }
+#endif
 
 static void call_init_write_memory(qpdf_data qpdf)
 {
@@ -254,6 +258,7 @@
     qpdf->qpdf->setAttemptRecovery(value);
 }
 
+#if 0
 QPDF_ERROR_CODE qpdf_read(qpdf_data qpdf, char const* filename,
 			  char const* password)
 {
@@ -272,6 +277,7 @@
         );
     return status;
 }
+#endif
 
 QPDF_ERROR_CODE qpdf_read_memory(qpdf_data qpdf,
 				 char const* description,
@@ -448,6 +454,7 @@
     }
 }
 
+#if 0
 QPDF_ERROR_CODE qpdf_init_write(qpdf_data qpdf, char const* filename)
 {
     qpdf_init_write_internal(qpdf);
@@ -456,6 +463,7 @@
     QTC::TC("qpdf", "qpdf-c called qpdf_init_write", status);
     return status;
 }
+#endif
 
 QPDF_ERROR_CODE qpdf_init_write_memory(qpdf_data qpdf)
 {
