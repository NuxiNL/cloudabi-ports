--- src/include/_/types.h
+++ src/include/_/types.h
@@ -207,6 +207,7 @@
 typedef struct { __uint32_t __mask; } __sigset_t;
 typedef __int_least24_t __suseconds_t;
 typedef __int64_t __time_t;
+typedef __uint64_t __useconds_t;
 typedef __builtin_va_list __va_list;
 
 // Process-shared threading objects with a fixed ABI.
--- src/include/sys/types.h
+++ src/include/sys/types.h
@@ -1,4 +1,4 @@
-// Copyright (c) 2015 Nuxi, https://nuxi.nl/
+// Copyright (c) 2015-2016 Nuxi, https://nuxi.nl/
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions
@@ -23,6 +23,10 @@
 
 // <sys/types.h> - data types
 //
+// Extensions:
+// - useconds_t:
+//   Still used actively, as it was part of POSIX up to issue 6.
+//
 // Features missing:
 // - fsblkcnt_t and fsfilcnt_t:
 //   Filesystem-level statistics not available.
@@ -134,5 +138,9 @@
 typedef __time_t time_t;
 #define _TIME_T_DECLARED
 #endif
+#ifndef _USECONDS_T_DECLARED
+typedef __useconds_t useconds_t;
+#define _USECONDS_T_DECLARED
+#endif
 
 #endif
--- src/include/unistd.h
+++ src/include/unistd.h
@@ -1,4 +1,4 @@
-// Copyright (c) 2015 Nuxi, https://nuxi.nl/
+// Copyright (c) 2015-2016 Nuxi, https://nuxi.nl/
 //
 // Redistribution and use in source and binary forms, with or without
 // modification, are permitted provided that the following conditions
@@ -26,6 +26,8 @@
 // Extensions:
 // - _SC_NPROCESSORS_ONLN:
 //   Present on most systems and used by many pieces of software.
+// - useconds_t and usleep():
+//   Still used actively, as it was part of POSIX up to issue 6.
 //
 // Features missing:
 // - _POSIX_VERSION, _POSIX2_VERSION, _XOPEN_VERSION, _SC_VERSION,
@@ -305,6 +307,10 @@
 typedef __ssize_t ssize_t;
 #define _SSIZE_T_DECLARED
 #endif
+#ifndef _USECONDS_T_DECLARED
+typedef __useconds_t useconds_t;
+#define _USECONDS_T_DECLARED
+#endif
 
 __BEGIN_DECLS
 int close(int);
@@ -327,6 +333,7 @@
 int symlinkat(const char *, int, const char *);
 long sysconf(int);
 int unlinkat(int, const char *, int);
+int usleep(useconds_t);
 ssize_t write(int, const void *, size_t);
 __END_DECLS
 
--- src/libc/symbols
+++ src/libc/symbols
@@ -874,6 +874,7 @@
 ungetc
 ungetwc
 unlinkat
+usleep
 utimensat
 vasprintf
 vasprintf_l
--- src/libc/unistd/usleep.c
+++ src/libc/unistd/usleep.c
@@ -0,0 +1,19 @@
+// Copyright (c) 2016 Nuxi, https://nuxi.nl/
+//
+// This file is distributed under a 2-clause BSD license.
+// See the LICENSE file for details.
+
+#include <errno.h>
+#include <time.h>
+#include <unistd.h>
+
+int usleep(useconds_t useconds) {
+  struct timespec ts = {.tv_sec = useconds / 1000000,
+                        .tv_nsec = useconds % 1000000 * 1000};
+  int error = clock_nanosleep(CLOCK_REALTIME, 0, &ts);
+  if (error != 0) {
+    errno = error;
+    return -1;
+  }
+  return 0;
+}
--- src/libc/unistd/usleep_test.c
+++ src/libc/unistd/usleep_test.c
@@ -0,0 +1,18 @@
+// Copyright (c) 2016 Nuxi, https://nuxi.nl/
+//
+// This file is distributed under a 2-clause BSD license.
+// See the LICENSE file for details.
+
+#include <testing.h>
+#include <time.h>
+#include <unistd.h>
+
+TEST(usleep, example) {
+  // POSIX usleep() only allows threads to sleep up to one second. Most
+  // implementations out there don't have this restriction. We'd better
+  // remain compatible with the rest.
+  time_t before = time(NULL);
+  ASSERT_EQ(0, usleep(1500000));
+  time_t after = time(NULL);
+  ASSERT_TRUE(after - before >= 1 && after - before <= 2);
+}
