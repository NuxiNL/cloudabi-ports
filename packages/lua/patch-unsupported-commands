--- src/lauxlib.c
+++ src/lauxlib.c
@@ -249,6 +249,7 @@
 }
 
 
+#if 0
 #if !defined(l_inspectstat)	/* { */
 
 #if defined(LUA_USE_POSIX)
@@ -286,6 +287,7 @@
     return 3;  /* return true/nil,what,code */
   }
 }
+#endif
 
 /* }====================================================== */
 
@@ -700,6 +702,7 @@
 }
 
 
+#if 0
 LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,
                                              const char *mode) {
   LoadF lf;
@@ -734,6 +737,7 @@
   lua_remove(L, fnameindex);
   return status;
 }
+#endif
 
 
 typedef struct LoadS {
--- src/lauxlib.h
+++ src/lauxlib.h
@@ -71,7 +71,6 @@
                                    const char *const lst[]);
 
 LUALIB_API int (luaL_fileresult) (lua_State *L, int stat, const char *fname);
-LUALIB_API int (luaL_execresult) (lua_State *L, int stat);
 
 /* predefined references */
 #define LUA_NOREF       (-2)
@@ -80,10 +79,6 @@
 LUALIB_API int (luaL_ref) (lua_State *L, int t);
 LUALIB_API void (luaL_unref) (lua_State *L, int t, int ref);
 
-LUALIB_API int (luaL_loadfilex) (lua_State *L, const char *filename,
-                                               const char *mode);
-
-#define luaL_loadfile(L,f)	luaL_loadfilex(L,f,NULL)
 
 LUALIB_API int (luaL_loadbufferx) (lua_State *L, const char *buff, size_t sz,
                                    const char *name, const char *mode);
--- src/lbaselib.c
+++ src/lbaselib.c
@@ -21,6 +21,7 @@
 #include "lualib.h"
 
 
+#if 0
 static int luaB_print (lua_State *L) {
   int n = lua_gettop(L);  /* number of arguments */
   int i;
@@ -41,6 +42,7 @@
   lua_writeline();
   return 0;
 }
+#endif
 
 
 #define SPACECHARS	" \f\n\r\t\v"
@@ -284,6 +286,7 @@
 }
 
 
+#if 0
 static int luaB_loadfile (lua_State *L) {
   const char *fname = luaL_optstring(L, 1, NULL);
   const char *mode = luaL_optstring(L, 2, NULL);
@@ -291,6 +294,7 @@
   int status = luaL_loadfilex(L, fname, mode);
   return load_aux(L, status, env);
 }
+#endif
 
 
 /*
@@ -353,6 +357,7 @@
 /* }====================================================== */
 
 
+#if 0
 static int dofilecont (lua_State *L, int d1, lua_KContext d2) {
   (void)d1;  (void)d2;  /* only to match 'lua_Kfunction' prototype */
   return lua_gettop(L) - 1;
@@ -367,6 +372,7 @@
   lua_callk(L, 0, LUA_MULTRET, 0, dofilecont);
   return dofilecont(L, 0, 0);
 }
+#endif
 
 
 static int luaB_assert (lua_State *L) {
@@ -453,11 +459,9 @@
 static const luaL_Reg base_funcs[] = {
   {"assert", luaB_assert},
   {"collectgarbage", luaB_collectgarbage},
-  {"dofile", luaB_dofile},
   {"error", luaB_error},
   {"getmetatable", luaB_getmetatable},
   {"ipairs", luaB_ipairs},
-  {"loadfile", luaB_loadfile},
   {"load", luaB_load},
 #if defined(LUA_COMPAT_LOADSTRING)
   {"loadstring", luaB_load},
@@ -465,7 +469,6 @@
   {"next", luaB_next},
   {"pairs", luaB_pairs},
   {"pcall", luaB_pcall},
-  {"print", luaB_print},
   {"rawequal", luaB_rawequal},
   {"rawlen", luaB_rawlen},
   {"rawget", luaB_rawget},
--- src/ldblib.c
+++ src/ldblib.c
@@ -399,6 +399,7 @@
 }
 
 
+#if 0
 static int db_debug (lua_State *L) {
   for (;;) {
     char buffer[250];
@@ -412,6 +413,7 @@
     lua_settop(L, 0);  /* remove eventual returns */
   }
 }
+#endif
 
 
 static int db_traceback (lua_State *L) {
@@ -429,7 +431,6 @@
 
 
 static const luaL_Reg dblib[] = {
-  {"debug", db_debug},
   {"getuservalue", db_getuservalue},
   {"gethook", db_gethook},
   {"getinfo", db_getinfo},
--- src/ldo.c
+++ src/ldo.c
@@ -60,7 +60,7 @@
 	try { a } catch(...) { if ((c)->status == 0) (c)->status = -1; }
 #define luai_jmpbuf		int  /* dummy variable */
 
-#elif defined(LUA_USE_POSIX)				/* }{ */
+#elif 0
 
 /* in POSIX, try _longjmp/_setjmp (more efficient) */
 #define LUAI_THROW(L,c)		_longjmp((c)->b, 1)
--- src/liolib.c
+++ src/liolib.c
@@ -240,6 +240,7 @@
 }
 
 
+#if 0
 static void opencheck (lua_State *L, const char *fname, const char *mode) {
   LStream *p = newfile(L);
   p->f = fopen(fname, mode);
@@ -276,6 +277,7 @@
   p->closef = &io_pclose;
   return (p->f == NULL) ? luaL_fileresult(L, 0, filename) : 1;
 }
+#endif
 
 
 static int io_tmpfile (lua_State *L) {
@@ -295,6 +297,7 @@
 }
 
 
+#if 0
 static int g_iofile (lua_State *L, const char *f, const char *mode) {
   if (!lua_isnoneornil(L, 1)) {
     const char *filename = lua_tostring(L, 1);
@@ -320,6 +323,7 @@
 static int io_output (lua_State *L) {
   return g_iofile(L, IO_OUTPUT, "w");
 }
+#endif
 
 
 static int io_readline (lua_State *L);
@@ -348,6 +352,7 @@
 }
 
 
+#if 0
 static int io_lines (lua_State *L) {
   int toclose;
   if (lua_isnone(L, 1)) lua_pushnil(L);  /* at least one argument */
@@ -366,6 +371,7 @@
   aux_lines(L, toclose);
   return 1;
 }
+#endif
 
 
 /*
@@ -695,11 +701,6 @@
 static const luaL_Reg iolib[] = {
   {"close", io_close},
   {"flush", io_flush},
-  {"input", io_input},
-  {"lines", io_lines},
-  {"open", io_open},
-  {"output", io_output},
-  {"popen", io_popen},
   {"read", io_read},
   {"tmpfile", io_tmpfile},
   {"type", io_type},
@@ -763,8 +764,6 @@
   luaL_newlib(L, iolib);  /* new module */
   createmeta(L);
   /* create (and set) default files */
-  createstdfile(L, stdin, IO_INPUT, "stdin");
-  createstdfile(L, stdout, IO_OUTPUT, "stdout");
   createstdfile(L, stderr, NULL, "stderr");
   return 1;
 }
--- src/lmathlib.c
+++ src/lmathlib.c
@@ -274,11 +274,13 @@
 }
 
 
+#if 0
 static int math_randomseed (lua_State *L) {
   l_srand((unsigned int)(lua_Integer)luaL_checknumber(L, 1));
   (void)l_rand(); /* discard first value to avoid undesirable correlations */
   return 0;
 }
+#endif
 
 
 static int math_type (lua_State *L) {
@@ -368,7 +370,6 @@
   {"modf",   math_modf},
   {"rad",   math_rad},
   {"random",     math_random},
-  {"randomseed", math_randomseed},
   {"sin",   math_sin},
   {"sqrt",  math_sqrt},
   {"tan",   math_tan},
--- src/loadlib.c
+++ src/loadlib.c
@@ -413,6 +413,7 @@
 */
 
 
+#if 0
 static int readable (const char *filename) {
   FILE *f = fopen(filename, "r");  /* try to open file */
   if (f == NULL) return 0;  /* open failed */
@@ -555,6 +556,7 @@
   lua_pushstring(L, filename);  /* will be 2nd argument to module */
   return 2;
 }
+#endif
 
 
 static int searcher_preload (lua_State *L) {
@@ -707,7 +709,6 @@
 
 static const luaL_Reg pk_funcs[] = {
   {"loadlib", ll_loadlib},
-  {"searchpath", ll_searchpath},
 #if defined(LUA_COMPAT_MODULE)
   {"seeall", ll_seeall},
 #endif
@@ -730,6 +731,7 @@
 };
 
 
+#if 0
 static void createsearcherstable (lua_State *L) {
   static const lua_CFunction searchers[] =
     {searcher_preload, searcher_Lua, searcher_C, searcher_Croot, NULL};
@@ -748,6 +750,7 @@
 #endif
   lua_setfield(L, -2, "searchers");  /* put it in field 'searchers' */
 }
+#endif
 
 
 /*
@@ -767,7 +770,6 @@
 LUAMOD_API int luaopen_package (lua_State *L) {
   createclibstable(L);
   luaL_newlib(L, pk_funcs);  /* create 'package' table */
-  createsearcherstable(L);
   /* set paths */
   setpath(L, "path", LUA_PATH_VAR, LUA_PATH_DEFAULT);
   setpath(L, "cpath", LUA_CPATH_VAR, LUA_CPATH_DEFAULT);
--- src/loslib.c
+++ src/loslib.c
@@ -138,6 +138,7 @@
 
 
 
+#if 0
 static int os_execute (lua_State *L) {
   const char *cmd = luaL_optstring(L, 1, NULL);
   int stat = system(cmd);
@@ -172,6 +173,7 @@
   lua_pushstring(L, buff);
   return 1;
 }
+#endif
 
 
 static int os_getenv (lua_State *L) {
@@ -385,14 +387,10 @@
   {"clock",     os_clock},
   {"date",      os_date},
   {"difftime",  os_difftime},
-  {"execute",   os_execute},
   {"exit",      os_exit},
   {"getenv",    os_getenv},
-  {"remove",    os_remove},
-  {"rename",    os_rename},
   {"setlocale", os_setlocale},
   {"time",      os_time},
-  {"tmpname",   os_tmpname},
   {NULL, NULL}
 };
 
